<span class="Apple-style-span">redis是一个key-value存储系统。和Memcached类似。</span>

<span class="Apple-style-span">1&gt;它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hashs（哈希类型）。</span>

<span class="Apple-style-span">2&gt;这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</span>

<span class="Apple-style-span">在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。</span>

<span class="Apple-style-span">3&gt;区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</span><!--more-->

<span class="Apple-style-span">Redis提供了丰富的命令（command）对数据库和各种数据类型进行操作，这些command可以在Linux终端使用。在编程时，比如使用Redis 的Java语言包，这些命令都有对应的方法。下面将Redis提供的命令做一总结。</span>

<span class="Apple-style-span">官网命令列表：http://redis.io/commands （英文）</span>
<h3><span class="Apple-style-span">1、连接操作相关的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">quit：关闭连接（connection）</span></li>
 	<li><span class="Apple-style-span">auth：简单密码认证</span></li>
</ul>
<h3><span class="Apple-style-span">2、对value操作的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">exists(key)：确认一个key是否存在</span></li>
 	<li><span class="Apple-style-span">del(key)：删除一个key</span></li>
 	<li><span class="Apple-style-span">type(key)：返回值的类型</span></li>
 	<li><span class="Apple-style-span">keys(pattern)：返回满足给定pattern的所有key</span></li>
 	<li><span class="Apple-style-span">randomkey：随机返回key空间的一个key</span></li>
 	<li><span class="Apple-style-span">rename(oldname, newname)：将key由oldname重命名为newname，若newname存在则删除newname表示的key</span></li>
 	<li><span class="Apple-style-span">dbsize：返回当前数据库中key的数目</span></li>
 	<li><span class="Apple-style-span">expire：设定一个key的活动时间（s）</span></li>
 	<li><span class="Apple-style-span">ttl：获得一个key的活动时间</span></li>
 	<li><span class="Apple-style-span">select(index)：按索引查询</span></li>
 	<li><span class="Apple-style-span">move(key, dbindex)：将当前数据库中的key转移到有dbindex索引的数据库</span></li>
 	<li><span class="Apple-style-span">flushdb：删除当前选择数据库中的所有key</span></li>
 	<li><span class="Apple-style-span">flushall：删除所有数据库中的所有key</span></li>
</ul>
<h3><span class="Apple-style-span"><span id="more-2211"></span>3、对String操作的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">set(key, value)：给数据库中名称为key的string赋予值value</span></li>
 	<li><span class="Apple-style-span">get(key)：返回数据库中名称为key的string的value</span></li>
 	<li><span class="Apple-style-span">getset(key, value)：给名称为key的string赋予上一次的value</span></li>
 	<li><span class="Apple-style-span">mget(key1, key2,…, key N)：返回库中多个string（它们的名称为key1，key2…）的value</span></li>
 	<li><span class="Apple-style-span">setnx(key, value)：如果不存在名称为key的string，则向库中添加string，名称为key，值为value</span></li>
 	<li><span class="Apple-style-span">setex(key, time, value)：向库中添加string（名称为key，值为value）同时，设定过期时间time</span></li>
 	<li><span class="Apple-style-span">mset(key1, value1, key2, value2,…key N, value N)：同时给多个string赋值，名称为key i的string赋值value i</span></li>
 	<li><span class="Apple-style-span">msetnx(key1, value1, key2, value2,…key N, value N)：如果所有名称为key i的string都不存在，则向库中添加string，名称key i赋值为value i</span></li>
 	<li><span class="Apple-style-span">incr(key)：名称为key的string增1操作</span></li>
 	<li><span class="Apple-style-span">incrby(key, integer)：名称为key的string增加integer</span></li>
 	<li><span class="Apple-style-span">decr(key)：名称为key的string减1操作</span></li>
 	<li><span class="Apple-style-span">decrby(key, integer)：名称为key的string减少integer</span></li>
 	<li><span class="Apple-style-span">append(key, value)：名称为key的string的值附加value</span></li>
 	<li><span class="Apple-style-span">substr(key, start, end)：返回名称为key的string的value的子串</span></li>
</ul>
<h3><span class="Apple-style-span">4、对List操作的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">rpush(key, value)：在名称为key的list尾添加一个值为value的元素</span></li>
 	<li><span class="Apple-style-span">lpush(key, value)：在名称为key的list头添加一个值为value的 元素</span></li>
 	<li><span class="Apple-style-span">llen(key)：返回名称为key的list的长度</span></li>
 	<li><span class="Apple-style-span">lrange(key, start, end)：返回名称为key的list中start至end之间的元素（下标从0开始，下同）</span></li>
 	<li><span class="Apple-style-span">ltrim(key, start, end)：截取名称为key的list，保留start至end之间的元素</span></li>
 	<li><span class="Apple-style-span">lindex(key, index)：返回名称为key的list中index位置的元素</span></li>
 	<li><span class="Apple-style-span">lset(key, index, value)：给名称为key的list中index位置的元素赋值为value</span></li>
 	<li><span class="Apple-style-span">lrem(key, count, value)：删除count个名称为key的list中值为value的元素。count为0，删除所有值为value的元素，count&gt;0从头至尾删除count个值为value的元素，count&lt;0从尾到头删除|count|个值为value的元素。 lpop(key)：返回并删除名称为key的list中的首元素 rpop(key)：返回并删除名称为key的list中的尾元素 blpop(key1, key2,… key N, timeout)：lpop命令的block版本。即当timeout为0时，若遇到名称为key i的list不存在或该list为空，则命令结束。如果timeout&gt;0，则遇到上述情况时，等待timeout秒，如果问题没有解决，则对keyi+1开始的list执行pop操作。</span></li>
 	<li><span class="Apple-style-span">brpop(key1, key2,… key N, timeout)：rpop的block版本。参考上一命令。</span></li>
 	<li><span class="Apple-style-span">rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部</span></li>
</ul>
<h3><span class="Apple-style-span">5、对Set操作的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">sadd(key, member)：向名称为key的set中添加元素member</span></li>
 	<li><span class="Apple-style-span">srem(key, member) ：删除名称为key的set中的元素member</span></li>
 	<li><span class="Apple-style-span">spop(key) ：随机返回并删除名称为key的set中一个元素</span></li>
 	<li><span class="Apple-style-span">smove(srckey, dstkey, member) ：将member元素从名称为srckey的集合移到名称为dstkey的集合</span></li>
 	<li><span class="Apple-style-span">scard(key) ：返回名称为key的set的基数</span></li>
 	<li><span class="Apple-style-span">sismember(key, member) ：测试member是否是名称为key的set的元素</span></li>
 	<li><span class="Apple-style-span">sinter(key1, key2,…key N) ：求交集</span></li>
 	<li><span class="Apple-style-span">sinterstore(dstkey, key1, key2,…key N) ：求交集并将交集保存到dstkey的集合</span></li>
 	<li><span class="Apple-style-span">sunion(key1, key2,…key N) ：求并集</span></li>
 	<li><span class="Apple-style-span">sunionstore(dstkey, key1, key2,…key N) ：求并集并将并集保存到dstkey的集合</span></li>
 	<li><span class="Apple-style-span">sdiff(key1, key2,…key N) ：求差集</span></li>
 	<li><span class="Apple-style-span">sdiffstore(dstkey, key1, key2,…key N) ：求差集并将差集保存到dstkey的集合</span></li>
 	<li><span class="Apple-style-span">smembers(key) ：返回名称为key的set的所有元素</span></li>
 	<li><span class="Apple-style-span">srandmember(key) ：随机返回名称为key的set的一个元素</span></li>
</ul>
<h3><span class="Apple-style-span">6、对zset（sorted set）操作的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">zadd(key, score, member)：向名称为key的zset中添加元素member，score用于排序。如果该元素已经存在，则根据score更新该元素的顺序。</span></li>
 	<li><span class="Apple-style-span">zrem(key, member) ：删除名称为key的zset中的元素member</span></li>
 	<li><span class="Apple-style-span">zincrby(key, increment, member) ：如果在名称为key的zset中已经存在元素member，则该元素的score增加increment；否则向集合中添加该元素，其score的值为increment</span></li>
 	<li><span class="Apple-style-span">zrank(key, member) ：返回名称为key的zset（元素已按score从小到大排序）中member元素的rank（即index，从0开始），若没有member元素，返回“nil”</span></li>
 	<li><span class="Apple-style-span">zrevrank(key, member) ：返回名称为key的zset（元素已按score从大到小排序）中member元素的rank（即index，从0开始），若没有member元素，返回“nil”</span></li>
 	<li><span class="Apple-style-span">zrange(key, start, end)：返回名称为key的zset（元素已按score从小到大排序）中的index从start到end的所有元素</span></li>
 	<li><span class="Apple-style-span">zrevrange(key, start, end)：返回名称为key的zset（元素已按score从大到小排序）中的index从start到end的所有元素</span></li>
 	<li><span class="Apple-style-span">zrangebyscore(key, min, max)：返回名称为key的zset中score &gt;= min且score &lt;= max的所有元素 zcard(key)：返回名称为key的zset的基数 zscore(key, element)：返回名称为key的zset中元素element的score zremrangebyrank(key, min, max)：删除名称为key的zset中rank &gt;= min且rank &lt;= max的所有元素 zremrangebyscore(key, min, max) ：删除名称为key的zset中score &gt;= min且score &lt;= max的所有元素</span></li>
 	<li><span class="Apple-style-span">zunionstore / zinterstore(dstkeyN, key1,…,keyN, WEIGHTS w1,…wN, AGGREGATE SUM|MIN|MAX)：对N个zset求并集和交集，并将最后的集合保存在dstkeyN中。对于集合中每一个元素的score，在进行AGGREGATE运算前，都要乘以对于的WEIGHT参数。如果没有提供WEIGHT，默认为1。默认的AGGREGATE是SUM，即结果集合中元素的score是所有集合对应元素进行SUM运算的值，而MIN和MAX是指，结果集合中元素的score是所有集合对应元素中最小值和最大值。</span></li>
</ul>
<h3><span class="Apple-style-span">7、对Hash操作的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">hset(key, field, value)：向名称为key的hash中添加元素field&lt;—&gt;value</span></li>
 	<li><span class="Apple-style-span">hget(key, field)：返回名称为key的hash中field对应的value</span></li>
 	<li><span class="Apple-style-span">hmget(key, field1, …,field N)：返回名称为key的hash中field i对应的value</span></li>
 	<li><span class="Apple-style-span">hmset(key, field1, value1,…,field N, value N)：向名称为key的hash中添加元素field i&lt;—&gt;value i</span></li>
 	<li><span class="Apple-style-span">hincrby(key, field, integer)：将名称为key的hash中field的value增加integer</span></li>
 	<li><span class="Apple-style-span">hexists(key, field)：名称为key的hash中是否存在键为field的域</span></li>
 	<li><span class="Apple-style-span">hdel(key, field)：删除名称为key的hash中键为field的域</span></li>
 	<li><span class="Apple-style-span">hlen(key)：返回名称为key的hash中元素个数</span></li>
 	<li><span class="Apple-style-span">hkeys(key)：返回名称为key的hash中所有键</span></li>
 	<li><span class="Apple-style-span">hvals(key)：返回名称为key的hash中所有键对应的value</span></li>
 	<li><span class="Apple-style-span">hgetall(key)：返回名称为key的hash中所有的键（field）及其对应的value</span></li>
</ul>
<h3><span class="Apple-style-span">8、持久化</span></h3>
<ul>
 	<li><span class="Apple-style-span">save：将数据同步保存到磁盘</span></li>
 	<li><span class="Apple-style-span">bgsave：将数据异步保存到磁盘</span></li>
 	<li><span class="Apple-style-span">lastsave：返回上次成功将数据保存到磁盘的Unix时戳</span></li>
 	<li><span class="Apple-style-span">shundown：将数据同步保存到磁盘，然后关闭服务</span></li>
</ul>
<h3><span class="Apple-style-span">9、远程服务控制</span></h3>
<ul>
 	<li><span class="Apple-style-span">info：提供服务器的信息和统计</span></li>
 	<li><span class="Apple-style-span">monitor：实时转储收到的请求</span></li>
 	<li><span class="Apple-style-span">slaveof：改变复制策略设置</span></li>
 	<li><span class="Apple-style-span">config：在运行时配置Redis服务器</span></li>
</ul>
<div><span class="Apple-style-span">Redis 事务机制：</span></div>
<div>
<div id="cnblogs_post_body">

<span class="Apple-style-span">二、相关命令列表：</span>
<table class=" xhe-border" border="0" align="center">
<tbody>
<tr>
<td><span class="Apple-style-span">命令原型</span></td>
<td><span class="Apple-style-span">时间复杂度</span></td>
<td><span class="Apple-style-span">命令描述</span></td>
<td><span class="Apple-style-span">返回值</span></td>
</tr>
<tr>
<td><span class="Apple-style-span">MULTI</span></td>
<td><span class="Apple-style-span">用于标记事务的开始，其后执行的命令都将被存入命令队列，直到执行EXEC时，这些命令才会被原子的执行。</span></td>
<td><span class="Apple-style-span">始终返回OK</span></td>
</tr>
<tr>
<td><span class="Apple-style-span">EXEC</span></td>
<td><span class="Apple-style-span">执行在一个事务内命令队列中的所有命令，同时将当前连接的状态恢复为正常状态，即非事务状态。如果在事务中执行了WATCH命令，那么只有当WATCH所监控的Keys没有被修改的前提下，EXEC命令才能执行事务队列中的所有命令，否则EXEC将放弃当前事务中的所有命令。</span></td>
<td><span class="Apple-style-span">原子性的返回事务中各条命令的返回结果。如果在事务中使用了WATCH，一旦事务被放弃，EXEC将返回NULL-multi-bulk回复。</span></td>
</tr>
<tr>
<td><span class="Apple-style-span">DISCARD</span></td>
<td><span class="Apple-style-span">回滚事务队列中的所有命令，同时再将当前连接的状态恢复为正常状态，即非事务状态。如果WATCH命令被使用，该命令将UNWATCH所有的Keys。</span></td>
<td><span class="Apple-style-span">始终返回OK。</span></td>
</tr>
<tr>
<td><span class="Apple-style-span">WATCHkey [key ...]</span></td>
<td><span class="Apple-style-span">O(1)</span></td>
<td><span class="Apple-style-span">在MULTI命令执行之前，可以指定待监控的Keys，然而在执行EXEC之前，如果被监控的Keys发生修改，EXEC将放弃执行该事务队列中的所有命令。</span></td>
<td><span class="Apple-style-span">始终返回OK。</span></td>
</tr>
<tr>
<td><span class="Apple-style-span">UNWATCH</span></td>
<td><span class="Apple-style-span">O(1)</span></td>
<td><span class="Apple-style-span">取消当前事务中指定监控的Keys，如果执行了EXEC或DISCARD命令，则无需再手工执行该命令了，因为在此之后，事务中所有被监控的Keys都将自动取消。</span></td>
<td><span class="Apple-style-span">始终返回OK。</span></td>
</tr>
</tbody>
</table>
<span class="Apple-style-span">三、命令示例：</span>

<span class="Apple-style-span">   1. 事务被正常执行：</span>
<span class="Apple-style-span">    #在Shell命令行下执行Redis的客户端工具。</span>
/&gt;<span class="Apple-style-span"> redis-cli
#在当前连接上启动一个新的事务。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">multi</span>
OK
<span class="Apple-style-span">   #执行事务中的第一条命令，从该命令的返回结果可以看出，该命令并没有立即执行，而是存于事务的命令队列。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">incr t1</span>
QUEUED
<span class="Apple-style-span">    #又执行一个新的命令，从结果可以看出，该命令也被存于事务的命令队列。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">incr t2</span>
QUEUED
<span class="Apple-style-span">   #执行事务命令队列中的所有命令，从结果可以看出，队列中命令的结果得到返回。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">exec</span>
1) (integer) 1
2) (integer) 1

<span class="Apple-style-span">   2. 事务中存在失败的命令：</span>
<span class="Apple-style-span">    #开启一个新的事务。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">multi</span>
OK
<span class="Apple-style-span">    #设置键a的值为string类型的3。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">set a 3</span>
QUEUED
<span class="Apple-style-span">    #从键a所关联的值的头部弹出元素，由于该值是字符串类型，而lpop命令仅能用于List类型，因此在执行exec命令时，该命令将会失败。</span>
redis 127.0.0.1:6379&gt;<span class="Apple-style-span"> lpop a</span>
QUEUED
<span class="Apple-style-span">    #再次设置键a的值为字符串4。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">set a 4</span>
QUEUED
<span class="Apple-style-span">    #获取键a的值，以便确认该值是否被事务中的第二个set命令设置成功。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">get a</span>
QUEUED
<span class="Apple-style-span">    #从结果中可以看出，事务中的第二条命令lpop执行失败，而其后的set和get命令均执行成功，这一点是Redis的事务与关系型数据库中的事务之间最为重要的差别。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">exec</span>
1) OK
2) (error) ERR Operation against a key holding the wrong kind of value
3) OK
4) "4"

<span class="Apple-style-span">   3. 回滚事务：</span>
<span class="Apple-style-span">    #为键t2设置一个事务执行前的值。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">set t2 tt</span>
OK
<span class="Apple-style-span">    #开启一个事务。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">multi</span>
OK
<span class="Apple-style-span">    #在事务内为该键设置一个新值。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">set t2 ttnew</span>
QUEUED
<span class="Apple-style-span">    #放弃事务。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">discard</span>
OK
<span class="Apple-style-span">    #查看键t2的值，从结果中可以看出该键的值仍为事务开始之前的值。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">get t2</span>
"tt"

<span class="Apple-style-span">四、WATCH命令和基于CAS的乐观锁：</span>

在Redis的事务中，WATCH命令可用于提供CAS(check-and-set)功能。假设我们通过WATCH命令在事务执行之前监控了多个Keys，倘若在WATCH之后有任何Key的值发生了变化，EXEC命令执行的事务都将被放弃，同时返回Null multi-bulk应答以通知调用者事务执行失败。例如，我们再次假设Redis中并未提供incr命令来完成键值的原子性递增，如果要实现该功能，我们只能自行编写相应的代码。其伪码如下：
<span class="Apple-style-span">      val = GET mykey</span>
<span class="Apple-style-span">      val = val + 1</span>
<span class="Apple-style-span">      SET mykey $val</span>
以上代码只有在单连接的情况下才可以保证执行结果是正确的，因为如果在同一时刻有多个客户端在同时执行该段代码，那么就会出现多线程程序中经常出现的一种错误场景--竞态争用(race condition)。比如，客户端A和B都在同一时刻读取了mykey的原有值，假设该值为10，此后两个客户端又均将该值加一后set回Redis服务器，这样就会导致mykey的结果为11，而不是我们认为的12。为了解决类似的问题，我们需要借助WATCH命令的帮助，见如下代码：
<span class="Apple-style-span">      WATCH mykey</span>
<span class="Apple-style-span">      val = GET mykey</span>
<span class="Apple-style-span">      val = val + 1</span>
<span class="Apple-style-span">      MULTI</span>
<span class="Apple-style-span">      SET mykey $val</span>
<span class="Apple-style-span">      EXEC</span>
和此前代码不同的是，新代码在获取mykey的值之前先通过WATCH命令监控了该键，此后又将set命令包围在事务中，这样就可以有效的保证每个连接在执行EXEC之前，如果当前连接获取的mykey的值被其它连接的客户端修改，那么当前连接的EXEC命令将执行失败。这样调用者在判断返回值后就可以获悉val是否被重新设置成功。

</div>
&nbsp;

<span class="Apple-style-span">下载http://www.oschina.net/p/redis</span>

<span class="Apple-style-span">解压后里面有：lib 源文件 、examples 例子、test测试</span>

<span class="Apple-style-span">将lib目录拷贝到你的项目中，就可以开始你的predis操作了。</span>

<span class="Apple-style-span">//使用autoload加载相关库,这边重点就是为了require $file;
spl_autoload_register(function($class) {
$file = __DIR__.’/lib/Predis/’.$class.’.php’;
if (file_exists($file)) {
require $file;
return true;
}
});</span>

<span class="Apple-style-span">//配置连接的IP、端口、以及相应的数据库
$server = array(
‘host’     =&gt; ’127.0.0.1′,
‘port’     =&gt; 6379,
‘database’ =&gt; 15
);
$redis = new Client($server);</span>

<span class="Apple-style-span">//普通set/get操作
$redis-&gt;set(‘library’, ‘predis’);
$retval = $redis-&gt;get(‘library’);
echo $retval; //显示 ‘predis’</span>

<span class="Apple-style-span">//setex set一个存储时效
$redis-&gt;setex(‘str’, 10, ‘bar’); //表示存储有效期为10秒</span>

<span class="Apple-style-span">//setnx/msetnx相当于add操作,不会覆盖已有值
$redis-&gt;setnx(‘foo’,12); //true
$redis-&gt;setnx(‘foo’,34); //false</span>

<span class="Apple-style-span">//getset操作,set的变种,结果返回替换前的值
$redis-&gt;getset(‘foo’,56);//返回34</span>

<span class="Apple-style-span">// incrby/incr/decrby/decr 对值的递增和递减
$redis-&gt;incr(‘foo’); //foo为57
$redis-&gt;incrby(‘foo’,2); //foo为59</span>

<span class="Apple-style-span">//exists检测是否存在某值
$redis-&gt;exists(‘foo’);//true</span>

<span class="Apple-style-span">//del 删除
$redis-&gt;del(‘foo’);//true</span>

<span class="Apple-style-span">//type 类型检测,字符串返回string,列表返回 list,set表返回set/zset,hash表返回hash
$redis-&gt;type(‘foo’);//不存在,返回none
$redis-&gt;set(‘str’,'test’);
$redis-&gt;type(‘str’); //字符串，返回string</span>

<span class="Apple-style-span">//append 连接到已存在字符串
$redis-&gt;append(‘str’,'_123′); //返回累加后的字符串长度8,此进str为 ‘test_123′</span>

<span class="Apple-style-span">//setrange 部分替换操作
$redis-&gt;setrange(‘str’,0,’abc’); //返回3,参数2为0时等同于set操作
$redis-&gt;setrange(‘str’,2,’cd’);//返回4,表示从第2个字符后替换,这时’str’为’abcd’</span>

<span class="Apple-style-span">//substr 部分获取操作
$redis-&gt;substr(‘str’,0,2);//表示从第0个起，取到第2个字符，共3个，返回’abc’</span>

<span class="Apple-style-span">//strlen 获取字符串长度
$redis-&gt;strlen(‘str’); //返回4</span>

<span class="Apple-style-span">//setbit/getbit 位存储和获取
$redis-&gt;setbit(‘binary’,31,1);  //表示在第31位存入1,这边可能会有大小端问题?不过没关系,getbit 应该不会有问题
$redis-&gt;getbit(‘binary’,31);    //返回1</span>

<span class="Apple-style-span">//keys 模糊查找功能,支持*号以及?号(匹配一个字符)
$redis-&gt;set(‘foo1′,123);
$redis-&gt;set(‘foo2′,456);
$redis-&gt;keys(‘foo*’); //返回foo1和foo2的array
$redis-&gt;keys(‘f?o?’);  //同上</span>

<span class="Apple-style-span">//randomkey 随机返回一个key
$redis-&gt;randomkey(); //可能是返回 ‘foo1′或者是’foo2′及其它任何一存在redis的key</span>

<span class="Apple-style-span">//rename/renamenx 对key进行改名,所不同的是renamenx不允许改成已存在的key
$redis-&gt;rename(‘str’,'str2′); //把原先命名为’str’的key改成了’str2′</span>

<span class="Apple-style-span">//expire 设置key-value的时效性,ttl 获取剩余有效期,persist 重新设置为永久存储
$redis-&gt;expire(‘foo’, 1); //设置有效期为1秒
$redis-&gt;ttl(‘foo’); //返回有效期值1s
$redis-&gt;expire(‘foo’); //取消expire行为</span>

<span class="Apple-style-span">//dbsize 返回redis当前数据库的记录总数
$redis-&gt;dbsize();</span>

<span class="Apple-style-span">/*
队列操作
*/</span>

<span class="Apple-style-span">//rpush/rpushx 有序列表操作,从队列后插入元素
//lpush/lpushx 和rpush/rpushx的区别是插入到队列的头部,同上,’x'含义是只对已存在的key进行操作
$redis-&gt;rpush(‘fooList’, ‘bar1′); //返回一个列表的长度1
$redis-&gt;lpush(‘fooList’, ‘bar0′); //返回一个列表的长度2
$redis-&gt;rpushx(‘fooList’, ‘bar2′); //返回3,rpushx只对已存在的队列做添加,否则返回0
//llen返回当前列表长度
$redis-&gt;llen(‘fooList’);//3</span>

<span class="Apple-style-span">//lrange 返回队列中一个区间的元素
$redis-&gt;lrange(‘fooList’,0,1); //返回数组包含第0个至第1个共2个元素
$redis-&gt;lrange(‘fooList’,0,-1);//返回第0个至倒数第一个,相当于返回所有元素,注意redis中很多时候会用到负数,下同</span>

<span class="Apple-style-span">//lindex 返回指定顺序位置的list元素
$redis-&gt;lindex(‘fooList’,1); //返回’bar1′</span>

<span class="Apple-style-span">//lset 修改队列中指定位置的value
$redis-&gt;lset(‘fooList’,1,’123′);//修改位置1的元素,返回true</span>

<span class="Apple-style-span">//lrem 删除队列中左起指定数量的字符
$redis-&gt;lrem(‘fooList’,1,’_'); //删除队列中左起(右起使用-1)1个字符’_'(若有)</span>

<span class="Apple-style-span">//lpop/rpop 类似栈结构地弹出(并删除)最左或最右的一个元素
$redis-&gt;lpop(‘fooList’); //’bar0′
$redis-&gt;rpop(‘fooList’); //’bar2′</span>

<span class="Apple-style-span">//ltrim 队列修改，保留左边起若干元素，其余删除
$redis-&gt;ltrim(‘fooList’, 0,1); //保留左边起第0个至第1个元素</span>

<span class="Apple-style-span">//rpoplpush 从一个队列中pop出元素并push到另一个队列
$redis-&gt;rpush(‘list1′,’ab0′);
$redis-&gt;rpush(‘list1′,’ab1′);
$redis-&gt;rpush(‘list2′,’ab2′);
$redis-&gt;rpush(‘list2′,’ab3′);
$redis-&gt;rpoplpush(‘list1′,’list2′);//结果list1 =&gt;array(‘ab0′),list2 =&gt;array(‘ab1′,’ab2′,’ab3′)
$redis-&gt;rpoplpush(‘list2′,’list2′);//也适用于同一个队列,把最后一个元素移到头部list2 =&gt;array(‘ab3′,’ab1′,’ab2′)</span>

<span class="Apple-style-span">//linsert 在队列的中间指定元素前或后插入元素
$redis-&gt;linsert(‘list2′, ‘before’,'ab1′,’123′); //表示在元素’ab1′之前插入’123′
$redis-&gt;linsert(‘list2′, ‘after’,'ab1′,’456′);   //表示在元素’ab1′之后插入’456′</span>

<span class="Apple-style-span">//blpop/brpop 阻塞并等待一个列队不为空时，再pop出最左或最右的一个元素（这个功能在php以外可以说非常好用）
//brpoplpush 同样是阻塞并等待操作，结果同rpoplpush一样
$redis-&gt;blpop(‘list3′,10); //如果list3为空则一直等待,直到不为空时将第一元素弹出,10秒后超时</span>

<span class="Apple-style-span">/**
set表操作
*/</span>

<span class="Apple-style-span">//sadd 增加元素,返回true,重复返回false
$redis-&gt;sadd(‘set1′,’ab’);
$redis-&gt;sadd(‘set1′,’cd’);
$redis-&gt;sadd(‘set1′,’ef’);</span>

<span class="Apple-style-span">//srem 移除指定元素
$redis-&gt;srem(‘set1′,’cd’); //删除’cd’元素</span>

<span class="Apple-style-span">//spop 弹出首元素
$redis-&gt;spop(‘set1′);</span>

<span class="Apple-style-span">//smove 移动当前set表的指定元素到另一个set表
$redis-&gt;sadd(‘set2′,’123′);
$redis-&gt;smove(‘set1′,’set2′,’ab’);//移动’set1′中的’ab’到’set2′,返回true or false</span>

<span class="Apple-style-span">//scard 返回当前set表元素个数
$redis-&gt;scard(‘set2′);//2</span>

<span class="Apple-style-span">//sismember 判断元素是否属于当前表
$redis-&gt;sismember(‘set2′,’123′); //true or false</span>

<span class="Apple-style-span">//smembers 返回当前表的所有元素
$redis-&gt;smembers(‘set2′); //array(’123′,’ab’);</span>

<span class="Apple-style-span">//sinter/sunion/sdiff  返回两个表中元素的交集/并集/补集
$redis-&gt;sadd(‘set1′,’ab’);
$redis-&gt;sinter(‘set2′,’set1′); //返回array(‘ab’)</span>

<span class="Apple-style-span">//sinterstore/sunionstore/sdiffstore 将两个表交集/并集/补集元素copy到第三个表中
$redis-&gt;set(‘foo’,0);
$redis-&gt;sinterstore(‘foo’,'set1′); //这边等同于将’set1′的内容copy到’foo’中，并将’foo’转为set表
$redis-&gt;sinterstore(‘foo’,array(‘set1′,’set2′)); //将’set1′和’set2′中相同的元素copy到’foo’表中,覆盖’foo’原有内容</span>

<span class="Apple-style-span">//srandmember 返回表中一个随机元素
$redis-&gt;srandmember(‘set1′);</span>

<span class="Apple-style-span">/**
有序set表操作
*/</span>

<span class="Apple-style-span">//sadd 增加元素,并设置序号,返回true,重复返回false
$redis-&gt;zadd(‘zset1′,1,’ab’);
$redis-&gt;zadd(‘zset1′,2,’cd’);
$redis-&gt;zadd(‘zset1′,3,’ef’);</span>

<span class="Apple-style-span">//zincrby 对指定元素索引值的增减,改变元素排列次序
$redis-&gt;zincrby(‘zset1′,10,’ab’);//返回11</span>

<span class="Apple-style-span">//zrem 移除指定元素
$redis-&gt;zrem(‘zset1′,’ef’); //true or false</span>

<span class="Apple-style-span">//zrange 按位置次序返回表中指定区间的元素
$redis-&gt;zrange(‘zset1′,0,1); //返回位置0和1之间(两个)的元素
$redis-&gt;zrange(‘zset1′,0,-1);//返回位置0和倒数第一个元素之间的元素(相当于所有元素)</span>

<span class="Apple-style-span">//zrevrange 同上,返回表中指定区间的元素,按次序倒排
$redis-&gt;zrevrange(‘zset1′,0,-1); //元素顺序和zrange相反</span>

<span class="Apple-style-span">//zrangebyscore/zrevrangebyscore 按顺序/降序返回表中指定索引区间的元素
$redis-&gt;zadd(‘zset1′,3,’ef’);
$redis-&gt;zadd(‘zset1′,5,’gh’);
$redis-&gt;zrangebyscore(‘zset1′,2,9); //返回索引值2-9之间的元素 array(‘ef’,'gh’)
//参数形式
$redis-&gt;zrangebyscore(‘zset1′,2,9,’withscores’); //返回索引值2-9之间的元素并包含索引值 array(array(‘ef’,3),array(‘gh’,5))
$redis-&gt;zrangebyscore(‘zset1′,2,9,array(‘withscores’ =&gt;true,’limit’=&gt;array(1, 2))); //返回索引值2-9之间的元素,’withscores’ =&gt;true表示包含索引值; ‘limit’=&gt;array(1, 2),表示最多返回2条,结果为array(array(‘ef’,3),array(‘gh’,5))</span>

<span class="Apple-style-span">//zunionstore/zinterstore 将多个表的并集/交集存入另一个表中
$redis-&gt;zunionstore(‘zset3′,array(‘zset1′,’zset2′,’zset0′)); //将’zset1′,’zset2′,’zset0′的并集存入’zset3′
//其它参数
$redis-&gt;zunionstore(‘zset3′,array(‘zset1′,’zset2′),array(‘weights’ =&gt; array(5,0)));//weights参数表示权重，其中表示并集后值大于5的元素排在前，大于0的排在后
$redis-&gt;zunionstore(‘zset3′,array(‘zset1′,’zset2′),array(‘aggregate’ =&gt; ‘max’));//’aggregate’ =&gt; ‘max’或’min’表示并集后相同的元素是取大值或是取小值</span>

<span class="Apple-style-span">//zcount 统计一个索引区间的元素个数
$redis-&gt;zcount(‘zset1′,3,5);//2
$redis-&gt;zcount(‘zset1′,’(3′,5)); //’(3′表示索引值在3-5之间但不含3,同理也可以使用’(5′表示上限为5但不含5</span>

<span class="Apple-style-span">//zcard 统计元素个数
$redis-&gt;zcard(‘zset1′);//4</span>

<span class="Apple-style-span">//zscore 查询元素的索引
$redis-&gt;zscore(‘zset1′,’ef’);//3</span>

<span class="Apple-style-span">//zremrangebyscore 删除一个索引区间的元素
$redis-&gt;zremrangebyscore(‘zset1′,0,2); //删除索引在0-2之间的元素(‘ab’,'cd’),返回删除元素个数2</span>

<span class="Apple-style-span">//zrank/zrevrank 返回元素所在表顺序/降序的位置(不是索引)
$redis-&gt;zrank(‘zset1′,’ef’);//返回0,因为它是第一个元素;zrevrank则返回1(最后一个)</span>

<span class="Apple-style-span">//zremrangebyrank 删除表中指定位置区间的元素
$redis-&gt;zremrangebyrank(‘zset1′,0,10); //删除位置为0-10的元素,返回删除的元素个数2</span>

<span class="Apple-style-span">/**
hash表操作
*/</span>

<span class="Apple-style-span">//hset/hget 存取hash表的数据
$redis-&gt;hset(‘hash1′,’key1′,’v1′); //将key为’key1′ value为’v1′的元素存入hash1表
$redis-&gt;hset(‘hash1′,’key2′,’v2′);
$redis-&gt;hget(‘hash1′,’key1′);  //取出表’hash1′中的key ‘key1′的值,返回’v1′</span>

<span class="Apple-style-span">//hexists 返回hash表中的指定key是否存在
$redis-&gt;hexists (‘hash1′,’key1′); //true or false</span>

<span class="Apple-style-span">//hdel 删除hash表中指定key的元素
$redis-&gt;hdel(‘hash1′,’key2′); //true or false</span>

<span class="Apple-style-span">//hlen 返回hash表元素个数
$redis-&gt;hlen(‘hash1′); //1</span>

<span class="Apple-style-span">//hsetnx 增加一个元素,但不能重复
$redis-&gt;hsetnx(‘hash1′,’key1′,’v2′); //false
$redis-&gt;hsetnx(‘hash1′,’key2′,’v2′); //true</span>

<span class="Apple-style-span">//hmset/hmget 存取多个元素到hash表
$redis-&gt;hmset(‘hash1′,array(‘key3′=&gt;’v3′,’key4′=&gt;’v4′));
$redis-&gt;hmget(‘hash1′,array(‘key3′,’key4′)); //返回相应的值 array(‘v3′,’v4′)</span>

<span class="Apple-style-span">//hincrby 对指定key进行累加
$redis-&gt;hincrby(‘hash1′,’key5′,3); //返回3
$redis-&gt;hincrby(‘hash1′,’key5′,10); //返回13</span>

<span class="Apple-style-span">//hkeys 返回hash表中的所有key
$redis-&gt;hkeys(‘hash1′); //返回array(‘key1′,’key2′,’key3′,’key4′,’key5′)</span>

<span class="Apple-style-span">//hvals 返回hash表中的所有value
$redis-&gt;hvals(‘hash1′); //返回array(‘v1′,’v2′,’v3′,’v4′,13)</span>

<span class="Apple-style-span">//hgetall 返回整个hash表元素
$redis-&gt;hgetall(‘hash1′); //返回array(‘key1′=&gt;’v1′,’key2′=&gt;’v2′,’key3′=&gt;’v3′,’key4′=&gt;’v4′,’key5′=&gt;13)</span>

<span class="Apple-style-span">/**
排序操作
*/</span>

<span class="Apple-style-span">//sort 排序
$redis-&gt;rpush(‘tab’,3);
$redis-&gt;rpush(‘tab’,2);
$redis-&gt;rpush(‘tab’,17);
$redis-&gt;sort(‘tab’);  //返回array(2,3,17)
//使用参数,可组合使用 array(‘sort’ =&gt; ‘desc’,'limit’ =&gt; array(1, 2))
$redis-&gt;sort(‘tab’,array(‘sort’ =&gt; ‘desc’));  //降序排列,返回array(17,3,2)
$redis-&gt;sort(‘tab’,array(‘limit’ =&gt; array(1, 2)));  //返回顺序位置中1的元素2个(这里的2是指个数,而不是位置),返回array(3,17)
$redis-&gt;sort(‘tab’,array(‘limit’ =&gt; array(‘alpha’ =&gt; true))); //按首字符排序返回array(17,2,3),因为17的首字符是’1′所以排首位置
$redis-&gt;sort(‘tab’,array(‘limit’ =&gt; array(‘store’ =&gt; ‘ordered’))); //表示永久性排序,返回元素个数
$redis-&gt;sort(‘tab’,array(‘limit’ =&gt; array(‘get’ =&gt; ‘pre_*’))); //使用了通配符’*'过滤元素,表示只返回以’pre_’开头的元素</span>

<span class="Apple-style-span">/**
redis管理操作
*/</span>

<span class="Apple-style-span">//select 指定要操作的数据库
$redis-&gt;select(‘mydb’); //指定为mydb,不存在则创建</span>

<span class="Apple-style-span">//flushdb 清空当前库
$redis-&gt;flushdb();</span>

<span class="Apple-style-span">//move 移动当库的元素到其它库
$redis-&gt;set(‘foo’, ‘bar’);
$redis-&gt;move(‘foo’, ‘mydb2′); //若’mydb2′库存在</span>

<span class="Apple-style-span">//info 显示服务当状态信息
$redis-&gt;info();</span>

<span class="Apple-style-span">//slaveof 配置从服务器
$redis-&gt;slaveof(’127.0.0.1′,80); //配置127.0.0.1端口80的服务器为从服务器
$redis-&gt;slaveof(); //清除从服务器</span>

<span class="Apple-style-span">//同步保存服务器数据到磁盘
$redis-&gt;save();
//异步保存服务器数据到磁盘
$redis-&gt;bgsave();
//??
$redis-&gt;bgrewriteaof();
//返回最后更新磁盘的时间
$redis-&gt;lastsave();</span>

<span class="Apple-style-span">//set/get多个key-value
$mkv = array(
‘usr:0001′ =&gt; ‘First user’,
‘usr:0002′ =&gt; ‘Second user’,
‘usr:0003′ =&gt; ‘Third user’
);
$redis-&gt;mset($mkv); //存储多个key对应的value
$retval = $redis-&gt;mget(array_keys($mkv)); //获取多个key对应的value
print_r($retval);</span>

<span class="Apple-style-span">//批量操作
$replies = $redis-&gt;pipeline(function($pipe) {
$pipe-&gt;ping();
$pipe-&gt;flushdb();
$pipe-&gt;incrby(‘counter’, 10); //增量操作
$pipe-&gt;incrby(‘counter’, 30);
$pipe-&gt;exists(‘counter’);
$pipe-&gt;get(‘counter’);
$pipe-&gt;mget(‘does_not_exist’, ‘counter’);
});
print_r($replies);</span>

<span class="Apple-style-span">//CAS,事务性操作</span>

<span class="Apple-style-span">function zpop($client, $zsetKey) {
$element = null;
$options = array(
‘cas’   =&gt; true,     // Initialize with support for CAS operations
‘watch’ =&gt; $zsetKey, // Key that needs to be WATCHed to detect changes
‘retry’ =&gt; 3,        // Number of retries on aborted transactions, after
// which the client bails out with an exception.
);</span>

<span class="Apple-style-span">$txReply = $client-&gt;multiExec($options, function($tx)
use ($zsetKey, &amp;$element) {
@list($element) = $tx-&gt;zrange($zsetKey, 0, 0);
if (isset($element)) {
$tx-&gt;multi();     // With CAS, MULTI *must* be explicitly invoked.
$tx-&gt;zrem($zsetKey, $element);
}
});
return $element;
}
$zpopped = zpop($redis, ‘zset’);
echo isset($zpopped) ? “ZPOPed $zpopped” : “Nothing to ZPOP!”, “\n”;</span>

<span class="Apple-style-span">//对存取的key加前缀,如: ‘nrk:’
$redis-&gt;getProfile()-&gt;setPreprocessor(new KeyPrefixPreprocessor(‘nrk:’));</span>

<span class="Apple-style-span">//分布式存储的一些方法
$multiple_servers = array(
array(
‘host’     =&gt; ’127.0.0.1′,
‘port’     =&gt; 6379,
‘database’ =&gt; 15,
‘alias’    =&gt; ‘first’,
),
array(
‘host’     =&gt; ’127.0.0.1′,
‘port’     =&gt; 6380,
‘database’ =&gt; 15,
‘alias’    =&gt; ‘second’,
),
);</span>

<span class="Apple-style-span">use Predis\Distribution\IDistributionStrategy;</span>

<span class="Apple-style-span">class NaiveDistributionStrategy implements IDistributionStrategy {
private $_nodes, $_nodesCount;</span>

<span class="Apple-style-span">public function __constructor() {
$this-&gt;_nodes = array();
$this-&gt;_nodesCount = 0;
}</span>

<span class="Apple-style-span">public function add($node, $weight = null) {
$this-&gt;_nodes[] = $node;
$this-&gt;_nodesCount++;
}</span>

<span class="Apple-style-span">public function remove($node) {
$this-&gt;_nodes = array_filter($this-&gt;_nodes, function($n) use($node) {
return $n !== $node;
});
$this-&gt;_nodesCount = count($this-&gt;_nodes);
}</span>

<span class="Apple-style-span">public function get($key) {
$count = $this-&gt;_nodesCount;
if ($count === 0) {
throw new RuntimeException(‘No connections’);
}
return $this-&gt;_nodes[$count &gt; 1 ? abs(crc32($key) % $count) : 0];
}</span>

<span class="Apple-style-span">public function generateKey($value) {
return crc32($value);
}
}</span>

<span class="Apple-style-span">//配置键分布策略
$options = array(
‘key_distribution’ =&gt; new NaiveDistributionStrategy(),
);</span>

<span class="Apple-style-span">$redis = new Predis\Client($multiple_servers, $options);</span>

<span class="Apple-style-span">for ($i = 0; $i set(“key:$i”, str_pad($i, 4, ’0′, 0));
$redis-&gt;get(“key:$i”);
}</span>

<span class="Apple-style-span">$server1 = $redis-&gt;getClientFor(‘first’)-&gt;info();
$server2 = $redis-&gt;getClientFor(‘second’)-&gt;info();</span>

<span class="Apple-style-span">printf(“Server ‘%s’ has %d keys while server ‘%s’ has %d keys.\n”,
‘first’, $server1['db15']['keys'], ‘second’, $server2['db15']['keys']</span>
<div id="cnblogs_post_body">
<div><span class="Apple-style-span">参考文献：</span></div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="blog_post_info"></div>
</div>
http://www.cnblogs.com/stephen-liu74/archive/2012/02/18/2357783.html

</div>
<div><span class="Apple-style-span">http://slj.me/2011/04/redis-cli-commands/</span></div>
<div><span class="Apple-style-span">http://baike.baidu.com/link?url=lGUP7ZKfRvkSEVr6tDZNqhYT5YOpQkHBJ01My-RtE2xjjjvO-Ez1g0gDyUyMCofQcQWZzuA4qnZK2CyVYCZqTK#1  </span></div>
