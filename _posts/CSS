<div>
<h2>CSS 语法</h2>
CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。
<pre>selector {declaration1; declaration2; ... declarationN }
</pre>
选择器通常是您需要<span class="Apple-style-span">改变样式的 HTML 元素</span>。

每条声明由一个属性和一个值组成。
<pre>selector {property: value}
</pre>
在这个例子中，h1 是选择器，color 和 font-size 是属性，red 和 14px 是值。
<pre>h1 {color:red; font-size:14px;}
</pre>
下面的示意图为您展示了上面这段代码的结构：

<img src="file:///C:/Users/YUANWA~1/AppData/Local/Temp/enhtmlclip/Image(2).gif" alt="CSS 语法" /><span class="Apple-style-span">提示：</span>请使用花括号来包围声明。

</div>
<!--more-->
<div>
<h2>记得写引号</h2>
<span class="Apple-style-span">提示：</span>如果值为若干单词，则要给值加引号：
<pre>p {font-family: <code>"sans serif"</code>;}</pre>
</div>
<div>
<h2>多重声明：</h2>
<span class="Apple-style-span">提示：</span>如果要定义不止一个声明，则需要用分号将每个声明分开。下面的例子展示出如何定义一个红色文字的居中段落。最后一条规则是不需要加分号的，因为分号在英语中是一个分隔符号，不是结束符号。然而，大多数有经验的设计师会在每条声明的末尾都加上分号，这么做的好处是，当你从现有的规则中增减声明时，会尽可能地减少出错的可能性。就像这样：
<pre>p {text-align:center<code>;</code> color:red<code>;</code>}</pre>
你应该在每行只描述一个属性，这样可以增强样式定义的可读性，就像这样：
<pre>p {
  text-align: center;
  color: black;
  font-family: arial;
}
</pre>
</div>
<div></div>
<div>
<h2>选择器的分组</h2>
</div>
<div><span class="Apple-style-span">被分组的选择器就可以分享相同的声明。用逗号将需要分组的选择器分开。所有的标题元素都是绿色的。</span></div>
<div>
<pre><code>h1,h2,h3,h4,h5,h6</code> { color: green; }</pre>
</div>
<div>
<h2>继承及其问题</h2>
</div>
<div><span class="Apple-style-span">根据 CSS，子元素从父元素继承属性。但是它并不总是按此方式工作,根据不同浏览器，其规则不同</span></div>
<div>
<h2>继承是一个诅咒吗？</h2>
如果你不希望 "Verdana, sans-serif" 字体被所有的子元素继承，又该怎么做呢？比方说，你希望段落的字体是 Times。没问题。创建一个针对 p 的特殊规则，这样它就会摆脱父元素的规则：
<pre>body  {
     font-family: Verdana, sans-serif;
     }

td, ul, ol, ul, li, dl, dt, dd  {
     font-family: Verdana, sans-serif;
     }

<code>p</code> { font-family: Times, "Times New Roman", serif; }</pre>
</div>
<div></div>
<div>
<h2>id 选择器</h2>
<span class="Apple-style-span">id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</span>

<span class="Apple-style-span">id 选择器以 "#" 来定义。</span>

</div>
<div></div>
<div></div>
<div>

下面的两个 id 选择器，第一个可以定义元素的颜色为红色，第二个定义元素的颜色为绿色：
<pre><code>#red</code> {color:red;} <code>#green</code> {color:green;}</pre>
下面的 HTML 代码中，id 属性为 red 的 p 元素显示为红色，而 id 属性为 green 的 p 元素显示为绿色。
<pre>&lt;p <code>id="red"</code>&gt;这个段落是红色。&lt;/p&gt; &lt;p <code>id="green"</code>&gt;这个段落是绿色。&lt;/p&gt;</pre>
<span class="Apple-style-span">注意：</span>id 属性只能在每个 HTML 文档中出现一次

</div>
<div>
<h2>id 选择器和派生选择器</h2>
<span class="Apple-style-span">d 选择器常常用于建立派生选择器</span>

</div>
<div>
<pre><code>#sidebar p</code> { font-style: italic; text-align: right; margin-top: 0.5em; } <code>#sidebar h2</code> { font-size: 1em; font-weight: normal; font-style: italic; margin: 0; line-height: 1.5; text-align: right; }</pre>
页面中sidebar 内的 p 元素,h2 元素得到了特殊的处理

</div>
<div>
<h2>单独的选择器</h2>
<pre><code>#sidebar</code> { border: 1px dotted #000; padding: 10px; }</pre>
</div>
<div><span class="Apple-style-span">类选择器</span></div>
<div>

<span class="Apple-style-span">在 CSS 中，类选择器以一个点号显示：</span>
<pre><code>.center</code> {text-align: center}</pre>
</div>
<div><span class="Apple-style-span">在上面的例子中，所有拥有 center 类的 HTML 元素均为居中</span></div>
<div>

h1 和 p 元素都有 center 类。这意味着两者都将遵守 ".center" 选择器中的规则。
<pre>&lt;h1 <code>class="center"</code>&gt; This heading will be center-aligned &lt;/h1&gt; &lt;p <code>class="center"</code>&gt; This paragraph will also be center-aligned. &lt;/p&gt;</pre>
</div>
<div></div>
<div>

<span class="Apple-style-span">class 也可被用作派生选择器：</span>
<pre><code>.fancy td</code> { color: #f60; background: #666; }</pre>
在上面这个例子中，类名为 fancy 的更大的元素内部的表格单元都会以灰色背景显示橙色文字。（名为 fancy 的更大的元素可能是一个表格或者一个 div）

</div>
<div></div>
<div>
<h2>派生选择器</h2>
</div>
<div><span class="Apple-style-span">通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁</span></div>
<div>

再看看下面的 CSS 规则：
<pre>strong {
     color: red;
     }

h2 {
     color: red;
     }

<code>h2 strong</code> { /*将h2的strong的颜色 改为blue*/ color: blue; }</pre>
下面是它施加影响的 HTML：
<pre>&lt;p&gt;The strongly emphasized word in this paragraph is&lt;strong&gt;red&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;This subhead is also red.&lt;/h2&gt;
<code>&lt;h2&gt;</code>The strongly emphasized word in this subhead is<code>&lt;strong&gt;</code>blue<code>&lt;/strong&gt;</code>.<code>&lt;/h2&gt;</code></pre>
</div>
<div></div>
<div>
<h2>属性和值选择器</h2>
例子为 title="W3School" 的所有元素设置样式：
<pre><code>[title=W3School]</code> { border:5px solid blue; }</pre>
</div>
<div></div>
<div>
<h2>样式表</h2>
</div>
<div>
<h3>外部样式表</h3>
当样式需要应用于很多页面时。每个页面使用 &lt;link&gt; 标签链接到样式表。&lt;link&gt; 标签在（文档的）头部：
<pre>&lt;head&gt;
&lt;<code>link</code> rel="stylesheet" type="text/css" href="<code>mystyle.css</code>" /&gt; &lt;/head&gt;</pre>
</div>
<div>
<h3>内部样式表</h3>
</div>
<div>

当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 &lt;style&gt; 标签在文档<span class="Apple-style-span">头部定义内部样式表</span>:
<pre>&lt;head&gt;
<code>&lt;style type="text/css"&gt;</code> hr {color: sienna;} p {margin-left: 20px;} body {background-image: url("images/back40.gif");} <code>&lt;/style&gt;</code> &lt;/head&gt;</pre>
</div>
<div>
<h3>内联样式</h3>
</div>
<div>

使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距：
<pre>&lt;p <code>style</code>="color: sienna; margin-left: 20px"&gt; This is a paragraph &lt;/p&gt;</pre>
</div>
<div>
<h2>多重样式</h2>
</div>
<div>

如果某些属性在<span class="Apple-style-span">不同的样式表</span>中<span class="Apple-style-span">被同样的选择器定义</span>，那么属性值将从更具体的样式表中被继承过来(由最具体的css+其没有的css属性 =最终css)。

例如，外部样式表拥有针对 h3 选择器的三个属性：
<pre>h3 {
  color: red;
  text-align: <code>left</code>; font-size: <code>8pt</code>; }</pre>
而内部样式表拥有针对 h3 选择器的两个属性：
<pre>h3 {
  text-align: <code>right</code>; font-size: <code>20pt</code>; }</pre>
假如拥有内部样式表的这个页面同时与外部样式表链接，那么 h3 得到的样式是：
<pre>color: <code>red</code>; text-align: <code>right</code>; font-size: <code>20pt</code>;</pre>
<div></div>
<div></div>
</div>
<div>常用属性：</div>
<div>

CSS布局：

display：
每个元素都有一个默认的 display 值，这与元素的类型有关。对于大多数元素它们的默认值通常是 block 或 inline 。一个 block 元素通常被叫做块级元素。一个 inline 元素通常被叫做行内元素。

block
div 是一个标准的块级元素。一个块级元素会新开始一行并且尽可能撑满容器。其他常用的块级元素包括 p 、 form 和HTML5中的新元素： header 、 footer 、 section 等等。

inline
span 是一个标准的行内元素。一个行内元素可以在段落中 &lt;span&gt; 像这样 &lt;/span&gt; 包裹一些文字而不会打乱段落的布局。 a 元素是最常用的行内元素，它可以被用作链接

none
一些特殊元素的默认 display 值是它，例如 script 。 display:none 通常被 JavaScript 用来在不删除元素的情况下隐藏或显示元素。
它和 visibility 属性不一样。把 display 设置成 none 不会保留元素本该显示的空间，但是 visibility: hidden; 还会保留
#main {
max-width: 600px;
margin: 0 auto;
}

position
static  任意 position: static; 的元素不会被特殊的定位
relative  在一个相对定位（position属性的值为relative）的元素上设置 top 、 right 、 bottom 和 left 属性会使其偏离其正常位置
fixed
一个固定定位（position属性的值为fixed）元素会相对于视窗来定位，这意味着即便页面滚动，它还是会停留在相同的位置

absolute
它相对于它的父元素定位。
如果父元素是 position: static; ，那么它直接相对于body元素定位。
float  Float 可用于实现文字环绕图片

clear 属性被用于控制浮动

overflow: auto;
margin-left: 200px;
min-width 和 max-width 来限制最大或最小宽度

display: inline-block;
vertical-align: top;

z-index: 999;
text-indent:50px;

</div>
<div></div>
<div></div>
<div></div>
<div></div>
