前面有1000个妞等着你来泡，这1000个妞等久了有可能不耐烦，就会走了不让你泡了。你要想同时泡1000个妞，那你就得有分身的能力才行。

只要有了分身的能力，你就再也不用担心妞泡不过来了。

&nbsp;

结论得出：负载均衡 == <span class="Apple-style-span">分身</span>的能力

&nbsp;

你的分身把这个妞泡准了，你这个分身就要跟她一直谈下去，其他的妞过来了你肯定要拒绝丫。

你没泡成功，当然是去寻找下一个目标。

&nbsp;

结论得出：负载均衡还得<span class="Apple-style-span">保持通话</span>

&nbsp;

你的分身也偶尔发发小脾气，没激情来泡妞的时候，你就要去修理他，去找他聊聊心。

&nbsp;

结论得出：负载均衡还要懂得<span class="Apple-style-span">修理</span>他（T出泡妞队营）

&nbsp;

尼玛负载均衡就为了泡妞，我们果断一起踩扁它。

&nbsp;

负载均衡现在市场上面已经有很多成熟的硬件设备，可以掏点钱就可以买了。当然这费用嘛......

如果你闲费用贵，自己瞎折腾也好，来体现你的技术是多么牛xx， 你就用一台服务器，服务器里面装个nginx就可以解决了。

&nbsp;

尼玛负载均衡就这么简单，我们继续一起踩扁它。

&nbsp;

要说道每个分身的能力如何复制过去，就如每一台电脑要泡妞怎么办，是不是要具有相同的代码。怎么办？

1. 共享主人的经验

2. 把主人的经验复制过来

3. 边复制边共享

转成计算机就是说：

1. 文件共享

2. 文件同步

3. 分布式文件系统

&nbsp;

当然这些都有实际成熟的工具：

1. 文件共享（大家都清楚）

2. 文件同步 （rsync）

3.  分布式文件系统 （moosefs）

&nbsp;

他们都有各自的优缺点，选择适合自己的就行。

&nbsp;

尼玛负载均衡都有工具，真的是很简单，来一起踩扁它吧。

http://www.cnblogs.com/oshine/p/3941092.html
