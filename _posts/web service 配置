## Nginx 

```
优点是稳定性和低系统资源消耗，高并发连接处理能力(单台物理服务器可支持30000～50000个并发连接)
HTTP 和反向代理服务器
IMAP/POP3/SMTP 代理服
nginx -t 对配置文件进行检查
Nginx服务器的主配置文件nginx.conf中，包括全局配置、I/O事件配置、HTTP配置这三大块内容，配置语句的格式为”关键字值；”(末尾以分号表示结束)，以”#”开始的部分表示注释。
1、全局配置：由各种配置语句组成，不使用特定的界定标记。全局配置部分包括运行用户、工作进程数、错误日志、PID存放位置等基本设置。
2、I/O事件配置：使用”events {}”界定标记，用来指定Nginx进程的I/O响应模型，每个进程的连接数等设置
3、HTTP配置：使用”http{}”界定标记，包括访问日志、HTTP端口、网页目录、默认字符集、连接保持、以及虚拟主机、PHP解析等一系列设置。其中大部分配置语句包含在子界定记”servier {}”内
```

<!--more-->

## nginx.conf

```
#user  nobody;
worker_processes  8; #开启8个进程
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000; #开启8个CPU内核，01对应第一个cpu内核，10对应第二个，类推
worker_rlimit_nofile 204800;  #worker进程的最大打开文件数限制，文件不够时，nginx报错：“too many open files”

#error_log  logs/error_log  debug;
error_log  ../log/error_log  notice;
pid        ../var/nginx.pid;

events {
    use epoll;
    worker_connections  204800;
}


http {
    include       mime.types;
    include       upstream.conf;
    include ../../bin/monitor/rt_base_monitor/nginx_rt_mon.conf;
    default_type  application/octet-stream;

    ignore_invalid_headers  off;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 4k;
    large_client_header_buffers 4 32k;
    client_max_body_size 8m;

    client_body_buffer_size 8k;
    client_body_timeout 15;
    client_header_timeout 10;
    send_timeout 240;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;	

    fastcgi_connect_timeout 600;
    fastcgi_send_timeout 600;
    fastcgi_read_timeout 600;
    fastcgi_buffer_size 512k;
    fastcgi_buffers 16 512k;
    fastcgi_busy_buffers_size 512k;
    fastcgi_temp_file_write_size 512k;
    fastcgi_intercept_errors on;
    
    keepalive_timeout  0;
    #keepalive_timeout  65;
	set_real_ip_from 10.0.0.0/8;
	real_ip_header X-Real-IP;
  
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml;
    gzip_vary on;

    #problem_tracing off;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" "$http_cookie" "$http_user_agent" '
            '$request_time $http_x_bd_logid $http_x_bd_routerip $server_addr $upstream_addr $host '
            '"$http_x_forwarded_for" $product $subsys $tracecode';
    access_log  ../log/access_log  main;

    server {
        listen      {{PORT_0_0}}  default backlog=1024;
        server_name  orp.test.com
        more_set_headers 'Server: Apache';
        error_page 400 403 404 500 501 502 503 504 505 http://www.test.com/search/error.html?tc=$tracecode; 
    
    	set $product orp;
        set $subsys orp;
    	if ($http_x_bd_product) {
    		set $product $http_x_bd_product;
    	}
    	if ($http_x_bd_subsys) {
    		set $subsys $http_x_bd_subsys;
    	}

        access_log  ../log/access_log  main;

        location / {
            root           {{ORP_PATH}}/webroot/;
            fastcgi_pass   unix:{{ORP_PATH}}/php/var/php-cgi.sock;
            fastcgi_index  index.php;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    include vhost/test.conf;
}

```

### vhost/test.conf
```
server {
    listen {{PORT_0_0}};
    server_name ~^test\.wiseops\.\w+-orp\.int\.com
                test.com;
    port_in_redirect  off;
    
    location ~* \.(jpg|gif|png|js|css|jpeg|swf)$ {
    
    }
    location / {
        rewrite ^/(.*)$ /index.php last;
    }
    location ~ \.php$ {
        root  {{ORP_PATH}}/webroot/test;
        set $phpvm zend;
        fastcgi_index  index.php;
        include  fastcgi_params;
        fastcgi_pass  unix:{{ORP_PATH}}/php/var/php-cgi.sock;
    }
}
```



## Apache服务器

```
pache对客户端的响应是支持并发的，运行httpd这个daemon进程之后，它会同时产生多个子进程/线程，每个子进程/线程分别对客户端的请求进行响应；
 
Apache两种工作模式:是prefork模式与worker模式
prefork每个子进程只有一个线程，效率高但消耗内存大，是lunix下默认的模式；worker模式每个子进程有多个线程，内存消耗低，但一个线程崩溃会牵连其它同子进程的线程
 
缺点:
需要对每个用户请求创建一个子进程/线程进行响应；
如果并发的请求非常多(这在大型门户网站是很常见的)就会需要非常多的线程，从而占用极多的系统资源CPU和内存
 
解决方案：
异步服务器是事件驱动程序模式的event-driven，除了用户的并发请求通常只需要一个单一的或者几个线程。因此占用系统资源就非常少。这几种又被称为lightweight web server。举例，对于10,000的并发连接请求，nginx可能仅仅使用几M的内存；而Apache可能需要使用几百M的内存资源。
```

 

## nginx.conf实例：
 

```
#定义Nginx运行的用户和用户组
user www www;
 
#nginx进程数，建议设置为等于CPU总核心数。
worker_processes 8;
 
#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
error_log /var/log/nginx/error.log info;
 
#进程文件
pid /var/run/nginx.pid;
 
#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。
worker_rlimit_nofile 65535;
 
#工作模式与连接数上限
events
{
    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];
    #epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。
    use epoll;
    #单个进程最大连接数（最大连接数=连接数*进程数）
    worker_connections 65535;
}
 
#设定http服务器
http
{
    include mime.types; #文件扩展名与文件类型映射表
    default_type application/octet-stream; #默认文件类型
    #charset utf-8; #默认编码
    server_names_hash_bucket_size 128; #服务器名字的hash表大小
    client_header_buffer_size 32k; #上传文件大小限制
    large_client_header_buffers 4 64k; #设定请求缓
    client_max_body_size 8m; #设定请求缓
    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。
    tcp_nopush on; #防止网络阻塞
    tcp_nodelay on; #防止网络阻塞
    keepalive_timeout 120; #长连接超时时间，单位是秒
     
    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
     
    #gzip模块设置
    gzip on; #开启gzip压缩输出
    gzip_min_length 1k; #最小压缩文件大小
    gzip_buffers 4 16k; #压缩缓冲区
    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_comp_level 2; #压缩等级
    gzip_types text/plain application/x-javascript text/css application/xml;
    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_vary on;
    #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用
     
    upstream blog.ha97.com {
    #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。
    server 192.168.80.121:80 weight=3;
    server 192.168.80.122:80 weight=2;
    server 192.168.80.123:80 weight=3;
}
 
#虚拟主机的配置
server
{
    #监听端口
    listen 80;
    #域名可以有多个，用空格隔开
    server_name www.ha97.com ha97.com;
    index index.html index.htm index.php;
    root /data/www/ha97;
    location ~ .*.(php|php5)?$
    {
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        include fastcgi.conf;
    }
    #图片缓存时间设置
    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$
    {
        expires 10d;
    }
    #JS和CSS缓存时间设置
    location ~ .*.(js|css)?$
    {
        expires 1h;
    }
    #日志格式设定
    log_format access '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" $http_x_forwarded_for';
    #定义本虚拟主机的访问日志
    access_log /var/log/nginx/ha97access.log access;
     
    #对 "/" 启用反向代理
    location / {
        proxy_pass http://127.0.0.1:88;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #以下是一些反向代理的配置，可选。
        proxy_set_header Host $host;
        client_max_body_size 10m; #允许客户端请求的最大单文件字节数
        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，
        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)
        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)
        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)
        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置
        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）
        proxy_temp_file_write_size 64k;
        #设定缓存文件夹大小，大于这个值，将从upstream服务器传
    }
     
    #设定查看Nginx状态的地址
    location /NginxStatus {
        stub_status on;
        access_log on;
        auth_basic "NginxStatus";
        auth_basic_user_file conf/htpasswd;
        #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。
    }
     
    #本地动静分离反向代理配置
    #所有jsp的页面均交由tomcat或resin处理
        location ~ .(jsp|jspx|do)?$ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://127.0.0.1:8080;
    }
    #所有静态文件由nginx直接读取不经过tomcat或resin
    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$
    { expires 15d; }
    location ~ .*.(js|css)?$
    { expires 1h; }
}
}
```
