<span class="Apple-style-span">1.工厂模式:</span>
接口：表示共性的特征时用接口，一般在不知道是否用抽象类或接口时用接口，因为接口可以继承抽象类这样更灵活

抽象类：一般表示某种确实存在的东西时用抽象类

<img src="http://img.blog.csdn.net/20130609165859296" alt="" />

<span class="Apple-style-span">抽象工厂模式（AbstractFactory）：提供一个创建一系列或相关依赖类的接口，而无需指定它们的具体类。</span>

<img src="http://img.blog.csdn.net/20130609164529281" alt="" />

<span class="Apple-style-span">单例模式（Singleton）：保证一个类仅有一个实例，并且提供一个访问它的全局访问点。</span>

<img src="http://img.blog.csdn.net/20130609164613078" alt="" />

<span class="Apple-style-span">2.代理模式：</span>

<img src="http://img.blog.csdn.net/20130609165037750" alt="" />

<span class="Apple-style-span">3.责任链模式：</span>

<img src="http://img.blog.csdn.net/20130604105608203" alt="" />

<span class="Apple-style-span"> Handler：定义请求处理的接口，并定义指向下一个请求处理对象的引用。</span>

<span class="Apple-style-span"> ConcreteHandler：从抽象请求处理者派生，并实现具体的请求处理方法。</span>

<span class="Apple-style-span">&lt;2&gt;树形责任链图</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130604114342703" alt="" />  </span>

<span class="Apple-style-span">&lt;3&gt;复杂请求责任链</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130604114346625" alt="" />
</span>

<span class="Apple-style-span">小结：</span>

责任链模式在请求 - 处理程序中，<span class="Apple-style-span">弱化了二者之间的关联</span>，降低了请求发生者和请求处理者之间的耦合程度，<span class="Apple-style-span">请求发生者无需知道一个请求具体由哪个对象进行处理，只是把请求交给责任链</span>。同时这也使得程序中责任划分更加的细化，每个请求处理者对象只有一种职责，只能处理对应类型的请求，这符合面向对象的设计原则，不同的请求处理对象之间只是通过一个引用进行关联。

同时责任链模式也会带来一些缺点，首先，<span class="Apple-style-span">请求不能保证都能被处理</span>，如果在责任链中找不到一个合适的请求处理对象，则请求不能被处理。其次，<span class="Apple-style-span">请求处理的速度可能相对较慢</span>，由于请求发生者并不知道请求具体应该交给哪个请求处理对象处理，请求需要在责任链中遍历，直到找到一个合适的请求处理对象。

<span class="Apple-style-span">4.策略模式：</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130609165143437" alt="" />
</span>

<span class="Apple-style-span">5原型模式（Prototype）：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130609165230406" alt="" />
</span>

<span class="Apple-style-span">6.</span><span class="Apple-style-span">创建者模式（Builder）：将一个复杂对象的构建和表示分离，使得同样的构建过程可以构建不同的表示</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130609165336390" alt="" />
</span>

<span class="Apple-style-span">参考：<a href="http://www.ibm.com/developerworks/cn/websphere/book_wps_pattern/7/">http://www.ibm.com/developerworks/cn/websphere/book_wps_pattern/7/</a></span>

<span class="Apple-style-span">      <a href="http://www.cnblogs.com/doit8791/archive/2012/05/09/2493389.html">http://www.cnblogs.com/doit8791/archive/2012/05/09/2493389.html</a>
</span>
