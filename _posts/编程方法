<span class="Apple-style-span">1.卓越的编程方法和编程习惯，编程不再痛苦
2.学会调试程序也要学会调试自己
3.不断学习优秀的方法和风格，积累经验，才能痛苦少一点，快乐多一点
</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130714132305750" alt="" /></span>
<div>

<span class="Apple-style-span">应用程序开发技巧：</span>

<span class="Apple-style-span">1.不要试图一下子搞懂整个项目,对于自己负责的部分非常了解，并且能够交付价值给小组。 </span>

<span class="Apple-style-span">2.关注于尽快交付价值 ,经理能够通过你的交付对你更加信任。这样能够向上级领导证明你的贡献以及员工价值。 你如果能够很好的理解一些内容，那么就写些笔记，或者画些类图、时序图、数据模型图等，以便你或日后其他的开发者可以进行维护。 </span>

<span class="Apple-style-span">3.维护大型项目所必须的技能 </span>

<span class="Apple-style-span"> (1)能够迅速发现需要的类 当你定位到需要修复或增强的类/方法，就已经完工了一半。 </span>

<span class="Apple-style-span"> (2) 能够分析变更的影响 ,就是要确认你的修改没有破坏代码的其他部分。 </span>

<span class="Apple-style-span">对项目进行必要了解，然后进行快速交付。你可以在不降低代码质量的前提下做到这一点。 </span>

<span class="Apple-style-span">Java新加入了一些特性，如回调机制(callback patterns) </span>

<span class="Apple-style-span">提高编程效率的技巧：</span>

<span class="Apple-style-span">1. 编写单元测试，提高效率
2. 训练你的编程能力
需要不断练习。
阅读一些诸如《Effective Java》和《Design Patterns》等类型的书，并每天做些基础训练。
从欧拉项目中找出些问题，然后 用你最喜欢的计算机语言解决它。和你做的普通项目不同，这些练习没有时间限制。因此，好好安排利用你的时间正确地做事。通过这样的练习，你的工作效率将有很大提高。这是显而易见的，不是吗？
3. 使用并改进开发库
4. 阅读代码和技术资料
阅读代码和修改/编写代码一样困难。在当今开源世界的情况下，可以参阅大量优质代码。
选择一个你最喜欢的开发库，然后仔细阅读以充分利用里面的资源。
或许你不能很快便理解所有的内容，但是通过不断的训练，你将能够区分其中使用的不同模式，同时把这些模式用到你的代码中。


</span>

</div>
&nbsp;
