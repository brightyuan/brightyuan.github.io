<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.9.5" created="2018-04-15 15:36" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>专注于技术</title>
	<link>https://www.idatavisual.com</link>
	<description>享受如诗般的编程艺术</description>
	<pubDate>Sun, 15 Apr 2018 15:36:55 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://www.idatavisual.com</wp:base_site_url>
	<wp:base_blog_url>https://www.idatavisual.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[ken]]></wp:author_login><wp:author_email><![CDATA[2365086982@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[ken]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>https://wordpress.org/?v=4.9.5</generator>

<image>
	<url>https://www.idatavisual.com/wp-content/uploads/2018/01/cropped-i3-32x32.jpg</url>
	<title>专注于技术</title>
	<link>https://www.idatavisual.com</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">141002024</site>
	<item>
		<title>算法第一篇之概念</title>
		<link>https://www.idatavisual.com/?p=13</link>
		<pubDate>Wed, 03 Jan 2018 06:16:47 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>1.  算法是什么</h1>
<h1><span class="Apple-style-span">算法：一种计算的方法，在程序设计上，表现为一组指令序列。</span></h1>
<div>输入-&gt;算法-&gt;输出</div>
<div><img src="file:///C:/Users/YUANWA~1/AppData/Local/Temp/enhtmlclip/Image.jpg" alt="" /></div>
<h1>2.  如何评价算法</h1>
<div></div>
<div>对于程序设计而言，无非就是两个方面：算法有多快？（时间效率）；内存耗得多不多？（空间效率）</div>
<div><span class="Apple-style-span">算法的复杂度分析，包括上述两个方面，各自称为时间复杂度分析和空间复杂度分析。通常我们更关注的是算法的时间复杂度。</span></div>
<div></div>
<div>设问题规模为n，即输入数据的大小，时间复杂度记为T(n)</div>
<div><span class="Apple-style-span">比如n个输入数据，需要做2*n个基本运算，那么T(n) = 2*n</span></div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span">渐进时间复杂度</span><span class="Apple-style-span">
</span></div>
比如：     T(n) = 2*n        则O(n)=n，     实际中就称算法时间复杂度为n

T(n)= 3*n<sup>2           </sup>则O(n)=n<sup>2</sup>，  实际中就称算法时间复杂度为n<sup>2</sup>
<div><span class="Apple-style-span">T(n) =3* log(n)则O(n)=log(n)，    实际中就称算法时间复杂度为log(n)</span></div>
<h2>空间复杂度分析</h2>
分析算法运行过程中所占用存储空间大小，其分析和时间复杂度类似。

如果使用1个基本空间单位，则空间复杂度为O(1)

如果使用n个基本空间单位，则空间复杂度为O(n)

这里说的空间复杂度实际中也是渐进空间复杂度。
<div></div>
<div></div>
<div></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:16:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:16:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ae%97%e6%b3%95%e7%ac%ac%e4%b8%80%e7%af%87%e4%b9%8b%e6%a6%82%e5%bf%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%b8%8e%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1518329948;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:25;}i:1;a:1:{s:2:"id";i:15;}i:2;a:1:{s:2:"id";i:198;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>算法第二篇之分治</title>
		<link>https://www.idatavisual.com/?p=15</link>
		<pubDate>Wed, 03 Jan 2018 06:19:36 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">算法基本思想：大致可分为如下几类：分治算法、贪心算法、动态规划、回溯法、分支限界、概率算法和随机算法等等</span>
<h1>分治算法</h1>
<h1> <span class="Apple-style-span">分治即分而治之。一个问题规模过大不容易直接解决，就可以划分成许多小问题，如果小问题不容易求解，那么可以再划分成规模更小的问题，直到规模小到很容易解决为止，解决这些小问题，再将小问题的解合并成大问题的解。</span></h1>
<div><span class="Apple-style-span">分治算法常用的实现方法是递归</span><span class="Apple-style-span">
</span></div>
<h2>递归</h2>
递归，就是在函数内部调用本函数自身。形式如下
<p align="left"><span class="Apple-style-span">void</span> <span class="Apple-style-span">foo</span>()</p>

<div>{<span class="Apple-style-span">         </span><span class="Apple-style-span">//</span><span class="Apple-style-span">…</span></div>
<div><span class="Apple-style-span">        </span><span class="Apple-style-span">foo</span><span class="Apple-style-span">();   </span><span class="Apple-style-span">//</span><span class="Apple-style-span">递归</span></div>
<div><span class="Apple-style-span">         </span><span class="Apple-style-span">//</span><span class="Apple-style-span">…</span></div>
<div><span class="Apple-style-span">}</span></div>
<div><span class="Apple-style-span">例子：</span></div>
<div><span class="Apple-style-span">阶乘</span><span class="Apple-style-span">
</span></div>
<div><span class="Apple-style-span">Fibonacci数列
</span></div>
<div><span class="Apple-style-span">汉诺塔问题
</span></div>
<div><span class="Apple-style-span">全排列问题
</span></div>
<h2>经典问题</h2>
（1）二分搜索

（2）大整数乘法

（3）Strassen矩阵乘法

（4）棋盘覆盖

（5）合并排序

（6）快速排序

（7）线性时间选择

（8）最接近点对问题
<div><span class="Apple-style-span">（9）循环赛日程表</span></div>
<h3>二分搜索</h3>
<div><span class="Apple-style-span">问题：</span><span class="Apple-style-span">从一个已经排好序的序列中，查找某一个元素。</span><span class="Apple-style-span">
</span></div>
1. 将数组从中间分成上下两半，如果中间的值刚好是要查找的元素，直接输出结果。

2. 如果中间的值比要查找的大，那么说明要查找的元素只可能出现在上半段，再对上半段进行二分搜索。
<div><span class="Apple-style-span">3. 如果中间的值比要查找的小，那么说明要查找的元素只可能出现在下半段，再对下半段进行二分搜索。</span><span class="Apple-style-span">
</span></div>
<div><img src="file:///C:/Users/YUANWA~1/AppData/Local/Temp/enhtmlclip/Image(1).jpg" alt="" /><span class="Apple-style-span">
</span></div>
<h3>棋<span class="Apple-style-span">盘覆盖</span></h3>
<span class="Apple-style-span">问题：</span>  在一个2<sup>k</sup>×2<sup>k </sup>个方格组成的棋盘中，恰有一个方格与其它方格不同，称该方格为一特殊方格，且称该棋盘为一特殊棋盘。在棋盘覆盖问题中，要用图示的4种不同形态的L型骨牌覆盖给定的特殊棋盘上除特殊方格以外的所有方格，且任何2个L型骨牌不得重叠覆盖。

<img src="file:///C:/Users/YUANWA~1/AppData/Local/Temp/enhtmlclip/Image(35).png" alt="" />     <img src="file:///C:/Users/YUANWA~1/AppData/Local/Temp/enhtmlclip/Image(2).jpg" alt="" />

<span class="Apple-style-span">分析： </span>  当k&gt;0时，将2<sup>k</sup>×2<sup>k</sup>棋盘分割为4个2<sup>k-1</sup>×2<sup>k-1</sup>子棋盘(a)所示。

特殊方格必位于4个较小子棋盘之一中，其余3个子棋盘中无特殊方格。为了将这3个无特殊方格的子棋盘转化为特殊棋盘，可以用一个L型骨牌覆盖这3个较小棋盘的会合处，如 (b)所示，可以把黄色的方格看做是较小棋盘的特殊方格，从而将原问题转化为4个较小规模的棋盘覆盖问题。

<img src="file:///C:/Users/YUANWA~1/AppData/Local/Temp/enhtmlclip/Image(3).jpg" alt="" />
<div><span class="Apple-style-span">递归地使用这种分割，直至棋盘简化为棋盘1×1。</span></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:19:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:19:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ae%97%e6%b3%95%e7%ac%ac%e4%ba%8c%e7%af%87%e4%b9%8b%e5%88%86%e6%b2%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%b8%8e%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1522185057;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:51;}i:1;a:1:{s:2:"id";i:25;}i:2;a:1:{s:2:"id";i:198;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>程序员编程艺术算法归纳</title>
		<link>https://www.idatavisual.com/?p=17</link>
		<pubDate>Wed, 03 Jan 2018 06:25:21 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">第一章、左旋转字符串</span>

<span class="Apple-style-span">题目描述：</span>

<span class="Apple-style-span">定义字符串的左旋转操作：把字符串前面的若干个字符移动到字符串的尾部。
如把字符串abcdef左旋转2位得到字符串cdefab。
请实现字符串左旋转的函数，要求对长度为n的字符串操作的时间复杂度为O(n)，空间复杂度为O(1)。 </span>

<span class="Apple-style-span">解法二：
假设原数组序列为abcd1234，要求变换成的数组序列为1234abcd，即循环右移了4位。比较之后，不难看出，其中有两段的顺序是不变的：1234和abcd，可把这两段看成两个整体。右移K位的过程就是把数组的两部分交换一下。
变换的过程通过以下步骤完成：
逆序排列abcd：abcd1234 → dcba1234；
逆序排列1234：dcba1234 → dcba4321；
全部逆序：dcba4321 → 1234abcd。
伪代码可以参考清单2-35。
//代码清单2-35
Reverse(int* arr, int b, int e)
{
for(; b &lt; e; b++, e--)
{
int temp = arr[e];
arr[e] = arr[b];
arr[b] = temp;
}
}</span>

<span class="Apple-style-span">RightShift(int* arr, int N, int K)
{
K %= N;
Reverse(arr, 0, N – K - 1);
Reverse(arr, N - K, N - 1);
Reverse(arr, 0, N - 1);
}</span>

原文出处：<a href="http://blog.csdn.net/v_JULY_v/article/details/6322882" target="_blank" rel="noopener">http://blog.csdn.net/v_JULY_v/article/details/6322882</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:25:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:25:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%a8%8b%e5%ba%8f%e5%91%98%e7%bc%96%e7%a8%8b%e8%89%ba%e6%9c%af%e7%ae%97%e6%b3%95%e5%bd%92%e7%ba%b3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%b8%8e%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521943601;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:59;}i:1;a:1:{s:2:"id";i:45;}i:2;a:1:{s:2:"id";i:35;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>规划篇</title>
		<link>https://www.idatavisual.com/?p=19</link>
		<pubDate>Wed, 03 Jan 2018 06:29:44 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=19</guid>
		<description></description>
		<content:encoded><![CDATA[1.市场，产品定位

2.时间，工作量评估

3.投放，收益

关键：

1.有量变质变原理可知，当前我处于量变阶段，先必须达到一定的量方可谈质变

2.千招式练不如一招会]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:29:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:29:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a7%84%e5%88%92%e7%af%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%94%9f%e6%b4%bb%e6%84%9f%e6%82%9f"><![CDATA[生活感悟]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_bf05e2d226714115b40764077f42b0a4]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c50f6412b4c9386f3ab4b1be1686d5fe]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1518341319;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:57;}i:1;a:1:{s:2:"id";i:33;}i:2;a:1:{s:2:"id";i:17;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>架构师篇</title>
		<link>https://www.idatavisual.com/?p=21</link>
		<pubDate>Wed, 03 Jan 2018 06:33:31 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">架构思考</span>

1,初期，了解客户的<span class="Apple-style-span">愿景和目标</span>，深入分析客户所处的大<span class="Apple-style-span">环境</span>、分析其主要<span class="Apple-style-span">竞争对手</span>、分析现<span class="Apple-style-span">有资源</span>、分析<span class="Apple-style-span">合作伙伴</span>，明确实现目标的关键成功因素有哪些

2.善于分析组织，找出<span class="Apple-style-span">真正的决策者</span>，站在他的立场去了解、理解、分析他的关注点，他的目标和顾虑，通过沟通使他理解你的设想，对目标达成共识，接受你的解决方案。

3.架构是一种<span class="Apple-style-span">平衡的艺术</span>，干系人之间的利益有可能是有冲突、有矛盾的，找平衡点

4.<span class="Apple-style-span">参与到架构的实施过程中</span>，保证架构方案从售前阶段顺利平滑过渡到实施阶段，确保客户解决方案按照设计思路实施，避免错误的实施给架构造成破坏，带来额外的成本和风险。

5.“程序员之间的交流，最直接的就是“用产品说话”。如果你觉得一个产品原先的想法不是很好，但提意见又遭到反驳，那么你可以直接根据原来的版本，创建属于自己的分支，开发出属于自己的版本，实现自己的想法。”
深感赞同！

<span class="Apple-style-span">小程序员的思考：</span>

1.编程能力：程序员碰到的都是让人烦心的技术问题

①挑出我构建原型所需要的技术学习

②立马开始写代码

2.职业能力：经理面对的是项目期限和沟通问题]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:33:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:33:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9e%b6%e6%9e%84%e5%b8%88%e7%af%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%94%9f%e6%b4%bb%e6%84%9f%e6%82%9f"><![CDATA[生活感悟]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1523297235;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:45;}i:1;a:1:{s:2:"id";i:55;}i:2;a:1:{s:2:"id";i:198;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>什么是大牛</title>
		<link>https://www.idatavisual.com/?p=23</link>
		<pubDate>Wed, 03 Jan 2018 06:36:22 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">1.无论多么厉害的大牛都是从最初的菜鸟成长起来的，大牛从来不自认为大牛</span>

<span class="Apple-style-span">2.韩寒的文章，曾经在他的成名作《三重门》中说过“全面发展导致全面平庸”。</span>

<span class="Apple-style-span">内功和招式修一样即可</span>

<span class="Apple-style-span">3.有些事现在不做，以后再也没有机会做了</span>

<span class="Apple-style-span">4.只有代码表达不出来的东西，比如系统的高层设计，如问题分析，动机，原理这些无法在代码中体现的东西才需要文档。</span>

<span class="Apple-style-span">5.程序员的文档就是代码，代码就是程序员的文档</span>

<span class="Apple-style-span">6.只有高质量的代码，你才能，才敢于写完后忘记。只有忘记实现的细节，程序员才能将自己的智力解放出来，真正投入到分析问题，设计问题解决方案上去。</span>

<span class="Apple-style-span">7.设计之道，不在增无可增，而在减无可减</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:36:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:36:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bb%80%e4%b9%88%e6%98%af%e5%a4%a7%e7%89%9b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%94%9f%e6%b4%bb%e6%84%9f%e6%82%9f"><![CDATA[生活感悟]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1523245324;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:21;}i:1;a:1:{s:2:"id";i:160;}i:2;a:1:{s:2:"id";i:55;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>系统优化相关</title>
		<link>https://www.idatavisual.com/?p=25</link>
		<pubDate>Wed, 03 Jan 2018 06:38:26 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">一、系统性能调优-步骤及思路</span>

<span class="Apple-style-span">系统优化：减少计算机执行进程，更改工作模式，删除不必要的中断让机器运行更有效，优化文件位置使数据读写更快，空出更多资源供用户使用，以及减少不必要的系统加载以及自动启动项。</span>

<span class="Apple-style-span">优化步骤：</span>

<span class="Apple-style-span"><span class="Apple-style-span" lang="EN-US">1</span>、发现问题-&gt;<span class="Apple-style-span" lang="EN-US">2</span>、分析问题-&gt;<span class="Apple-style-span" lang="EN-US">3</span>、提出方案-&gt;<span class="Apple-style-span" lang="EN-US">4</span>、解决问题-&gt;<span class="Apple-style-span" lang="EN-US">5</span>、结果报告</span>

<span class="Apple-style-span">1.发现问题：一般性能的问题无非是系统工作效率低下，最常见的就是对数据库的</span><span class="Apple-style-span" lang="EN-US">CRUD</span><span class="Apple-style-span">操作缓慢、导出数据无响应等--&gt;定位问题--&gt;借助工具进行性能测试--&gt;优化、</span>

<span class="Apple-style-span">工具：javaVisual，LoadRunner</span>

<span class="Apple-style-span">2.分析问题：</span>

<span class="Apple-style-span">找到系统性能瓶颈的位置，然后从外向里添加日志，打印出各方法的执行时间，这样便很快就能找到问题的具体位置。
</span>

<span class="Apple-style-span">切记：优化一定要对系统进行深入分析，找到性能问题根源切入点，而不被表象迷糊。例如我们发现内存高了，首先想到不应该是扩大内存，而是为什么如此消耗内存，用工具（<span class="Apple-style-span" lang="EN-US">Java VisualVM</span>）看看内存消耗在什么地方，想办法解决。</span>

<span class="Apple-style-span"><span class="Apple-style-span" lang="EN-US">3</span>、提出方案</span>

<span class="Apple-style-span">从成本考虑大致顺序如下：数据库--&gt;应用层--&gt;Web层--&gt;硬件</span>

<span class="Apple-style-span">一般来说在数据库上建立索引、分区等操作要比在应用层重构算法来的省时省力；应用层和</span><span class="Apple-style-span" lang="EN-US">Web</span><span class="Apple-style-span">层基本上是一致的，但和硬件比起来在软件层次的优化还是第一位的。就像上面说的，内存不够用了不应该去考虑换机器、加内存，而是找到内存开销大的地方，解决之。</span>

<span class="Apple-style-span"><span class="Apple-style-span" lang="EN-US">4</span>、解决问题</span>

<span class="Apple-style-span">要强调的是性能瓶颈都是相对的，也就是说的一处瓶颈消失了，系统一旦压力增大后，在其他地方又发现新的性能瓶颈。所以说性能优化是一个迭代的过程，需要逐步的去解决问题，直至满足系统需要。</span>

<span class="Apple-style-span"><span class="Apple-style-span" lang="EN-US">5</span>、结果报告
</span>

<span class="Apple-style-span">为了后期有什么问题可以查看文档进行回溯，也为以后的优化提供现成的解决方案，要将优化过程中的文档上传保存。
</span>

<span class="Apple-style-span">二、系统性能调优--数据库的设计优化（未完待）</span>

相关文献链接：<a href="http://blog.csdn.net/beijiguangyong/article/details/8983472" target="_blank" rel="noopener">http://blog.csdn.net/beijiguangyong/article/details/8983472</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:38:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:38:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%b3%bb%e7%bb%9f%e4%bc%98%e5%8c%96%e7%9b%b8%e5%85%b3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%8a%80%e6%9c%af%e8%b0%83%e7%a0%94"><![CDATA[技术调研]]></category>
		<category domain="category" nicename="%e6%9c%8d%e5%8a%a1%e5%99%a8"><![CDATA[服务器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1518560056;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:198;}i:1;a:1:{s:2:"id";i:55;}i:2;a:1:{s:2:"id";i:29;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>处理大量数据并发操作</title>
		<link>https://www.idatavisual.com/?p=27</link>
		<pubDate>Wed, 03 Jan 2018 06:39:40 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[<h2 class="title title-single"><span class="Apple-style-span">一.处理方法：</span></h2>
<div><span class="Apple-style-span">缓存：文件缓存，数据库缓存</span></div>
<div><span class="Apple-style-span">数据库：sql优化，表的横向和纵向划分</span></div>
<div><span class="Apple-style-span">代码：优化代码结构</span></div>
<div><span class="Apple-style-span">二、高并发架构：</span></div>
<div><span class="Apple-style-span">1、HTML静态化 </span></div>
<div><span class="Apple-style-span">大家都知道，效率最高、消耗最小的就是纯静态化的html页面，所以我们尽可能使我们的网站上的页面采用静态页面来实现，这个最简单的方法其实也是最有效的方法。但是对于大量内容并且频繁更新的网站，我们无法全部手动去挨个实现，于是出现了我们常见的信息发布系统CMS，像我们常访问的各个门户站点的新闻频道，甚至他们的其他频道，都是通过信息发布系统来管理和实现的，信息发布系统可以实现最简单的信息录 入自动生成静态页面，还能具备频道管理、权限管理、自动抓取等功能，对于一个大型网站来说，拥有一套高效、可管理的CMS是必不可少的。
同 时，html静态化也是某些缓存策略使用的手段，对于系统中频繁使用数据库查询但是内容更新很小的应用，可以考虑使用html静态化来实现，比如论坛中论 坛的公用设置信息，这些信息目前的主流论坛都可以进行后台管理并且存储再数据库中，这些信息其实大量被前台程序调用，但是更新频率很小，可以考虑将这部分 内容进行后台更新的时候进行静态化，这样避免了大量的数据库访问请求。
2、图片服务器分离
对于Web服务器来说，不管 是 Apache、IIS还是其他容器，图片是最消耗资源的，于是我们有必要将图片与页面进行分离，这是基本上大型网站都会采用的策略，他们都有独立的图片服 务器，甚至很多台图片服务器。这样的架构可以降低提供页面访问请求的服务器系统压力，并且可以保证系统不会因为图片问题而崩溃，在应用服务器和图片服务器 上，可以进行不同的配置优化，比如apache在配置ContentType的时候可以尽量少支持，尽可能少的LoadModule，保证更高的系统消耗 和执行效率。
3、数据库集群和库表散列
大型网站都有复杂的应用，这些应用必须使用数据库，那么在面对大量访问的时候，数据库的瓶颈很快就能显现出来，这时一台数据库将很快无法满足应用，于是我们需要使用数据库集群或者库表散列。 在数据库集群方面，很多数据库都有自己的解决方案，Oracle、Sybase等都有很好的方案，常用的MySQL提供的Master/Slave也是类似的方案，您使用了什么样的DB，就参考相应的解决方案来实施即可。
</span><span class="Apple-style-span"> 上面提到的数据库集群由于在架构、成本、扩张性方面都会受到所采用DB类型的限制，于是我们需要从应用程序的角度来考虑改善系统架构，库表散列是常用并且最 有效的解决方案。我们在应用程序中安装业务和应用或者功能模块将数据库进行分离，不同的模块对应不同的数据库或者表，再按照一定的策略对某个页面或者功能 进行更小的，比如用户表，按照用户ID进行表散列，这样就能够低成本的提升系统的性能并且有很好的扩展性。sohu的论坛就是采用了这样的架 构，将论坛的用户、设置、帖子等信息进行数据库分离，然后对帖子、用户按照板块和ID进行散列数据库和表，最终可以在配置文件中进行简单的配置便能让系统 随时增加一台低成本的数据库进来补充系统性能。 </span><span class="Apple-style-span">
</span><span class="Apple-style-span">4、缓存 </span><span class="Apple-style-span">
缓存一词搞技术的都接触过，很多地方用到缓存。网站架构和网站开发中的缓存也是非常重要。这里先讲述最基本的两种缓存。
架构方面的缓存，对Apache比较熟悉的人都能知道Apache提供了自己的缓存模块，也可以使用外加的Squid模块进行缓存，这两种方式均可以有效的提高Apache的访问响应能力。
网 站程序开发方面的缓存，Linux上提供的Memory Cache是常用的缓存接口，可以在web开发中使用，比如用Java开发的时候就可以调用MemoryCache对一些数据进行缓存和通讯共享，一些大 型社区使用了这样的架构。另外，在使用web语言开发的时候，各种语言基本都有自己的缓存模块和方法，PHP有Pear的Cache模块，Java就更多 了，.net不是很熟悉，相信也肯定有。
</span><span class="Apple-style-span">5、镜像 </span><span class="Apple-style-span">
镜像是大型网站常采用的提高性能和数据安全性的方式，镜像的技术可以解决不同网 络接入商和地域带来的用户访问速度差异，比如ChinaNet和EduNet之间的差异就促使了很多网站在教育网内搭建镜像站点，数据进行定时更新或者实 时更新。
6、负载均衡 </span></div>
<div><span class="Apple-style-span">参考：<a href="http://babyduncan.iteye.com/blog/947659" target="_blank" rel="noopener">http://babyduncan.iteye.com/blog/947659</a></span></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:39:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:39:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a4%84%e7%90%86%e5%a4%a7%e9%87%8f%e6%95%b0%e6%8d%ae%e5%b9%b6%e5%8f%91%e6%93%8d%e4%bd%9c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%8d%e5%8a%a1%e5%99%a8"><![CDATA[服务器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1520137317;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:45;}i:1;a:1:{s:2:"id";i:141;}i:2;a:1:{s:2:"id";i:51;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>事务</title>
		<link>https://www.idatavisual.com/?p=29</link>
		<pubDate>Wed, 03 Jan 2018 06:41:22 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=29</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">事务(transaction) :
事务(Transaction)是并发控制的基本单位。这些操作要么都执行，要么都
不执行,具有原子性。例如，银行转帐工作：从一个帐号扣款并使另一个帐号增款，这
两个操作要么都执行，要么都不执行。所以，应该把他们看成一个事务,保持数据一致性。
事务特性:
1.原子性(atomic)
2.一致性(consistence)
换句话说，一个事务应该把系统从一个一致-状态转换到另一个一致状态。举个例子，在关系数据库的情况下，一个一致的事务将保护定义在数据上的所有完整性约束。
3.隔离性(isolation)
在同一个环境中可能有多个事务并发执行，而每个事务都应表现为独立执行。串行的执行一系列事务的效果应该同于并发的执行它们。这要求两件事:
①在一个事务执行过程中，数据的中间的(可能不一致)状态不应该被暴露给所有的其他事务。
②两个并发的事务应该不能操作同一项数据。数据库管理系统通常使用锁来实现这个特征。
</span>

<span class="Apple-style-span">4.持久性(durability):一个被完成的事务的效果应该是持久的。</span>

<span class="Apple-style-span">事务基本格式：</span>
<pre class="java">personTransaction tx = new personTransaction("personalBuy");
try{
	operationA(); 
	operationB();  
	tx.commit();
}catch(Exception e){
	tx.rollback();
}</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:41:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:41:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%ba%8b%e5%8a%a1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%8d%e5%8a%a1%e5%99%a8"><![CDATA[服务器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1516018505;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:64;}i:1;a:1:{s:2:"id";i:59;}i:2;a:1:{s:2:"id";i:76;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>面向对象的设计原则－类设计原则</title>
		<link>https://www.idatavisual.com/?p=31</link>
		<pubDate>Wed, 03 Jan 2018 06:42:22 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=31</guid>
		<description></description>
		<content:encoded><![CDATA[在面向对象设计中，如何通过很小的设计改变就可以应对设计需求的变化，这是令设计者极为关注的问题。为此不少OO先驱提出了很多有关面向对象的设计原则用于指导OO的设计和开发。下面是几条与类设计相关的设计原则。

1. 开闭原则（the Open Closed Principle OCP）

一个模块在扩展性方面应该是开放的而在更改性方面应该是封闭的。因此在进行面向对象设计时要尽量考虑接口封装机制、抽象机制和多态技术。该原则同样适合于非面向对象设计的方法，是软件工程 设计方法的重要原则之一。

我们以收音机的例子为例，讲述面向对象的开闭原则。我们收听节目时需要打开收音机电源，对准电台频率和进行音量调节。但是对于不同的收音机，实现这三个步骤的细节往往有所不同。比如自动收缩电台的收音机和按钮式收缩在操作细节上并不相同。因此，我们不太可能针对每种不同类型的收音机通过一个收音机类来实现（通过重载）这些不同的操作方式。但是我们可以定义一个收音机接口，提供开机、关机、增加频率、降低频率、增加音量、降低音量六个抽象方法。不同的收音机继承并实现这六个抽象方法。这样新增收音机类型不会影响其它原有的收音机类型，收音机类型扩展极为方便。此外，已存在的收音机类型在修改其操作方法时也不会影响到其它类型的收音机。

图1是一个应用OCP生成的收音机类图的例子：

<img src="http://www.uml.org.cn/oobject/images/OCPqweq.gif" alt="" width="473" height="227" />

图1 OCP应用（收音机）

2. 替换原则 (the Liskov Substitution Principle LSP)

子类应当可以替换父类并出现在父类能够出现的任何地方。这个原则是Liskov于1987年提出的设计原则。它同样可以从Bertrand Meyer 的DBC (Design by Contract) 的概念推出。

我们以学生为例，夜校生为学生的子类，因此在任何学生可以出现的地方，夜校生均可出现。这个例子有些牵强，一个能够反映这个原则的例子时圆和椭圆，圆是椭圆的一个特殊子类。因此任何出现椭圆的地方，圆均可以出现。但反过来就可能行不通。

Liskov的相关图示见图2：

<img src="http://www.uml.org.cn/oobject/images/Liskovdd.gif" alt="" width="247" height="166" />

图2 Liskov 原则

运用替换原则时，我们尽量把类B设计为抽象类或者接口，让C类继承类B（接口B）并实现操作A和操作B，运行时，类C实例替换B，这样我们即可进行新类的扩展（继承类B或接口B），同时无须对类A进行修改。

3. 依赖原则 (the Dependency Inversion Principle DIP)

在进行业务设计时，与特定业务有关的依赖关系应该尽量依赖接口和抽象类，而不是依赖于具体类。具体类只负责相关业务的实现，修改具体类不影响与特定业务有关的依赖关系。

在结构化设计中，我们可以看到底层的模块是对高层抽象模块的实现（高层抽象模块通过调用底层模块），这说明，抽象的模块要依赖具体实现相关的模块，底层模块的具体实现发生变动时将会严重影响高层抽象的模块，显然这是结构化方法的一个"硬伤"。

面向对象方法的依赖关系刚好相反，具体实现类依赖于抽象类和接口（见图-3）。

为此，我们在进行业务设计时，应尽量在接口或抽象类中定义业务方法的原型，并通过具体的实现类（子类）来实现该业务方法，业务方法内容的修改将不会影响到运行时业务方法的调用。

<img src="http://www.uml.org.cn/oobject/images/DIPgferd.gif" alt="" width="492" height="275" />

图3依赖原则图示

4. 接口分离原则（the Interface Segregation Principle ISP）

采用多个与特定客户类有关的接口比采用一个通用的涵盖多个业务方法的接口要好。

ISP原则是另外一个支持诸如COM等组件化的使能技术。缺少ISP，组件、类的可用性和移植性将大打折扣。

这个原则的本质相当简单。如果你拥有一个针对多个客户的类，为每一个客户创建特定业务接口，然后使该客户类继承多个特定业务接口将比直接加载客户所需所有方法有效。

图4展示了一个拥有多个客户的类。它通过一个巨大的接口来服务所有的客户。只要针对客户A的方法发生改变，客户B和客户C就会受到影响。因此可能需要进行重新编译和发布。这是一种不幸的做法。

<img src="http://www.uml.org.cn/oobject/images/ISP1wer.gif" alt="" width="418" height="190" />

图4 带有集成接口的服务类

我们再看图-5中所展示的技术。每个特定客户所需的方法被置于特定的接口中，这些接口被Service类所继承并实现。

<img src="http://www.uml.org.cn/oobject/images/ISP2deede4.gif" alt="" width="454" height="324" />

图5 使用接口分离的服务类设计

如果针对客户A的方法发生改变，客户B和客户C并不会受到任何影响，也不需要进行再次编译和重新发布。

以上四个原则是面向对象中常常用到的原则。此外，除上述四原则外，还有一些常用的经验诸如类结构层次以三到四层为宜、类的职责明确化（一个类对应一个具体职责）等可供我们在进行面向对象设计参考。但就上面的几个原则看来，我们看到这些类在几何分布上呈现树型拓扑的关系，这是一种良好、开放式的线性关系、具有较低的设计复杂度。一般说来，在软件设计中我们应当尽量避免出现带有闭包、循环的设计关系，它们反映的是较大的耦合度和设计复杂化。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:42:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:42:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e7%9a%84%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99%ef%bc%8d%e7%b1%bb%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%8d%e5%8a%a1%e5%99%a8"><![CDATA[服务器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1517396542;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:47;}i:1;a:1:{s:2:"id";i:141;}i:2;a:1:{s:2:"id";i:45;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>游戏服务器框架</title>
		<link>https://www.idatavisual.com/?p=33</link>
		<pubDate>Wed, 03 Jan 2018 06:44:23 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=33</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">1.单机，网游：</span>

<img src="http://img.blog.csdn.net/20130916201026093" alt="" />

<span class="Apple-style-span">2.逻辑层次：</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130916201055109" alt="" /></span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:44:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:44:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b8%b8%e6%88%8f%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%a1%86%e6%9e%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%8d%e5%8a%a1%e5%99%a8"><![CDATA[服务器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521852695;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:57;}i:1;a:1:{s:2:"id";i:41;}i:2;a:1:{s:2:"id";i:210;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Liunx常用命令</title>
		<link>https://www.idatavisual.com/?p=35</link>
		<pubDate>Wed, 03 Jan 2018 06:49:19 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[Liunx命令：
cd
ls -l
ls -m
ll
mkdir
rmdir
rm -rf filename (f:force 强制)
touch filename1 //创建文件
-rw-rw-r--
mv file1 file2
Red Hat Linux常用命令总结：
一.启动shell：
方法1.Alt+F2 在弹出的运行对话框中输入：gnome-terminal
方法2.单击右键-&gt;新建终端

二.退出shell：
方法1:exit
方法2:Ctrl+D

三.中断执行
Ctrl+C

四.常用知识
1.通配符：
?: 可替代单个字符
*：可替代任意字符
2.使用man，info命令获取帮助

五.目录操作
1.返回上级目录：
cd ..
cd 直接返回根目录
cd - 返回当前目录之前所在的目录

2.创建目录
mkdir b/c/d 在目录c下创建目录d
pwd 显示当前工作目录路径

六.系统重新启动与关机命令
halt,reboot,poweroff 三条简单关机命令

七.文件操作命令
1.建立文件
mkdir dd1 建立dd1这个目录
touch 1创建文件1，（在linux文件的后缀名没有任何意义，无非是自己做个记号，提示性意义。）
mkdir dd1 建立dd1这个目录

2.删除文件
rm 1.c 将文件1.c删除
rm -rf dd 删除文件dd或目录dd，删除时不提示（-f指强制，-r指递归删除）

3.剪切文件
mv 1 /b/c (将文件1剪切到目录/b/c下)

4.复制文件
复制文件（把1文件拷贝一份备份2）
cp 1 2
复制文件夹（复制d1一份叫d2）
cp -r d1 d2

5.列出文件内容
more a.c 正常读文件内容
cat a.c 正常读文件内容
tac a.c 逆序读文件内容
head -3 a.c (列出开头前三行)
tail -3 a.c (列出后三行)

6.查找文件
find指令（可以按文件日期、大小来查）
find / -name *weihp (从根目录下开始查找包含weihp的文件。)

locate 指令
使用指令查找文件名中含有关键字"demo"的文件路径，输入如下命令：
$ locate demo #查找指定的文件

whereis指令：主要用于找到指定程序的源文件、二进制文件或手册
$ whereis bash #查看指定指令的程序路径和man手册页路径
$ whereis -b bash #显示bash命令的二进制程序
$ whereis -m bash #显示bash命令的帮助文件

mtools指令：显示mtools支持的指令
mtools

7.file指令：识别文件的类型
file a.c

8.打印内容
echo指令(当用户使用该指令显示系统变量的值时，必须在变量名前添加符号"$")
echo I love liunx
echo $PATH #显示系统变量的值

八.vi 文本编辑器
vi 3.txt（创建一个3的文件（若有在原来基础上编辑））
它有两个模式：命令模式。编辑模式。（刚进去的时候是命令模式）
1.命令模式--&gt;编辑模式 敲a
2.编辑模式--&gt;命令模式 先按esc
按: 冒号
敲w 存盘
敲q 退出、或q! 不存盘退出
dd 删除一行
dw 删除一个单词
敲o 向下插入一行
敲大写O 向上插入一行

九.用户删除
1. cd etc
userdel testuser;
2. cd home（再到home目录下该用户的文件夹）
rm –rf testuser;
用户登录
su testuser（从root用户切换到testuser）
exit（切换回去）
当启动时，登录到某个目录后，当前目录是用户home、下的主目录。

十.文件权限：
修改模式ls -l显示当前目录下的文件的信息，如下x代表执行，-表示没有权限，r为read，w写。
rwxr-xr-x 2 root root 4096 06-29 14:30 Test
前面九位是三位三位三位的权限矩阵，一般来说，前三位是owner，中间三位是group，最后三位是other的
（以下是修改文件4权限的一些方法）
chmod +x 4（给4所有用户加可执行全新啊）
chmod u+x 4 （给4自己用户添加可执行权限）
chmod o+x 4 （给4其他用户添加可执行权限）
chmod g+x 4 （给4其组户添加可执行权限）
chmod 755 4 ----- 111101101

wc统计指定文件的行数、字数、字符数
grep查找文本文件哪行包含我要的字符
例如：grep 4 weihp（查找那一行语句包含我要查到weihp这句话，它会把这行语句打印出来）

十一.管道
将一个命令的输出传送给一个命令，做为另一个命令的输入
命令1 | 命令2 | 命令3
举例：
ls -l /ect |more （把上一个命令执行结果，按more分页输出）
cat /ect/password |grep weihp（首先查看password文件，再查看包含weihp用户的那一行）

十二.shell指令
1. history指令：显示历史命令
2.fc指令：修改历史命令并执行
$ fc -l -10 #显示10条历史命令
$ fc 493 #编辑第493条历史命令
#将自动调用vi编辑器编辑指定的命令，编辑完成后保存，会自动执行修改后的命令
总结二：

系统信息
arch 显示机器的处理器架构(1)
uname -r 显示正在使用的内核版本
lspci -tv 罗列 PCI 设备
lsusb -tv 显示 USB 设备

date 显示系统日期
cal 2007 显示2007年的日历表
shutdown -h now 关闭系统(1)
reboot 重启(2)
logout 注销

文件和目录
cd 进入个人的主目录
pwd 显示工作路径
ls 查看目录中的文件
ls -F 查看目录中的文件
ls -l 显示文件和目录的详细资料
ls -a 显示隐藏文件

mkdir dir1 创建一个叫做 'dir1' 的目录'
mkdir dir1 dir2 同时创建两个目录
mkdir -p /tmp/dir1/dir2 创建一个目录树
rm -f file1 删除一个叫做 'file1' 的文件'
rmdir dir1 删除一个叫做 'dir1' 的目录'
rm -rf dir1 删除一个叫做 'dir1' 的目录并同时删除其内容
rm -rf dir1 dir2 同时删除两个目录及它们的内容
mv dir1 new_dir 重命名/移动 一个目录 \
cp file1 file2 复制一个文件

磁盘空间
df -h 显示已经挂载的分区列表

打包和压缩文件
gunzip file1.gz 解压一个叫做 'file1.gz'的文件
gzip file1 压缩一个叫做 'file1'的文件
gzip -9 file1 最大程度压缩

查看文件内容
cat file1 从第一个字节开始正向查看文件的内容
tac file1 从最后一行开始反向查看一个文件的内容
more file1 查看一个长文件的内容

网络 - （以太网和WIFI无线）
ifconfig eth0 显示一个以太网卡的配置
ifup eth0 启用一个 'eth0' 网络设备
ifdown eth0 禁用一个 'eth0' 网络设备
ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址
ifconfig eth0 promisc 设置 'eth0' 成混杂模式以嗅探数据包 (sniffing)
dhclient eth0 以dhcp模式启用 'eth0'

解压7z文件：
7za x -y datafile.7z

新建sh：
#!/bin/bash

cd /home/xxx/xxx/test
rm -rf ds
7za x -y ds.7z

VIM常用命令整理：
a 从命令模式转变为插入模式,字符将被插入到光标位置后面
i 从命令模式转变为插入模式,字符将被插入到光标位置前面
x 删除光标位置的字符
dd 删除光标位置所在的行
D 删除从光标位置起到行末尾的所有字符
yy 复制光标所在行的内容到粘贴板
P 把粘贴板内容复制到光标位置
/ 搜索命令,从光标位置起向下搜索匹配的字符串,如/game
? 搜索命令,从文件末尾开始向上搜索匹配的字符串,如?game
n 寻找下一个匹配结果(与搜索命令/和?结合使用)
GG 去到文件末尾
nG n为数字,输入数字后,输入大写G,可以去到文件第n行
set nu 显示行号 (在命令模式下 :set nu )
set nonu 隐藏行号(在命令模式下 :set nonu )]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:49:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:49:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[liunx%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%8d%e5%8a%a1%e5%99%a8"><![CDATA[服务器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521853635;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:64;}i:1;a:1:{s:2:"id";i:59;}i:2;a:1:{s:2:"id";i:203;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nginx PHP-FPM and MySQL on CentOS 5</title>
		<link>https://www.idatavisual.com/?p=37</link>
		<pubDate>Wed, 03 Jan 2018 06:56:31 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=37</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">This is tutorial how to install Nginx PHP-FPM and MySQL on CentOS 5 64bit VPS</span>

Install Remi repository on CentOS 5 :
<blockquote># rpm -Uvh http://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm
# rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-5.rpm</blockquote>
Install Nginx and PHP-FPM
<blockquote># yum --enablerepo=remi,remi-test install nginx php-fpm php-common</blockquote>
Install PHP modules
<blockquote># yum --enablerepo=remi,remi-test install php-pecl-apc php-cli php-pear php-pdo php-mysql php-pgsql php-pecl-mongo php-sqlite php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml</blockquote>
Start Nginx and Autostart on boot
<blockquote>#service nginx start
# chkconfig nginx on</blockquote>
Start php-fpm and autostart on boot
<blockquote># service php-fpm start
# chkconfig php-fpm on</blockquote>
for install mysql uses this tutorial:

yum --enablerepo=remi,remi-test install mysql-server

Test Nginx and PHP-FPM setup:
<ul>
 	<li>Create info.php file on nginx vhost directory with following content:
<blockquote>&lt;?php
phpinfo();
?&gt;</blockquote>
</li>
 	<li>type in browser xxxxx/info.php</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:56:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 06:56:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[nginx-php-fpm-and-mysql-on-centos-5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%8d%e5%8a%a1%e5%99%a8"><![CDATA[服务器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1520100250;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:57;}i:1;a:1:{s:2:"id";i:210;}i:2;a:1:{s:2:"id";i:203;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>负载均衡----实现配置篇（Nginx）</title>
		<link>https://www.idatavisual.com/?p=41</link>
		<pubDate>Wed, 03 Jan 2018 07:28:02 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=41</guid>
		<description></description>
		<content:encoded><![CDATA[首先我们来回顾下上篇的概念： 负载均衡 == 分身的能力。

既然要有分身的能力嘛，这好办，多弄几台服务器就搞定了。
今天我们讲的实例嘛…..我们还是先看图比较好:

<img src="http://images.cnitblog.com/blog/124819/201409/031111563131941.png" alt="" />

还是图比较清晰，以下我都用别名称呼：
<div class="cnblogs_code">
<pre>　　PA ： 负载均衡服务器/WEB入口服务器/www.mydomain.com
　　P1 ： WEB服务器/分身1/192.168.2.3
　　P2 ： WEB服务器/分身2/192.168.2.4
　　P3 ： WEB服务器/分身3/192.168.2.5</pre>
</div>
&nbsp;

PS：首先我们学这个的开始之前吧，不懂防火墙的童鞋们，建议你们把PA、P1、P2、P3的防火墙关闭，尽量不要引起不必要的麻烦。

首先 ：PA、P1、P2、P3都安装了Nginx,不会安装的可以去官网查看教程：<a href="http://www.nginx.cn/install%20" target="_blank" rel="noopener">http://www.nginx.cn/install </a>（中文版教程、非常的牛X）

1. 装完之后哈，我们先找到 PA 的nginx.conf配置文件：
在http段加入以下代码:
<div class="cnblogs_code">
<pre>upstream servers.mydomain.com { 
    server 192.168.2.3:80<span class="Apple-style-span">;</span> 
    server 192.168.2.4:80<span class="Apple-style-span">;</span> 
    server 192.168.2.5:80<span class="Apple-style-span">;
</span>}</pre>
</div>
当然嘛,这servers.mydomain.com随便取的。

那么PA的server配置如下:
在http段加入以下代码：
<div class="cnblogs_code">
<pre>server{ 
    listen 80<span class="Apple-style-span">;</span> 
    server_name www.mydomain.com<span class="Apple-style-span">;</span> 
    location / { 
        proxy_pass http://servers.mydomain.com<span class="Apple-style-span">;</span> 
        proxy_set_header Host $host<span class="Apple-style-span">;</span> 
        proxy_set_header X-Real-IP $remote_addr<span class="Apple-style-span">;</span> 
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for<span class="Apple-style-span">;</span> 
    } 
}</pre>
</div>
那么P1、P2、P3的配置如下：
<div class="cnblogs_code">
<pre>server{ 
    listen 80<span class="Apple-style-span">;</span> 
    server_name www.mydomain.com<span class="Apple-style-span">;</span> 
    index index.html<span class="Apple-style-span">;</span> 
    root /data/htdocs/www<span class="Apple-style-span">;</span> 
}</pre>
</div>
&nbsp;

2. 有人就问了，我用其它端口行不行啊，当然也是可以的，假设PA的nginx.conf配置文件：
<div class="cnblogs_code">
<pre>upstream servers2.mydomain.com { 
    server 192.168.2.3:8080<span class="Apple-style-span">;</span> 
    server 192.168.2.4:8081<span class="Apple-style-span">;</span> 
    server 192.168.2.5:8082<span class="Apple-style-span">;
</span>}

server{ 
    listen 80<span class="Apple-style-span">;</span> 
    server_name www.mydomain.com<span class="Apple-style-span">;</span> 
    location / { 
        proxy_pass http://servers2.mydomain.com<span class="Apple-style-span">;</span> 
        proxy_set_header Host $host<span class="Apple-style-span">;</span> 
        proxy_set_header X-Real-IP $remote_addr<span class="Apple-style-span">;</span> 
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for<span class="Apple-style-span">;</span> 
    } 
}</pre>
</div>
那么P1的配置如下：
<div class="cnblogs_code">
<pre>server{ 
    listen 8080<span class="Apple-style-span">;</span> 
    server_name www.mydomain.com<span class="Apple-style-span">;</span> 
    index index.html<span class="Apple-style-span">;</span> 
    root /data/htdocs/www<span class="Apple-style-span">;</span> 
}</pre>
</div>
&nbsp;

P2配置：
<div class="cnblogs_code">
<pre>server{ 
    listen 8081<span class="Apple-style-span">;</span> 
    server_name www.mydomain.com<span class="Apple-style-span">;</span> 
    index index.html<span class="Apple-style-span">;</span> 
    root /data/htdocs/www<span class="Apple-style-span">;</span> 
}</pre>
</div>
&nbsp;

P3配置：
<div class="cnblogs_code">
<pre>server{ 
    listen 8082<span class="Apple-style-span">;</span> 
    server_name www.mydomain.com<span class="Apple-style-span">;</span> 
    index index.html<span class="Apple-style-span">;</span> 
    root /data/htdocs/www<span class="Apple-style-span">;</span> 
}</pre>
</div>
&nbsp;

<span id="__mceDel">重启之后，我们访问下，恩不错，确实很厉害。
当我们把一台服务器给关闭了后。
访问网址，还是OK的。说明：负载均衡还要懂得修理他（T出泡妞队营）</span>

&nbsp;

3. 那么负载均衡如何保持通话呢？
当然现在有好几种方案，我们这次只是讲一种。
IP哈希策略
优点：能较好地把同一个客户端的多次请求分配到同一台服务器处理，避免了加权轮询无法适用会话保持的需求。
缺点：当某个时刻来自某个IP地址的请求特别多，那么将导致某台后端服务器的压力可能非常大，而其他后端服务器却空闲的不均衡情况。

nginx的配置也很简单，代码如下：
<div class="cnblogs_code">
<pre>upstream servers2.mydomain.com { 
    server 192.168.2.3:8080<span class="Apple-style-span">;</span> 
    server 192.168.2.4:8081<span class="Apple-style-span">;</span> 
    server 192.168.2.5:8082<span class="Apple-style-span">;
</span>    ip_hash<span class="Apple-style-span">;
</span>}</pre>
</div>
&nbsp;

其实一切就这么简单，来赶快试试吧！

4. 说了这么多,其实你有没有发现一个问题的所在，就是这么多服务器，他们共同需要的文件从哪里来？
想知道如何解决，请继续关注：负载均衡 ---- 文件服务策略]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 15:28:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 07:28:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1-%e5%ae%9e%e7%8e%b0%e9%85%8d%e7%bd%ae%e7%af%87%ef%bc%88nginx%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web%e6%9c%8d%e5%8a%a1"><![CDATA[web服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1520050040;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:43;}i:1;a:1:{s:2:"id";i:57;}i:2;a:1:{s:2:"id";i:210;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>负载均衡（文件服务策略）</title>
		<link>https://www.idatavisual.com/?p=43</link>
		<pubDate>Wed, 03 Jan 2018 07:29:41 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[上回我提到的这么多服务器，他们共同需要的文件从哪里来？
那么我们就需要文件服务器，文件服务器从哪里来，我们先看图了解下：

<img src="http://images.cnitblog.com/blog/124819/201409/101403272315095.png" alt="" />

图1

&nbsp;

---------------------------------------------------------------------------------------------------------------

&nbsp;

&nbsp;

<img src="http://images.cnitblog.com/blog/124819/201409/101404073567936.png" alt="" />

图2

不管是图1还是图2都能解决问题。

当你拿着这两份图给老板审批的时候，老板都会选择图2。

这个涉及高层的问题，先不用去理会，今天我们主要的内容是文件服务策略。

&nbsp;

今天介绍的文件服务策略分为三种（Linux）：
1. 文件共享
2. 文件同步
3. 分布式文件系统
三种的优缺点，本篇不作声明。

&nbsp;

<span class="Apple-style-span">1. 文件共享篇</span>

&nbsp;

参照图2，PA为文件服务器，文件主要存放服务器。
P1，P2，P3执行以下命令即可，你可以把该命令放入/etc/rc.local,开机自动启动 ：
<div class="cnblogs_code">
<pre><span class="Apple-style-span">mount</span> -o rw <span class="Apple-style-span">192.168</span>.<span class="Apple-style-span">2.2</span>:/storage  /storage</pre>
</div>
注：PA,P1,P2,P3   /storage为文件路径

&nbsp;

<span class="Apple-style-span">2. 文件同步篇</span>

PA安装rsync服务端，如何安装请查看：http://rsync.samba.org/

2.1 软件包安装
<div class="cnblogs_code">
<pre><span class="Apple-style-span">sudo</span> apt-get  <span class="Apple-style-span">install</span>  rsync  #在debian、ubuntu 等在线安装方法；
<span class="Apple-style-span">yum</span> <span class="Apple-style-span">install</span> rsync    #Fedora、Redhat 等在线安装方法；
rpm -ivh rsync       #Fedora、Redhat 等rpm包安装方法；</pre>
</div>
2.2 配置文件

rsync的主要有以下三个配置文件/etc/rsyncd.conf(主配置文件)、/etc/rsyncd.secrets(密码文件)、/etc/rsyncd.motd(rysnc服务器信息)
注：rsyncd.secrets这个密码文件的文件属性设为root拥有, 且权限要设为600, 否则无法备份成功!

/etc/rsyncd.conf：
<div class="cnblogs_code">
<pre>pid file = /var/run/rsyncd.pid   
port = 873
address = 192.168.1.171  
　 
uid = root
gid = root

use chroot = yes  
read only = yes 

#limit access to private LANs
hosts allow=192.168.2.0/255.255.255.0  
hosts deny=*

max connections = 5 
#motd file = /etc/rsyncd.motd

#This will give you a separate log file
#log file = /var/log/rsync.log

#This will log every file transferred - up to 85,000+ per user, per sync
#transfer logging = yes

log format = %t %a %m %f %b
syslog facility = local3
timeout = 300

<span class="Apple-style-span">[</span><span class="Apple-style-span">storage</span><span class="Apple-style-span">]</span>   
path = /storage
list=yes 
ignore errors 
auth users = root
secrets file = /etc/rsyncd.secrets</pre>
</div>
rsyncd.secrets：
<div class="cnblogs_code">
<pre>root:storage@mydomain.com</pre>
</div>
2.3 启动服务
<div class="cnblogs_code">
<pre>/etc/init.d/xinetd reload</pre>
</div>
&nbsp;

P1、P2、P3也一样安装rsync。

开个定时命令crontab，每几分钟同步一次，执行以下命令：
<div class="cnblogs_code">
<pre>rsync -vzrtopg --delete root@<span class="Apple-style-span">192.168</span>.<span class="Apple-style-span">2.2</span>::storage --password-<span class="Apple-style-span">file</span>=/etc/rsync.pass</pre>
</div>
为了不用输入密码，/etc/rsync.pass加入密码
<div class="cnblogs_code">
<pre>storage@mydomain.com</pre>
</div>
&nbsp;

<span class="Apple-style-span">3. 分布式文件系统</span>

<span class="Apple-style-span">
</span>开始之前先看图.

<span class="Apple-style-span"><img src="http://images.cnitblog.com/blog/124819/201409/101417061843100.png" alt="" /></span>

首先了解下几个概念:
1. PA:Master文件服务器（主服务器）
2. P1、P2、P3：chunk文件服务器（文件存放服务器）

文件介绍的也是使用moosefs，官方网站：<a href="http://www.moosefs.org/reference-guide.html#making-and-installing" target="_blank" rel="noopener">http://www.moosefs.org/reference-guide.html#making-and-installing</a>

里面有篇中文文档，挺靠谱的。

&nbsp;

3.1 PA安装MooseFS Master
<div class="cnblogs_code">
<pre><span class="Apple-style-span">wget</span> http:<span class="Apple-style-span">//</span><span class="Apple-style-span">ncu.dl.sourceforge.net/project/moosefs/moosefs/1.6.11/mfs-1.6.11.tar.gz</span>
<span class="Apple-style-span">tar</span> zxvf mfs-<span class="Apple-style-span">1.6</span>.<span class="Apple-style-span">11</span>.<span class="Apple-style-span">tar</span>.gz
cd mfs-<span class="Apple-style-span">1.6</span>.<span class="Apple-style-span">11</span>
useradd mfs -s /sbin/nologin
./configure --prefix=/usr/local/mfs --with-default-user=mfs --with-default-group=mfs
<span class="Apple-style-span">make</span>
<span class="Apple-style-span">make</span> <span class="Apple-style-span">install</span></pre>
</div>
把Master配置文件，拷贝过去：
<div class="cnblogs_code">
<pre>cd /usr/local/mfs/etc/
<span class="Apple-style-span">cp</span> mfsmaster.cfg.dist mfsmaster.cfg
<span class="Apple-style-span">cp</span> mfsexports.cfg.dist mfsexports.cfg</pre>
</div>
启动、暂停命令
<div class="cnblogs_code">
<pre>/usr/local/mfs/sbin/mfsmaster start
/usr/local/mfs/sbin/mfsmaster –s</pre>
</div>
Master mfsexports.cfg配置
<div class="cnblogs_code">
<pre>192.168.2.0/24 . rw
192.168.2.0/24 / rw</pre>
</div>
设置副本的份数，推荐 3 份
<div class="cnblogs_code">
<pre>/usr/local/mfs/bin/mfssetgoal -r <span class="Apple-style-span">3</span></pre>
</div>
&nbsp;

3.2 P1、P2、P3安装MooseFS Chunk Server
<div class="cnblogs_code">
<pre><span class="Apple-style-span">wget</span> http:<span class="Apple-style-span">//</span><span class="Apple-style-span">ncu.dl.sourceforge.net/project/moosefs/moosefs/1.6.11/mfs-1.6.11.tar.gz</span>
<span class="Apple-style-span">tar</span> zxvf mfs-<span class="Apple-style-span">1.6</span>.<span class="Apple-style-span">11</span>.<span class="Apple-style-span">tar</span>.gz 
cd mfs-<span class="Apple-style-span">1.6</span>.<span class="Apple-style-span">11</span>
useradd mfs -s /sbin/nologin
./configure --prefix=/usr/local/mfs --with-default-user=mfs --with-default-group=mfs
<span class="Apple-style-span">make</span>
<span class="Apple-style-span">make</span> <span class="Apple-style-span">install</span></pre>
</div>
把Chunk Server配置文件，拷贝过去：
<div class="cnblogs_code">
<pre>cd /usr/local/mfs/etc/
<span class="Apple-style-span">cp</span> mfschunkserver.cfg.dist mfschunkserver.cfg
<span class="Apple-style-span">cp</span> mfshdd.cfg.dist mfshdd.cfg</pre>
</div>
启动、暂停命令
<div class="cnblogs_code">
<pre>/usr/local/mfs/sbin/mfschunkserver start
/usr/local/mfs/sbin/mfschunkserver stop</pre>
</div>
mfshdd.cfg配置
<div class="cnblogs_code">
<pre>/data/mfs #文件存放路径</pre>
</div>
&nbsp;

3.3 MooseFS Client安装

PA、P1、P2、P3都安装，安装如下：
<div class="cnblogs_code">
<pre><span class="Apple-style-span">wget</span> http:<span class="Apple-style-span">//</span><span class="Apple-style-span">ncu.dl.sourceforge.net/project/moosefs/moosefs/1.6.11/mfs-1.6.11.tar.gz</span>
<span class="Apple-style-span">tar</span> zxvf mfs-<span class="Apple-style-span">1.6</span>.<span class="Apple-style-span">11</span>.<span class="Apple-style-span">tar</span>.gz 
cd mfs-<span class="Apple-style-span">1.6</span>.<span class="Apple-style-span">11</span>
useradd mfs -s /sbin/nologin
./configure --prefix=/usr/local/mfs --with-default-user=mfs --with-default-group=mfs
--enable-mfsmount
make
make <span class="Apple-style-span">install</span></pre>
</div>
PA、P1、P2、P3挂载文件系统：
<div class="cnblogs_code">
<pre>/usr/local/mfs/bin/mfsmount /storage -H <span class="Apple-style-span">192.168</span>.<span class="Apple-style-span">2.2</span></pre>
</div>
&nbsp;

总结: 好了，三种解决方案都介绍完了，整体都很简单，赶快来选择适合自己的解决方案吧，动手试试吧！
当然三种方案都有自己的优缺点，我希望看了文章的不点<span class="Apple-style-span">推荐</span>的人就回答下这些问题吧！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 15:29:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 07:29:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%ef%bc%88%e6%96%87%e4%bb%b6%e6%9c%8d%e5%8a%a1%e7%ad%96%e7%95%a5%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web%e6%9c%8d%e5%8a%a1"><![CDATA[web服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521042238;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:41;}i:1;a:1:{s:2:"id";i:64;}i:2;a:1:{s:2:"id";i:210;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>应用系统架构设计</title>
		<link>https://www.idatavisual.com/?p=45</link>
		<pubDate>Wed, 03 Jan 2018 07:30:57 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=45</guid>
		<description></description>
		<content:encoded><![CDATA[<p class="artcon"><span class="Apple-style-span">我们在做着表面上看似是对于各种不同应用的开发，其实背后所对应的架构设计都是相对稳定的。在一个好的架构下编程，不仅对于开发人员是一件赏心悦目的事情，更重要的是软件能够表现出一个健康的姿态；而架构设计的不合理，不仅让开发人员受苦受难，软件本身的生命周期更是受到严重威胁。这里我将针对在微软dotNet平台上做应用开发系统的一般架构流程设计做一个粗浅的讨论。</span></p>
<p class="artcon"><span class="Apple-style-span">总体设计图</span></p>
<p class="artcon" align="center"><span class="Apple-style-span"><img src="http://www.uml.org.cn/zjjs/images/201210254.jpg" alt="" /></span></p>
<p class="artdir1"><span class="Apple-style-span">表示层</span></p>
<p class="artcon"><span class="Apple-style-span">表示层由UI（User Interface）和UI控制逻辑组成。</span></p>
<p class="artcon"><span class="Apple-style-span">UI（User Interface）</span></p>
<p class="artcon"><span class="Apple-style-span">UI是客户端的用户界面，负责从用户方接收命令，请求，数据，传递给业务层处理，然后将结果呈现出来。根据客户端的不同我们大体将应用程序分为BS（Browser-Server） 浏览器结构，CS（Client-Server）桌面客户端结构。</span></p>
<p class="artcon"><span class="Apple-style-span">BS的优点是无需操心客户端，只需要部署维护好服务器即可。CS的优点在于强大的界面交互表达能力。RIA（Rich Internet Application）是为了融合这两种结构优点的一种技术，它依赖在客户端一次性安装一个通用解释器之后即获得强大的界面交互表达能力和无需部署具体客户端的方便性。具体的实现技术很多，例如微软的SmartClient， Avalon； Macromedia的Flex；以JS为基础的Bindows；Ajax等等很多。</span></p>
<p class="artcon"><span class="Apple-style-span">UI控制逻辑</span></p>
<p class="artcon"><span class="Apple-style-span">UI控制逻辑负责处理UI和业务层之间的数据交互，UI之间状态流程的控制，同时负责简单的数据验证和格式化等功能。具体的说在dotNet事件驱动的编程模型下，UI控制逻辑被自然的实现在了事件函数中，例如PageLoad事件函数，ButtonClick事件函数。在这些事件函数中，主要任务就是做UI控件与业务实体的数据交换与业务调用，但面对大量的数据交换工作量与维护量就成了最大的问题。而在复杂应用的系统中，状态与流程的管理是必须要考虑的因素，它们同样是业务逻辑的一部分，如果不加以封装的直接写在事件函数中将导致业务依赖表示层。下面分别讨论这两个问题。</span></p>
<p class="artcon"><span class="Apple-style-span">1. 1.UI与业务实体之间的数据交互</span></p>
<p class="artcon"><span class="Apple-style-span">此阶段负责数据交换的业务实体称为DTO（Data Transfer Object），处理输入时我们从UI控件的获得数据填入DTO再向下传播，处理输出时用户发出请求业务层会将数据以DTO的形式返出再赋给UI控件展现。因此需要一种方式来自动解决这样的来回赋值问题。遗憾的是dotNet下的不少控件虽然支持数据绑定但仍然没有一个现成完整的解决办法。我们可以自己设计一个Adapter按照某种映射关系来自动处理这样的绑定，这样的映射关系最好是UI控件与DTO属性的事先命名约定，以此种方式的约定作为映射关系无需增加任何配置文件和配置工作即可实现。</span></p>
<p class="artcon"><span class="Apple-style-span">2. 2.状态与流程的管理</span></p>
<p class="artcon"><span class="Apple-style-span">既然是业务逻辑的一部分就不应该耦合再表示层当中。MVC（Model-View-Controller）模式提供了实现这一目标的方法。Controller是整个方案的核心，它是一个流程管理器，来自UI所有的命令与数据经过Controller分发给业务层或其他UI，这样我们可以把流程，权限等逻辑单独封装，例如配置文件中，达到最大化的业务重用。dotNet下MVC的方案并不像Java下有那么多选择，目前有以下几种选择：</span></p>
<p class="artcon"><span class="Apple-style-span">微软的UIPAB，它可以处理bs，cs下的流程跳转，可以使得相同的业务系统有webform和winform不同的展现方式。</span></p>
<p class="artcon"><span class="Apple-style-span">开源的Mavrick.Net，它只适用于Asp.Net应用程序，它对流程，国际化，页面包装，xslt页面转换提供了很好的支持。</span></p>
<p class="artcon"><span class="Apple-style-span">开源的Lattis，同样只适用于Asp.Net应用程序。</span></p>
<p class="artdir1"><span class="Apple-style-span">业务层</span></p>
<p class="artcon"><span class="Apple-style-span">业务层封装了实际业务逻辑，包含数据验证，事物处理，权限处理等业务相关操作，是整个应用系统的核心。因此设计一个能够真实反映实际需要的业务层是非常必要的，我们将实际业务具体分为业务数据与业务操作两部分。</span></p>
<p class="artcon"><span class="Apple-style-span">业务数据</span></p>
<p class="artcon"><span class="Apple-style-span">业务数据又是业务逻辑的核心，最终业务数据将以一种固定的格式表现于内存中，在系统的各个层次间传输，充当DTO角色。表达业务数据的方式一般分为两种Table Model和Domain Model。</span></p>
<p class="artcon"><span class="Apple-style-span">Table Model是将数据库中的表直接映射成为业务数据对象，这样的优点是适合于机器操作。只适合于业务需求与数据表对应关系很直接的需要快速开发的情况。通常我们选用Dataset或者强类型Dataset（Strong Typed Dataset），强类型Dataset支持编译时的类型检查，效率上要略高于普通Dataset。Dataset有很多方便的特性：无需自己编写维护类，支持序列化，数据副本保存，支持数据集合，对控件绑定支持效果好。但缺点也是明显，复杂数据表现不直观，做为DTO在各个层次间传输，尤其是分布式环境，庞大的体积，相对缓慢的实例化对于性能造成很大压力。</span></p>
<p class="artcon"><span class="Apple-style-span">Domain Model则是根据实际业务按照现实方式用OO思想建模，这样很适合业务复杂的系统。通常采用自定义数据实体（Custom Data Entity）方式表达。自定义数据实体，有着良好的性能，编译时的类型检查，数据表现方式非常直观符合实际业务的操作方式等优点，但需要自己定义维护类，在分布式环境下需要自己编写序列化方法。</span></p>
<p class="artcon"><span class="Apple-style-span">综合各种因素考虑，虽然业务简单对应直接的系统我们以Table Model建模开发效率很高但难免保证系统日后不会变的复杂，因此出于复用性，扩展性，性能等方面选用Domain Model建模为佳。</span></p>
<p class="artcon"><span class="Apple-style-span">业务操作</span></p>
<p class="artcon"><span class="Apple-style-span">业务操作负责对业务数据进行各种业务相关的处理，例如验证，流向，整合，事物，权限等，但它不负责有关对数据源的操作。它与业务数据的关系设计有2种方式。</span></p>
<p class="artcon"><span class="Apple-style-span">分离业务数据与业务操作，将业务数据单独封装到只有数据get，set的数据类中，这个数据类只充当DTO(注：DTO 数据传输对象，DAO数据访问对象)。将业务操作封装到独立的service类中与业务数据一起充当业务层。这样当系统不复杂的时候显的简单直观，而随着系统日益复杂，service类会变的杂乱，而将本身耦合紧密的数据与操作分离对于复用也是不利的因素。具体可参考Martin Fowler 的贫血的Domain Model一文，但我并不倾向于业务层直接访问数据源。</span></p>
<p class="artcon"><span class="Apple-style-span">整合业务数据与业务操作，将业务数据与相关的业务操作封装在一起称为业务实体，业务实体作为统一的业务层为表示层提供服务，同时也负责作为DTO在各个层次间传输，我倾向于这样完整的Domain Model设计方式，每个业务实体都可以做为一个单独组件形式存在，对于组件化复用有着莫大的好处。</span></p>
<p class="artcon"><span class="Apple-style-span">业务模块间的依赖</span></p>
<p class="artcon"><span class="Apple-style-span">各个业务模块之间的依赖，有时候会是难以解决的问题，尤其是一些可以重复利用的业务组件，例如权限管理，邮件发送等等。管理好这些各种不同的业务组件是我们的目标，IoC容器为我们提供了最完美的方案，通过它将不同的模块注入到系统中我们可以在不知道这个组件存在的情况下调用它。但目前只有不成熟的Spring.Net一个选择，我们只有一声叹息，因此也就不多讨论了。</span></p>
<p class="artdir1"><span class="Apple-style-span">业务数据访问层</span></p>
<p class="artcon"><span class="Apple-style-span">业务数据访问层是一个针对具体应用系统的专属层，它为业务层提供与数据源交互的最小操作方式，仅仅是业务层需要的数据访问接口，业务层完全依赖业务数据访问层所提供的服务。这些服务负责从业务层接收数据或返回业务实体，它屏蔽了实际业务数据与机器存储方式的差别。当然，数据层选用抽象的解决方案同样可以达到这个效果，但业务数据访问层最大的特点就是针对具体业务做抽象，而抽象的数据层访问方案是针对通用做抽象。往往业务中针对具体的设计生命力会变的更强，这样我们可以最大限度的保持了上层代码的复用性，当需要更换存储策略如果数据层访问差别太大，通过更换数据层无法解决问题的时候我们最多只需要更换业务数据访问层，而无需改变业务层。</span></p>
<p class="artcon"><span class="Apple-style-span">业务数据访问层由DAO（Data Access Object）层和系统服务层两部分组成。DAO层为每个业务实体提供最基本的数据访问服务，系统服务层为系统全局提供与业务关系不大的通用数据访问服务，这两层处于系统中的同一个层次位置。</span></p>
<p class="artcon"><span class="Apple-style-span">业务层与业务数据访问层关系图</span></p>
<p class="artcon" align="center"><span class="Apple-style-span"><img src="http://www.uml.org.cn/zjjs/images/2012102541.jpg" alt="" /></span></p>
<p class="artdir1"><span class="Apple-style-span">数据层</span></p>
<p class="artcon"><span class="Apple-style-span">数据层的宗旨就是为数据源提供一个可供外界访问的接口，我们应该选用一种能够提供数据源无关的抽象数据访问接口并通过在其下挂接各种不同的DataProviador来访问数据源的数据层组件，这样做便于移植到不同的数据源上。目前有以下3种数据层方案：</span></p>
<p class="artcon"><span class="Apple-style-span">1. 1. 封装ADO.Net</span></p>
<p class="artcon"><span class="Apple-style-span">这些数据访问组件都是基于ADO.Net的浅封装，它的优点在于封装层次低所以速度最快，我们可以手动组织sql语句用来适应复杂的操作以及个性的优化等。缺点是无法直接处理自定义数据实体方式的业务实体对象，需要将业务实体中的数据属性以参数形式传入传出。这样的方式虽然最为保险，但随着系统规模增大，开发效率，质量，，后期的维护，二次开发都变成尤为突出的问题，对开发人员的要求会变的越来越高。另外对于事物操作封装不是很好，无法提供声明性事物，经常会在业务层出现访问数据层的需要。这样的组件目前应用的很广泛，例如微软在EnterpriseLibrary中提供的DAAB（Data Access Application Block），还有以前的DAAB3.1。EnterpriseLibrary是个成熟的产品，包括了数据访问，异常，日志，缓存，加密，配置,安全等组件做为通用服务非常适合。</span></p>
<p class="artcon"><span class="Apple-style-span">2. 2. OR-Mapping组件</span></p>
<p class="artcon"><span class="Apple-style-span">ORM是最好的数据持久解决方案，它的优点在于能够以面向对象的方式操纵数据，因此可以直接处理自定义数据实体的业务对象，我们根本不用操心sql语句以及底层存储方式，这样极大的简化的代码提高了开发效率，对于日后维护扩展都带来极大的便利。缺点在于屏蔽了底层使得我们无法针对具体数据源做优化，而且对于复杂关联的sql操作有些力不从心，同时性能也差一些但辅助以缓存情况会好很多，而在dotNet下最大的问题就是没有一个成熟便宜的ORM产品供我们使用，全部都是beta版本和商业版本。这些版本或多或少都存在一些问题，以至于真正应用中需要经过仔细考察。例如NHibernate，Gentle.Net，XPO，Grove.Net等等非常多。</span></p>
<p class="artcon"><span class="Apple-style-span">3. 3. DataMapper（SqlMapper）</span></p>
<p class="artcon"><span class="Apple-style-span">SqlMapper为以上两种方式提供了一个折中的选择，它可以以面向对象的方式直接处理自定义数据实体的业务对象，同时可以根据与数据源与业务实体的映射关系执行手写的sql语句，这样完全使得我们可以针对具体数据源做优化，对于复杂操作同样可以胜任。目前只有iBatis.Net一个产品，它是一个java移至的开源项目，已经比较成熟，可以在无需编译的情况下随意替换DAO。</span></p>
<p class="artcon"><span class="Apple-style-span">至此，整个架构方案的讨论已经完成，我们可以看出dotNet下可供选择的解决方案是那么的有限，反看Java世界，有那么多成熟可供利用的组件框架，流口水中...不过dotNet也正在走向成熟，我们需要时间等待。这个架构设计的思路只代表了我个人的理解，而且也并不是说所有的开发都是这么一套方案，在具体环境中需要做具体的调整。希望能起到一个抛砖引玉的作用。我的邮箱是i-simon AT msn.com，由于我经验尚浅，有不正确或不足的地方欢迎指正讨论，另外本文将根据技术的最新进展持续更新。</span></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 15:30:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 07:30:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ba%94%e7%94%a8%e7%b3%bb%e7%bb%9f%e6%9e%b6%e6%9e%84%e8%ae%be%e8%ae%a1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web%e6%9c%8d%e5%8a%a1"><![CDATA[web服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1520098173;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:51;}i:1;a:1:{s:2:"id";i:31;}i:2;a:1:{s:2:"id";i:27;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>设计模式总结</title>
		<link>https://www.idatavisual.com/?p=47</link>
		<pubDate>Wed, 03 Jan 2018 07:32:24 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=47</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">1.工厂模式:</span>
接口：表示共性的特征时用接口，一般在不知道是否用抽象类或接口时用接口，因为接口可以继承抽象类这样更灵活

抽象类：一般表示某种确实存在的东西时用抽象类

<img src="http://img.blog.csdn.net/20130609165859296" alt="" />

<span class="Apple-style-span">抽象工厂模式（AbstractFactory）：提供一个创建一系列或相关依赖类的接口，而无需指定它们的具体类。</span>

<img src="http://img.blog.csdn.net/20130609164529281" alt="" />

<span class="Apple-style-span">单例模式（Singleton）：保证一个类仅有一个实例，并且提供一个访问它的全局访问点。</span>

<img src="http://img.blog.csdn.net/20130609164613078" alt="" />

<span class="Apple-style-span">2.代理模式：</span>

<img src="http://img.blog.csdn.net/20130609165037750" alt="" />

<span class="Apple-style-span">3.责任链模式：</span>

<img src="http://img.blog.csdn.net/20130604105608203" alt="" />

<span class="Apple-style-span"> Handler：定义请求处理的接口，并定义指向下一个请求处理对象的引用。</span>

<span class="Apple-style-span"> ConcreteHandler：从抽象请求处理者派生，并实现具体的请求处理方法。</span>

<span class="Apple-style-span">&lt;2&gt;树形责任链图</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130604114342703" alt="" />  </span>

<span class="Apple-style-span">&lt;3&gt;复杂请求责任链</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130604114346625" alt="" />
</span>

<span class="Apple-style-span">小结：</span>

责任链模式在请求 - 处理程序中，<span class="Apple-style-span">弱化了二者之间的关联</span>，降低了请求发生者和请求处理者之间的耦合程度，<span class="Apple-style-span">请求发生者无需知道一个请求具体由哪个对象进行处理，只是把请求交给责任链</span>。同时这也使得程序中责任划分更加的细化，每个请求处理者对象只有一种职责，只能处理对应类型的请求，这符合面向对象的设计原则，不同的请求处理对象之间只是通过一个引用进行关联。

同时责任链模式也会带来一些缺点，首先，<span class="Apple-style-span">请求不能保证都能被处理</span>，如果在责任链中找不到一个合适的请求处理对象，则请求不能被处理。其次，<span class="Apple-style-span">请求处理的速度可能相对较慢</span>，由于请求发生者并不知道请求具体应该交给哪个请求处理对象处理，请求需要在责任链中遍历，直到找到一个合适的请求处理对象。

<span class="Apple-style-span">4.策略模式：</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130609165143437" alt="" />
</span>

<span class="Apple-style-span">5原型模式（Prototype）：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130609165230406" alt="" />
</span>

<span class="Apple-style-span">6.</span><span class="Apple-style-span">创建者模式（Builder）：将一个复杂对象的构建和表示分离，使得同样的构建过程可以构建不同的表示</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130609165336390" alt="" />
</span>

<span class="Apple-style-span">参考：<a href="http://www.ibm.com/developerworks/cn/websphere/book_wps_pattern/7/">http://www.ibm.com/developerworks/cn/websphere/book_wps_pattern/7/</a></span>

<span class="Apple-style-span">      <a href="http://www.cnblogs.com/doit8791/archive/2012/05/09/2493389.html">http://www.cnblogs.com/doit8791/archive/2012/05/09/2493389.html</a>
</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 15:32:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 07:32:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%e6%80%bb%e7%bb%93]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%8d%e5%8a%a1%e5%99%a8"><![CDATA[服务器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521849617;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:31;}i:1;a:1:{s:2:"id";i:45;}i:2;a:1:{s:2:"id";i:51;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>负载均衡 ---- 概念认识篇</title>
		<link>https://www.idatavisual.com/?p=49</link>
		<pubDate>Wed, 03 Jan 2018 07:33:23 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=49</guid>
		<description></description>
		<content:encoded><![CDATA[前面有1000个妞等着你来泡，这1000个妞等久了有可能不耐烦，就会走了不让你泡了。你要想同时泡1000个妞，那你就得有分身的能力才行。

只要有了分身的能力，你就再也不用担心妞泡不过来了。

&nbsp;

结论得出：负载均衡 == <span class="Apple-style-span">分身</span>的能力

&nbsp;

你的分身把这个妞泡准了，你这个分身就要跟她一直谈下去，其他的妞过来了你肯定要拒绝丫。

你没泡成功，当然是去寻找下一个目标。

&nbsp;

结论得出：负载均衡还得<span class="Apple-style-span">保持通话</span>

&nbsp;

你的分身也偶尔发发小脾气，没激情来泡妞的时候，你就要去修理他，去找他聊聊心。

&nbsp;

结论得出：负载均衡还要懂得<span class="Apple-style-span">修理</span>他（T出泡妞队营）

&nbsp;

尼玛负载均衡就为了泡妞，我们果断一起踩扁它。

&nbsp;

负载均衡现在市场上面已经有很多成熟的硬件设备，可以掏点钱就可以买了。当然这费用嘛......

如果你闲费用贵，自己瞎折腾也好，来体现你的技术是多么牛xx， 你就用一台服务器，服务器里面装个nginx就可以解决了。

&nbsp;

尼玛负载均衡就这么简单，我们继续一起踩扁它。

&nbsp;

要说道每个分身的能力如何复制过去，就如每一台电脑要泡妞怎么办，是不是要具有相同的代码。怎么办？

1. 共享主人的经验

2. 把主人的经验复制过来

3. 边复制边共享

转成计算机就是说：

1. 文件共享

2. 文件同步

3. 分布式文件系统

&nbsp;

当然这些都有实际成熟的工具：

1. 文件共享（大家都清楚）

2. 文件同步 （rsync）

3.  分布式文件系统 （moosefs）

&nbsp;

他们都有各自的优缺点，选择适合自己的就行。

&nbsp;

尼玛负载均衡都有工具，真的是很简单，来一起踩扁它吧。

http://www.cnblogs.com/oshine/p/3941092.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 15:33:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 07:33:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1-%e6%a6%82%e5%bf%b5%e8%ae%a4%e8%af%86%e7%af%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web%e6%9c%8d%e5%8a%a1"><![CDATA[web服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0f4e1e8542e558bada4a2641ab70a25f]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_531a048d9f00016bcd1bd959dd781394]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_5a3bee8aec0d199dbfd322bc8ba0f455]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_2327867535955f8cc8ee41bf19bd5531]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1518331456;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:51;}i:1;a:1:{s:2:"id";i:171;}i:2;a:1:{s:2:"id";i:198;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>负载均衡总结(百科)</title>
		<link>https://www.idatavisual.com/?p=51</link>
		<pubDate>Wed, 03 Jan 2018 07:35:08 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=51</guid>
		<description></description>
		<content:encoded><![CDATA[概念：
负载均衡 （Load Balancing）建立在现有网络结构之上，提供了一种廉价有效透明的方法 -&gt; 扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。


负载均衡（又称为负载分担）
是将负载（工作任务）进行平衡、分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。


需要注意：
负载均衡设备不是基础网络设备，而是一种性能优化设备。
对于网络应用而言，当网络应用的访问量不断增长，单个处理单元无法满足负载需求时，网络应用流量将要出现瓶颈时，负载均衡才会起到作用


两个方面意义：
1.单个重负载的运算分担到多台节点设备上做并行处理，每个节点设备处理结束后，将结果汇总，返回给用户，系统处理能力得到大幅度提高，这就是常说的集群（clustering）技术。
2.大量的并发访问或数据流量分担到多台节点设备上分别处理，减少用户等待响应的时间，这主要针对Web服务器、FTP服务器、企业关键应用服务器等网络应用。
通常，负载均衡会根据网络的不同层次（网络七层）来划分。


详细信息
1.算法
提供多个WAN ports可作多种负载平衡算法则，企业可依自身需求自行设定负载平衡规则。算法则有：
◎ 依序Round Robin
◎ 比重Weighted Round Robin
◎ 流量比例Traffic
◎ 使用者端User
◎ 应用别Application
◎ 联机数量Session
◎ 服务别Service
◎ 自动分配Auto Mode
2.功能
Server Load Balancing
VPN Trunk 负载均衡
QoS（带宽管理）
内容过滤(采用关键字进行内容过滤，可保护内网不受色情、暴力、反动、迷信等信息的入侵和干扰)
其他功能


四个分类
1.软/硬件
2.本地/全局


部署方式

1.路由模式（推荐）

<img src="http://img.blog.csdn.net/20130705173304625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VuX2xvdmVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" />

路由模式的部署方式如上图。服务器的网关必须设置成负载均衡机的LAN口地址，且与WAN口分署不同的逻辑网络。因此所有返回的流量也都经过负载均衡。这种方式对网络的改动小，能均衡任何下行流量。

2.桥接模式

<img src="http://img.blog.csdn.net/20130705173352296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VuX2xvdmVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" />

桥接模式配置简单，不改变现有网络。负载均衡的WAN口和LAN口分别连接上行设备和下行服务器。LAN
不需要配置IP（WAN口与LAN口是桥连接），所有的服务器与负载均衡均在同一逻辑网络中

3.服务直接返回模式

<img src="http://img.blog.csdn.net/20130705173447781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VuX2xvdmVy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" />

这种安装方式负载均衡的LAN口不使用，WAN口与服务器在同一个网络中，互联网的客户端访问负载均衡的虚IP（VIP），
虚IP对应负载均衡机的WAN口，负载均衡根据策略将流量分发到服务器上，服务器直接响应客户端的请求。
因此对于客户端而言，响应他的IP不是负载均衡机的虚IP（VIP），而是服务器自身的IP地址。
也就是说返回的流量是不经过负载均衡的。因此这种方式适用大流量高带宽要求的服务。
主要应用
1．DNS负载均衡，在DNS中为多个地址配置同一个名字，因而查询这个名字的客户机将得到其中一个地址，从而使得不同的客户访问不同的服务器，达到负载均衡的目的。
DNS负载均衡是一种简单而有效的方法，但是它不能区分服务器的差异，也不能反映服务器的当前运行状态。
2．代理服务器负载均衡 使用代理服务器，可以将请求转发给内部的服务器，使用这种加速模式显然可以提升静态网页的访问速度。
然而，也可以考虑这样一种技术，使用代理服务器将请求均匀转发给多台服务器，从而达到负载均衡的目的。
3．地址转换网关负载均衡 支持负载均衡的地址转换网关，
可以将一个外部IP地址映射为多个内部IP地址，对每次TCP连接请求动态使用其中一个内部地址，达到负载均衡的目的。
4．协议内部支持负载均衡，有的协议内部支持与负载均衡相关的功能，例如HTTP协议中的重定向能力等，HTTP运行于TCP连接的最高层。
5．NAT负载均衡NAT（Network Address Translation网络地址转换）简单地说就是将一个IP地址转换为另一个IP地址，
一般用于未经注册的内部地址与合法的、已获注册的Internet IP地址间进行转换。适用于解决Internet IP地址紧张、不想让网络外部知道内部网络结构等的场合下。
6．反向代理负载均衡普通代理方式是代理内部网络用户访问internet上服务器的连接请求，
客户端必须指定代理服务器，并将本来要直接发送到internet上服务器的连接请求发送给代理服务器处理。
反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，
并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。
反向代理负载均衡技术是把将来自internet上的连接请求以反向代理的方式动态地转发给内部网络上的多台服务器进行处理，从而达到负载均衡的目的。
7．混合型负载均衡在有些大型网络，由于多个服务器群内硬件设备、各自的规模、提供的服务等的差异，
可以考虑给每个服务器群采用最合适的负载均衡方式，然后又在这多个服务器群间再一次负载均衡或群集起来以一个整体向外界提供服务
（即把这多个服务器群当做一个新的服务器群），从而达到最佳的性能。
将这种方式称之为混合型负载均衡。此种方式有时也用于单台均衡设备的性能不能满足大量连接请求的情况下。


详细配置(略)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 15:35:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 07:35:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e6%80%bb%e7%bb%93%e7%99%be%e7%a7%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web%e6%9c%8d%e5%8a%a1"><![CDATA[web服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1523814030;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:27;}i:1;a:1:{s:2:"id";i:141;}i:2;a:1:{s:2:"id";i:45;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Yii学习系列之yii大致结构</title>
		<link>https://www.idatavisual.com/?p=64</link>
		<pubDate>Mon, 01 Jan 2018 07:59:57 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=64</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div>
<div>                                                                                                                   组件架构</div>
<div></div>
<div><img src="http://img.blog.csdn.net/20140911152347968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2FtZWtlbmxvdmU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" /></div>
<div></div>
</div>
<div></div>
<div></div>
<div>                                                                                                                                  基础知识</div>
<div></div>
<div>
<h1>模型-视图-控制器 (MVC)</h1>
</div>
<div>Yii 使用了 Web 开发中广泛采用的模型-视图-控制器（MVC）设计模式。 MVC的目标是将业务逻辑从用户界面的考虑中分离，这样开发者就可以更容易地改变每一部分而不会影响其他。 在 MVC中，模型代表信息（数据）和业务规则；视图包含了用户界面元素，例如文本，表单等； 控制器管理模型和视图中的通信。</div>
<div></div>
<div>
<h2>一个典型的工作流</h2>
</div>
<div>下图展示了一个 Yii 应用在处理用户请求时典型的工作流</div>
<div><img src="http://img.blog.csdn.net/20140911152654277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2FtZWtlbmxvdmU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" /></div>
<div></div>
<div>
<ol>
 	<li>用户发出了访问 URL http://www.example.com/index.php?r=post/show&amp;id=1 的请求， Web 服务器通过执行入口脚本 index.php 处理此请求。</li>
 	<li>入口脚本创建了一个 <a href="http://www.yiichina.com/guide/basics.application" target="_blank" rel="noopener">应用</a> 实例并执行。</li>
 	<li>应用从一个叫做 request 的 <a href="http://www.yiichina.com/guide/basics.application#application-component" target="_blank" rel="noopener">应用组件</a> 中获得了用户请求的详细信息。</li>
 	<li>应用在一个名叫 urlManager 的应用组件的帮助下，决定请求的 <a href="http://www.yiichina.com/guide/basics.controller" target="_blank" rel="noopener">控制器</a> 和 <a href="http://www.yiichina.com/guide/basics.controller#action" target="_blank" rel="noopener">动作</a> 。在这个例子中，控制器是 post，它代表 PostController 类； 动作是 show ，其实际含义由控制器决定。</li>
 	<li>应用创建了一个所请求控制器的实例以进一步处理用户请求。控制器决定了动作 show 指向控制器类中的一个名为actionShow 的方法。然后它创建并持行了与动作关联的过滤器（例如访问控制，基准测试）。 如果过滤器允许，动作将被执行。</li>
 	<li>动作从数据库中读取一个 ID 为 1 的 Post <a href="http://www.yiichina.com/guide/basics.model" target="_blank" rel="noopener">模型</a>。</li>
 	<li>动作通过 Post 模型渲染一个名为 show 的 <a href="http://www.yiichina.com/guide/basics.view" target="_blank" rel="noopener">视图</a>。</li>
 	<li>视图读取并显示 Post 模型的属性。</li>
 	<li>视图执行一些 <a href="http://www.yiichina.com/guide/basics.view#widget" target="_blank" rel="noopener">小物件</a>。</li>
 	<li>视图的渲染结果被插入一个 <a href="http://www.yiichina.com/guide/basics.view#layout" target="_blank" rel="noopener">布局</a>。</li>
 	<li>动作完成视图渲染并将其呈现给用户。</li>
</ol>
&nbsp;

</div>
<div>
<h1>入口脚本</h1>
入口脚本是处理用户的初始引导PHP脚本。它是唯一一个最终用户可直接请求执行的PHP脚本

</div>
<div>
<pre>// 在生产环境中请删除此行defined('YII_DEBUG') or define('YII_DEBUG',true);
// 包含Yii引导文件require_once('path/to/yii/framework/yii.php');
// 创建一个应用实例并执行$configFile='path/to/config/file.php';
Yii::createWebApplication($configFile)-&gt;run();</pre>
</div>
<div>脚本首先包含了 Yii 框架的引导文件 yii.php。然后他按指定的配置创建了一个Web 应用实例并执行。</div>
<div>
<h2>调试模式</h2>
</div>
<div>在包含 yii.php 文件之前定义此常量YII_DEBUG 为true</div>
<div></div>
<div>
<h1>应用</h1>
</div>
<div>指请求处理中的执行上下文。</div>
<div>1.主要任务是分析用户请求并将其分派到合适的控制器中以作进一步处理。</div>
<div> 2.同时作为服务中心，维护应用级别的配置。鉴于此，应用也叫做前端控制器。</div>
<div></div>
<div>
<h2>应用配置</h2>
</div>
<div>1.默认情况下，应用是一个 <a href="http://www.yiichina.com/api/CWebApplication" target="_blank" rel="noopener">CWebApplication</a> 的实例。要自定义它，我们通常需要提供一个配置文件 （或数组） 以创建应用实例时初始化其属性值。</div>
<div>2.自定义应用的另一种方式是继承 <a href="http://www.yiichina.com/api/CWebApplication" target="_blank" rel="noopener">CWebApplication</a>。</div>
<div></div>
<div>

配置是一个键值对数组。每个键和应用实例属性一一对应，每个值即相应属性的初始值。 例如，如下的配置设定了<a href="http://www.yiichina.com/api/CWebApplication" target="_blank" rel="noopener">CWebApplication</a>应用的<a href="http://www.yiichina.com/api/CApplication#name" target="_blank" rel="noopener">name</a> 和 <a href="http://www.yiichina.com/api/CWebApplication#defaultController" target="_blank" rel="noopener">defaultController</a> 属性的值。
<div>
<div>
<pre>array(
    'name'=&gt;'Yii Framework',
    'defaultController'=&gt;'site',
)</pre>
</div>
</div>
</div>
<div>通常在一个单独的PHP 脚本（e.g.protected/config/main.php）中保存这些配置</div>
<div>要应用此配置，我们将配置文件的名字作为参数传递给应用的构造器</div>
<div>
<pre>$app=Yii::createWebApplication($webApplication,$configFile);</pre>
</div>
<div>
<h2>应用基础目录</h2>
</div>
<div>指包含了所有安全敏感的PHP脚本和数据的根目录</div>
<div>认状态下，它是一个位于同入口脚本同级目录的protected 的子目录</div>
<div>应用基础目录下的内容应该保护起来防止网站访客直接访问</div>
<div></div>
<div>

可以通过在基础目录中放置一个.htaccess 文件很简单的实现。 .htaccess 内容如下：
<pre>deny from all
</pre>
</div>
<div>
<h2>应用组件</h2>
</div>
<div>应用管理了一系列应用组件，每个组件实现一特定功能。 例如，应用通过 <a href="http://www.yiichina.com/api/CUrlManager" target="_blank" rel="noopener">CUrlManager</a> 和 <a href="http://www.yiichina.com/api/CHttpRequest" target="_blank" rel="noopener">CHttpRequest</a> 的帮助解析来自用户的请求。</div>
<div>

通过配置config/main.php的 <a href="http://www.yiichina.com/api/CApplication#components" target="_blank" rel="noopener">components</a> 属性， 我们可以自定义应用中用到的任何组件类及其属性值。例如，我们可以配置应用的<a href="http://www.yiichina.com/api/CMemCache" target="_blank" rel="noopener">CMemCache</a> 组件， 这样它就可以使用多个 memcache 服务器实现缓存：
<div>
<div>
<pre>array(
    'components'=&gt;array(
        'cache'=&gt;array(
            'class'=&gt;'CMemCache',
            'servers'=&gt;array(
                array('host'=&gt;'server1', 'port'=&gt;11211, 'weight'=&gt;60),
                array('host'=&gt;'server2', 'port'=&gt;11211, 'weight'=&gt;40),
            ),
        ),
    ),
)</pre>
</div>
</div>
</div>
<div>访问一个应用组件</div>
<div>使用 Yii::app()-&gt;ComponentID ，其中的 ComponentID 是指组件的ID（例如Yii::app()-&gt;db）</div>
<div>
<h2>核心应用组件</h2>
</div>
<div>Yii 预定义了一系列核心应用组件，提供常见 Web 应用中所用的功能</div>
<div>
<ul>
 	<li><a href="http://www.yiichina.com/api/CWebApplication#assetManager" target="_blank" rel="noopener">assetManager</a>: <a href="http://www.yiichina.com/api/CAssetManager" target="_blank" rel="noopener">CAssetManager</a> - 管理私有资源文件的发布。</li>
 	<li><a href="http://www.yiichina.com/api/CWebApplication#authManager" target="_blank" rel="noopener">authManager</a>: <a href="http://www.yiichina.com/api/CAuthManager" target="_blank" rel="noopener">CAuthManager</a> - 管理基于角色的访问控制 (RBAC).</li>
 	<li><a href="http://www.yiichina.com/api/CApplication#cache" target="_blank" rel="noopener">cache</a>: <a href="http://www.yiichina.com/api/CCache" target="_blank" rel="noopener">CCache</a> - 提供数据缓存功能。注意，你必须指定实际的类（例如<a href="http://www.yiichina.com/api/CMemCache" target="_blank" rel="noopener">CMemCache</a>, <a href="http://www.yiichina.com/api/CDbCache" target="_blank" rel="noopener">CDbCache</a>）。 否则，当你访问此组件时将返回 NULL。</li>
 	<li><a href="http://www.yiichina.com/api/CWebApplication#clientScript" target="_blank" rel="noopener">clientScript</a>: <a href="http://www.yiichina.com/api/CClientScript" target="_blank" rel="noopener">CClientScript</a> - 管理客户端脚本 (javascripts 和 CSS).</li>
 	<li><a href="http://www.yiichina.com/api/CApplication#coreMessages" target="_blank" rel="noopener">coreMessages</a>: <a href="http://www.yiichina.com/api/CPhpMessageSource" target="_blank" rel="noopener">CPhpMessageSource</a> - 提供 Yii 框架用到的核心信息的翻译。</li>
 	<li><a href="http://www.yiichina.com/api/CApplication#db" target="_blank" rel="noopener">db</a>: <a href="http://www.yiichina.com/api/CDbConnection" target="_blank" rel="noopener">CDbConnection</a> - 提供数据库连接。注意，使用此组件你必须配置其 <a href="http://www.yiichina.com/api/CDbConnection#connectionString" target="_blank" rel="noopener">connectionString</a> 属性。</li>
 	<li><a href="http://www.yiichina.com/api/CApplication#errorHandler" target="_blank" rel="noopener">errorHandler</a>: <a href="http://www.yiichina.com/api/CErrorHandler" target="_blank" rel="noopener">CErrorHandler</a> - 处理未捕获的 PHP 错误和异常。</li>
 	<li><a href="http://www.yiichina.com/api/CApplication#format" target="_blank" rel="noopener">format</a>: <a href="http://www.yiichina.com/api/CFormatter" target="_blank" rel="noopener">CFormatter</a> - 格式化数值显示。此功能从版本 1.1.0 起开始提供。</li>
 	<li><a href="http://www.yiichina.com/api/CApplication#messages" target="_blank" rel="noopener">messages</a>: <a href="http://www.yiichina.com/api/CPhpMessageSource" target="_blank" rel="noopener">CPhpMessageSource</a> - 提供Yii应用中使用的信息翻译。</li>
 	<li><a href="http://www.yiichina.com/api/CWebApplication#request" target="_blank" rel="noopener">request</a>: <a href="http://www.yiichina.com/api/CHttpRequest" target="_blank" rel="noopener">CHttpRequest</a> - 提供关于用户请求的信息。</li>
 	<li><a href="http://www.yiichina.com/api/CApplication#securityManager" target="_blank" rel="noopener">securityManager</a>: <a href="http://www.yiichina.com/api/CSecurityManager" target="_blank" rel="noopener">CSecurityManager</a> - 提供安全相关的服务，例如散列，加密。</li>
 	<li><a href="http://www.yiichina.com/api/CWebApplication#session" target="_blank" rel="noopener">session</a>: <a href="http://www.yiichina.com/api/CHttpSession" target="_blank" rel="noopener">CHttpSession</a> - 提供session相关的功能。</li>
 	<li><a href="http://www.yiichina.com/api/CApplication#statePersister" target="_blank" rel="noopener">statePersister</a>: <a href="http://www.yiichina.com/api/CStatePersister" target="_blank" rel="noopener">CStatePersister</a> - 提供全局状态持久方法。</li>
 	<li><a href="http://www.yiichina.com/api/CWebApplication#urlManager" target="_blank" rel="noopener">urlManager</a>: <a href="http://www.yiichina.com/api/CUrlManager" target="_blank" rel="noopener">CUrlManager</a> - 提供 URL 解析和创建相关功能</li>
 	<li><a href="http://www.yiichina.com/api/CWebApplication#user" target="_blank" rel="noopener">user</a>: <a href="http://www.yiichina.com/api/CWebUser" target="_blank" rel="noopener">CWebUser</a> - 提供当前用户的识别信息。</li>
 	<li><a href="http://www.yiichina.com/api/CWebApplication#themeManager" target="_blank" rel="noopener">themeManager</a>: <a href="http://www.yiichina.com/api/CThemeManager" target="_blank" rel="noopener">CThemeManager</a> - 管理主题。</li>
</ul>
</div>
<div>
<h2>应用的生命周期</h2>
</div>
<div></div>
<div>

当处理用户请求时，应用将经历如下声明周期：
<ol>
 	<li>通过 <a href="http://www.yiichina.com/api/CApplication#preinit" target="_blank" rel="noopener">CApplication::preinit()</a> 预初始化应用；</li>
 	<li>设置类的自动装载器和错误处理      ；</li>
 	<li>注册核心类组件；</li>
 	<li>加载应用配置；  (main.php 对应2,3,4步骤)</li>
 	<li>通过 <a href="http://www.yiichina.com/api/CApplication#init" target="_blank" rel="noopener">CApplication::init()</a> 初始化应用:
<ul>
 	<li>注册应用行为；</li>
 	<li>载入静态应用组件；</li>
</ul>
</li>
 	<li>触发 <a href="http://www.yiichina.com/api/CApplication#onBeginRequest" target="_blank" rel="noopener">onBeginRequest</a> 事件；</li>
 	<li>处理用户请求:  (对应acitonCotroller)
<ul>
 	<li>解析用户请求；</li>
 	<li>创建控制器；</li>
 	<li>运行控制器；</li>
</ul>
</li>
 	<li>触发 <a href="http://www.yiichina.com/api/CApplication#onEndRequest" target="_blank" rel="noopener">onEndRequest</a> 事件。</li>
</ol>
</div>
<div>
<h1>控制器</h1>
</div>
<div></div>
<div>1.控制器 是 <a href="http://www.yiichina.com/api/CController" target="_blank" rel="noopener">CController</a> 或其子类的实例。它在当用户请求时由应用创建。</div>
<div>2.当一个控制器运行时，它执行所请求的动作，动作通常会引入所必要的模型并渲染相应的视图。</div>
<div> 3.动作 的最简形式，就是一个名字以 action 开头的控制器类方法。</div>
<div>4.当用户的请求未指定要执行的动作时，默认动作将被执行,默认的动作名为index。它可以通过设置 <a href="http://www.yiichina.com/api/CController#defaultAction" target="_blank" rel="noopener">CController::defaultAction</a> 修改。</div>
<div></div>
<div>
<h2>路由</h2>
控制器和动作以 ID 识别。控制器 ID 是一种 'path/to/xyz' 的格式，对应相应的控制器类文件protected/controllers/path/to/XyzController.php, 其中的标志 xyz 应被替换为实际的名字 (例如 post对应 protected/controllers/PostController.php). 动作 ID 是除去 action 前缀的动作方法名。例如，如果一个控制器类含有一个名为 actionEdit 的方法，则相应的动作 ID 为 edit

</div>
<div>用户以路由的形式请求特定的控制器和动作。路由是由控制器 ID 和动作 ID 连接起来的，两者以斜线分割。 例如，路由post/edit 代表 PostController 及其 edit 动作。默认情况下，URL http://hostname/index.php?r=post/edit 即请求此控制器和动作</div>
<div>从 1.0.3 版本开始，应用可以含有 <a href="http://www.yiichina.com/guide/basics.module" target="_blank" rel="noopener">模块（Module）</a>. 模块中，控制器动作的路由格式为moduleID/controllerID/actionID</div>
<div></div>
<div>
<h2>控制器实例化</h2>
</div>
<div>如果在 <a href="http://www.yiichina.com/api/CWebApplication#controllerMap" target="_blank" rel="noopener">CWebApplication::controllerMap</a> 中找到了 ID, 相应的控制器配置将被用于创建控制器实例</div>
<div>如果 ID 为 'path/to/xyz'的格式，控制器类的名字将判断为 XyzController， 相应的类文件则为protected/controllers/path/to/XyzController.php。</div>
<div></div>
<div>例如， 控制器 ID admin/user 将被解析为控制器类 UserController，类文件是 protected/controllers/admin/UserController.php。 如果类文件不存在，将触发一个 404 <a href="http://www.yiichina.com/api/CHttpException" target="_blank" rel="noopener">CHttpException</a> 异常</div>
<div></div>
<div>
<h2>动作</h2>
</div>
<div>1.被定义为一个以 action 单词作为前缀命名的方法。</div>
<div>2.更高级的方式是定义一个动作类并让控制器在收到请求时将其实例化。 这使得动作可以被复用，提高了可复用度。</div>
<div></div>
<div>

定义一个新动作类，可用如下代码：
<div>
<div>
<pre>class UpdateAction extends CAction{
    public function run()
    {
        // place the action logic here
    }}</pre>
</div>
</div>
</div>
<div>

为了让控制器注意到这个动作，我们要用如下方式覆盖控制器类的<a href="http://www.yiichina.com/api/CController#actions" target="_blank" rel="noopener">actions()</a> 方法：
<div>
<div>
<pre>class PostController extends CController{
    public function actions()
    {
        return array(
            'edit'=&gt;'application.controllers.post.UpdateAction',
        );
    }}</pre>
</div>
</div>
</div>
<div>我们使用了路径别名 application.controllers.post.UpdateAction 指定动作类文件为protected/controllers/post/UpdateAction.php.</div>
<div>

通过编写基于类的动作，我们可以将应用组织为模块的风格。例如， 如下目录结构可用于组织控制器相关代码：
<pre>protected/
    controllers/
        PostController.php
        UserController.php
        post/
            CreateAction.php
            ReadAction.php
            UpdateAction.php
        user/
            CreateAction.php
            ListAction.php
            ProfileAction.php
            UpdateAction.php
</pre>
</div>
<div>
<h3>动作参数绑定</h3>
</div>
<div>从版本 1.1.4 开始，Yii 提供了对自动动作参数绑定的支持。 就是说，控制器动作可以定义命名的参数，参数的值将由 Yii 自动从$_GET 填充。</div>
<div></div>
<div>

1.1.4之前，使用动作参数功能：从 $_GET 中提取参数时：
<div>
<div>
<pre>class PostController extends CController{
    public function actionCreate()
    {
        if(isset($_GET['category']))
            $category=(int)$_GET['category'];
        else
            throw new CHttpException(404,'invalid request');
 
        if(isset($_GET['language']))
            $language=$_GET['language'];
        else
            $language='en';
 
        // ... fun code starts here ...
    }}</pre>
</div>
</div>
1.1.4开始，使用动作参数功能：
<div>
<div>
<pre>class PostController extends CController{
    public function actionCreate($category, $language='en')
    {
        $category=(int)$category;
 
        // ... fun code starts here ...
    }}</pre>
</div>
</div>
</div>
<div>
<pre>class PostController extends CController{
    public function actionCreate(array $categories)   //参数强制转换为array类型
    {
        // Yii will make sure $categories be an array
    }}</pre>
</div>
<div>
<h2>过滤器</h2>
</div>
<div>1.过滤器是一段代码，可被配置在控制器动作执行之前或之后执行。</div>
<div></div>
<div>例如， 访问控制过滤器将被执行以确保在执行请求的动作之前用户已通过身份验证；</div>
<div>               性能过滤器可用于测量控制器执行所用的时间。</div>
<div>2.一个动作可以有多个过滤器。过滤器执行顺序为它们出现在过滤器列表中的顺序。</div>
<div>过滤器可以阻止动作及后面其他过滤器的执行</div>
<div>

过滤器可以定义为一个控制器类的方法。方法名必须以 filter 开头。例如，现有的 filterAccessControl 方法定义了一个名为 accessControl 的过滤器。 过滤器方法必须为如下结构：
<div>
<div>
<pre>public function filterAccessControl($filterChain){
    // 调用 $filterChain-&gt;run() 以继续后续过滤器与动作的执行。}</pre>
</div>
</div>
</div>
<div>其中的 $filterChain (过滤器链)是一个 <a href="http://www.yiichina.com/api/CFilterChain" target="_blank" rel="noopener">CFilterChain</a> 的实例，代表与所请求动作相关的过滤器列表。</div>
<div>在过滤器方法中， 可以调用 $filterChain-&gt;run() 以继续执行后续过滤器和动作。</div>
<div>

过滤器也可以是一个 <a href="http://www.yiichina.com/api/CFilter" target="_blank" rel="noopener">CFilter</a> 或其子类的实例。如下代码定义了一个新的过滤器类：
<div>
<div>
<pre>class PerformanceFilter extends CFilter{
    protected function preFilter($filterChain)
    {
        // 动作被执行之前应用的逻辑
        return true; // 如果动作不应被执行，此处返回 false
    }
 
    protected function postFilter($filterChain)
    {
        // 动作执行之后应用的逻辑
    }}</pre>
</div>
</div>
</div>
<div>

要对动作应用过滤器，我们需要覆盖 CController::filters() 方法。此方法应返回一个过滤器配置数组。例如：
<div>
<div>
<pre>class PostController extends CController{
    ......
    public function filters()
    {
        return array(
            'postOnly + edit, create'),
            array(
                'application.filters.PerformanceFilter - edit, create',
                'unit'=&gt;'second',
            ),
        );
    } }</pre>
</div>
</div>
</div>
<div>

上述代码指定了两个过滤器： postOnly 和 PerformanceFilter。 postOnly 过滤器是基于方法的（相应的过滤器方法已在 <a href="http://www.yiichina.com/api/CController" target="_blank" rel="noopener">CController</a> 中定义）； 而 performanceFilter 过滤器是基于对象的。路径别名application.filters.PerformanceFilter 指定过滤器类文件是protected/filters/PerformanceFilter。我们使用一个数组配置 PerformanceFilter ，这样它就可被用于初始化过滤器对象的属性值。此处 PerformanceFilter 的 unit 属性值将被初始为 second。

使用加减号，我们可指定哪些动作应该或不应该应用过滤器。上述代码中， postOnly 应只被应用于 edit 和 create 动作，而 PerformanceFilter 应被应用于 除了 edit 和 create 之外的动作。 如果过滤器配置中没有使用加减号，则此过滤器将被应用于所有动作。

</div>
<div>
<h1>模型</h1>
</div>
<div>1.模型是 <a href="http://www.yiichina.com/api/CModel" target="_blank" rel="noopener">CModel</a> 或其子类的实例。模型用于保持数据以及与其相关的业务逻辑。</div>
<div>2.模型是单独的数据对象。它可以是数据表中的一行，或者一个用户输入的表单。</div>
<div>  数据对象的每个字段对应模型中的一个属性。每个属性有一个标签（label）， 并且可以通过一系列规则进行验证。</div>
<div>3.Yii 实现了两种类型的模型：表单模型和 Active Record。二者均继承于相同的基类 <a href="http://www.yiichina.com/api/CModel" target="_blank" rel="noopener">CModel</a></div>
<div>  1&gt;表单模型是 <a href="http://www.yiichina.com/api/CFormModel" target="_blank" rel="noopener">CFormModel</a> 的实例。表单模型用于保持从用户的输入获取的数据。 这些数据经常被获取，使用，然后丢弃。例如，在一个登录页面中， 我们可以使用表单模型用于表示由最终用户提供的用户名和密码信息。更多详情，请参考 <a href="http://www.yiichina.com/guide/form.model" target="_blank" rel="noopener">使用表单</a>。</div>
2&gt;Active Record (AR) 是一种用于通过面向对象的风格抽象化数据库访问的设计模式。 每个 AR 对象是一个 <a href="http://www.yiichina.com/api/CActiveRecord" target="_blank" rel="noopener">CActiveRecord</a> 或其子类的实例。 数据对象的每个字段代表数据表中的一行。 行中的字段对应 AR 对象中的属性。更多关于 AR 的细节请阅读 <a href="http://www.yiichina.com/guide/database.ar" target="_blank" rel="noopener">Active Record</a>.
<div>
<h1>视图</h1>
</div>
<div>视图是一个包含了主要的用户交互元素的PHP脚本.建议这些语句不要去改变数据模型,且最好能够保持其单纯性(单纯作为视图)</div>
<div>实现逻辑和界面分离,大段的逻辑应该被放置于控制器或模型中,而不是视图中</div>
<div></div>
<div>视图有一个名字，当渲染(render)时，名字会被用于识别视图脚本文件。视图的名称与其视图脚本名称是一样的.例如:视图edit 的名称出自一个名为 edit.php 的脚本文件.要渲染时如，需通过传递视图的名称调用 <a href="http://www.yiichina.com/api/CController#render" target="_blank" rel="noopener">CController::render()</a>。这个方法将在 protected/views/ControllerID 目录下寻找对应的视图文件.如controller路径为：\protected\controllers\contract\applyController.php  对应 视图目录：protected\views\contract\apply\</div>
<div>在视图脚本内部,我们可以通过 $this 来访问当前控制器实例</div>
<div>

用以下 推送 的方式传递数据到视图里:
<div>
<div>
<pre>$this-&gt;render('edit', array(
    'varName1'=&gt;$value1,
    'varName2'=&gt;$value2,
));</pre>
</div>
</div>
</div>
<div>在以上的方式中, <a href="http://www.yiichina.com/api/CController#render" target="_blank" rel="noopener">render()</a> 方法将提取数组的第二个参数到变量里.其产生的结果是,在视图脚本里,我们可以直接访问变量 $varName1和 $varName2.</div>
<div></div>
<div>
<h2>布局</h2>
</div>
<div>1.布局是一种用来修饰视图的特殊的视图文件.它通常包含了用户界面中通用的一部分视图.例如:布局可以包含header和footer的部分,然后把内容嵌入其间.</div>
<div>其中的 $content 则储存了内容视图的渲染结果.</div>
<div>2.当使用 <a href="http://www.yiichina.com/api/CController#render" target="_blank" rel="noopener">render()</a> 时,布局被隐式应用.视图脚本 protected/views/layouts/main.php 是默认的布局文件.这可以通过改变 <a href="http://www.yiichina.com/api/CWebApplication#layout" target="_blank" rel="noopener">CWebApplication::layout</a> 或者 <a href="http://www.yiichina.com/api/CWebApplication#layout" target="_blank" rel="noopener">CWebApplication::layout</a> 进行自定义。</div>
<div>3.渲染一个不带布局的视图，则需调用 <a href="http://www.yiichina.com/api/CController#renderPartial" target="_blank" rel="noopener">renderPartial()</a></div>
<div>
<h2>小物件</h2>
</div>
<div>小物件是 <a href="http://www.yiichina.com/api/CWidget" target="_blank" rel="noopener">CWidget</a> 或其子类的实例.它是一个主要用于表现数据的组件.小物件通常内嵌于一个视图来产生一些复杂而独立的用户界面.例如,一个日历小物件可用于渲染一个复杂的日历界面.</div>
<div>小物件使用户界面更加可复用</div>
<div>

按如下视图脚本来使用一个小物件:
<div>
<div>
<pre>&lt;?php $this-&gt;beginWidget('path.to.WidgetClass'); ?&gt;
...可能会由小物件获取的内容主体...
&lt;?php $this-&gt;endWidget(); ?&gt;</pre>
</div>
</div>
或者
<div>
<div>
<pre>&lt;?php $this-&gt;widget('path.to.WidgetClass'); ?&gt;</pre>
</div>
</div>
</div>
<div>

后者用于不需要任何 body 内容的组件.

小物件可通过配置来定制它的表现.这是通过调用 <a href="http://www.yiichina.com/api/CBaseController#beginWidget" target="_blank" rel="noopener">CBaseController::beginWidget</a> 或 <a href="http://www.yiichina.com/api/CBaseController#widget" target="_blank" rel="noopener">CBaseController::widget</a> 设置其初始化属性值来完成的.例如,当使用 <a href="http://www.yiichina.com/api/CMaskedTextField" target="_blank" rel="noopener">CMaskedTextField</a> 小物件时,我们想指定被使用的 mask （可理解为一种输出格式，译者注）.我们通过传递一个携带这些属性初始化值的数组来实现.这里的数组的键是属性的名称,而数组的值则是小物件属性所对应的值.正如以下所示 :
<div>
<div>
<pre>&lt;?php$this-&gt;widget('CMaskedTextField',array(
    'mask'=&gt;'99/99/9999'));
?&gt;</pre>
</div>
</div>
继承 <a href="http://www.yiichina.com/api/CWidget" target="_blank" rel="noopener">CWidget</a> 并覆盖其<a href="http://www.yiichina.com/api/CWidget#init" target="_blank" rel="noopener">init()</a> 和 <a href="http://www.yiichina.com/api/CWidget#run" target="_blank" rel="noopener">run()</a> 方法,可以定义一个新的小物件:
<div>
<div>
<pre>class MyWidget extends CWidget{
    public function init()
    {
        // 此方法会被 CController::beginWidget() 调用
    }
 
    public function run()
    {
        // 此方法会被 CController::endWidget() 调用
    }}</pre>
</div>
</div>
小物件可以像一个控制器一样拥有它自己的视图.默认情况下,小物件的视图文件位于包含了小物件类文件目录的 views 子目录之下.这些视图可以通过调用 <a href="http://www.yiichina.com/api/CWidget#render" target="_blank" rel="noopener">CWidget::render()</a> 渲染,这一点和控制器很相似.唯一不同的是,小物件的视图没有布局文件支持。另外，小物件视图中的$this指向小物件实例而不是控制器实例。

</div>
<div>
<h2>系统视图</h2>
</div>
<div>系统视图的渲染通常用于展示 Yii 的错误和日志信息.例如,当用户请求来自一个不存在的控制器或动作时,Yii 会抛出一个异常来解释这个错误. 这时,Yii 就会使用一个特殊的系统视图来显示此错误</div>
<div>在 framework/views 下, Yii 提供了一系列默认的系统视图. 他们可以通过在 protected/views/system 下创建同名视图文件进行自定义</div>
<div>
<h1>组件</h1>
</div>
<div>Yii 应用建立于组件之上。</div>
<div>组件是 <a href="http://www.yiichina.com/api/CComponent" target="_blank" rel="noopener">CComponent</a> 或其子类的实例。</div>
<div>使用组件主要涉及访问它的属性以及触发或处理它的时间</div>
<div>基类 <a href="http://www.yiichina.com/api/CComponent" target="_blank" rel="noopener">CComponent</a> 指定了如何定义属性和事件</div>
<div>
<h2>组件属性</h2>
组件的属性就像对象的公共成员变量。它是可读写的。例如：
<div>
<div>
<pre>$width=$component-&gt;textWidth;     // 获取 textWidth 属性$component-&gt;enableCaching=true;   // 设置 enableCaching 属性</pre>
</div>
</div>
</div>
<div>

定义一个组件属性: 只需在组件类中定义一个公共成员变量即可。更灵活的方式是定义其 getter 和 setter 方法，例如：
<div>
<div>
<pre>public function getTextWidth(){
    return $this-&gt;_textWidth;
}
 
public function setTextWidth($value){
    $this-&gt;_textWidth=$value;
}</pre>
</div>
</div>
</div>
<div>上述代码定义了一个可写的属性名为 textWidth （名字是大小写不敏感的）。 当读取属性时，getTextWidth() 就会被调用，其返回值则成为属性值；相似的， 当写入属性时，setTextWidth() 被调用。如果 setter 方法没有定义，则属性将是只读的， 如果对其写入则会抛出一个异常。使用 getter 和 setter 方法定义一个属性有一个好处：即当读取或写入属性时， 可以执行额外的逻辑（例如，执行验证，触发事件）。</div>
<div>
<h2></h2>
组件事件组件事件是一些特殊的属性，它们使用一些称作 事件句柄 （event handlers）的方法作为其值。 分配一个方法到一个事件将会引起方法在事件被唤起处自动被调用。因此， 一个组件的行为可能会被一种在部件开发过程中不可预见的方式修改。

组件事件以 on 开头的命名方式定义。和属性通过 getter/setter 方法来定义的命名方式一样， 事件的名称是大小写不敏感的。以下代码定义了一个 onClicked 事件:
<div>
<div>
<pre>public function onClicked($event){
    $this-&gt;raiseEvent('onClicked', $event);
}</pre>
</div>
</div>
这里作为事件参数的 $event 是 <a href="http://www.yiichina.com/api/CEvent" target="_blank" rel="noopener">CEvent</a> 或其子类的实例。

我们可以附加一个方法到此 event，如下所示:
<div>
<div>
<pre>$component-&gt;onClicked=$callback;</pre>
</div>
</div>
这里的 $callback 指向了一个有效的 PHP 回调。它可以是一个全局函数也可以是类中的一个方法。 如果是后者，它必须以一个数组的方式提供: array($object,'methodName').

事件句柄的结构如下：
<div>
<div>
<pre>function methodName($event){
    ......
}</pre>
</div>
</div>
这里的 $event 即描述事件的参数（它来源于 raiseEvent() 调用）。$event 参数是 <a href="http://www.yiichina.com/api/CEvent" target="_blank" rel="noopener">CEvent</a> 或其子类的实例。 至少，它包含了关于谁触发了此事件的信息。

从版本 1.0.10 开始，事件句柄也可以是一个PHP 5.3以后支持的匿名函数。例如，
<div>
<div>
<pre>$component-&gt;onClicked=function($event) {
    ......
}</pre>
</div>
</div>
如果我们现在调用 onClicked()，onClicked 事件将被触发（在 onClicked() 中）， 附属的事件句柄将被自动调用。

一个事件可以绑定多个句柄。当事件触发时， 这些句柄将被按照它们绑定到事件时的顺序依次执行。如果句柄决定组织后续句柄被执行，它可以设置 <a href="http://www.yiichina.com/api/CEvent#handled" target="_blank" rel="noopener">$event-&gt;handled</a> 为 true

</div>
<div>
<h2>组件行为</h2>
<div></div>
<div>从版本 1.0.2 开始，组件已添加了对 <a href="http://en.wikipedia.org/wiki/Mixin" target="_blank" rel="noopener">mixin</a> 的支持，并可以绑定一个或多个行为。</div>
<div>行为 是一个对象，其方法可以被它绑定的部件通过收集功能的方式来实现 继承（inherited）， 而不是专有化继承(即普通的类继承).</div>
<div>一个部件可以以'多重继承'的方式实现多个行为的绑定.</div>
<div></div>
<div>行为类必须实现 <a href="http://www.yiichina.com/api/IBehavior" target="_blank" rel="noopener">IBehavior</a> 接口。 大多数行为可以继承自 <a href="http://www.yiichina.com/api/CBehavior" target="_blank" rel="noopener">CBehavior</a></div>
<div>如果一个行为需要绑定到一个 <a href="http://www.yiichina.com/guide/basics.model" target="_blank" rel="noopener">模型</a>, 它也可以从专为模型实现绑定特性的 <a href="http://www.yiichina.com/api/CModelBehavior" target="_blank" rel="noopener">CModelBehavior</a> 或 <a href="http://www.yiichina.com/api/CActiveRecordBehavior" target="_blank" rel="noopener">CActiveRecordBehavior</a> 继承。</div>
要使用一个行为，它必须首先通过调用此行为的 <a href="http://www.yiichina.com/api/IBehavior#attach" target="_blank" rel="noopener">attach()</a> 方法绑定到一个组件。然后我们就可以通过组件调用此行为方法：
<div>
<div>
<pre>// $name 在组件中实现了对行为的唯一识别$component-&gt;attachBehavior($name,$behavior);
// test() 是行为中的方法。$component-&gt;test();</pre>
</div>
</div>
已绑定的行为可以像一个组件中的普通属性一样访问。 例如，如果一个名为 tree 的行为绑定到了一个组件，我们就可以通过如下代码获得指向此行为的引用。
<div>
<div>
<pre>$behavior=$component-&gt;tree;
// 等于下行代码：// $behavior=$component-&gt;asa('tree');</pre>
</div>
</div>
行为是可以被临时禁止的,此时它的方法开就会在组件中失效.例如:
<div>
<div>
<pre>$component-&gt;disableBehavior($name);
// 下面的代码将抛出一个异常$component-&gt;test();
$component-&gt;enableBehavior($name);
// 现在就可以使用了$component-&gt;test();</pre>
</div>
</div>
两个同名行为绑定到同一个组件下是有可能的.在这种情况下,先绑定的行为则拥有优先权.

当和 <a href="http://www.yiichina.com/guide/basics.component#component-event" target="_blank" rel="noopener">events</a>, 一起使用时,行为会更加强大. 当行为被绑定到组件时,行为里的一些方法就可以绑定到组件的一些事件上了. 这样一来,行为就有机观察或者改变组件的常规执行流程.

自版本 1.1.0 开始，一个行为的属性也可以通过绑定到的组件来访问。 这些属性包含公共成员变量以及通过 getters 和/或 setters 方式设置的属性。 例如， 若一个行为有一个 xyz 的属性，此行为被绑定到组件 $a，然后我们可以使用表达式 $a-&gt;xyz 访问此行为的属性。

</div>
<div>
<h1>模块</h1>
</div>
<div>模块是一个独立的软件单元，它包含 <a href="http://www.yiichina.com/guide/basics.model" target="_blank" rel="noopener">模型</a>, <a href="http://www.yiichina.com/guide/basics.view" target="_blank" rel="noopener">视图</a>, <a href="http://www.yiichina.com/guide/basics.controller" target="_blank" rel="noopener">控制器</a> 和其他支持的组件。</div>
<div>模块在一些场景里很有用。对大型应用来说，我们可能需要把它划分为几个模块，每个模块可以单独维护和部署。一些通用的功能，例如用户管理， 评论管理，可以以模块的形式开发，这样他们就可以容易地在以后的项目中被复用。</div>
<div>
<h2>创建模块</h2>
</div>
<div>

模块组织在一个目录中，目录的名字即模块的唯一 <a href="http://www.yiichina.com/api/CWebModule#id" target="_blank" rel="noopener">ID</a>

</div>
<div>

模块的典型的目录结构：
<pre>forum/
   ForumModule.php            模块类文件
   components/                包含可复用的用户组件
      views/                  包含小物件的视图文件
   controllers/               包含控制器类文件
      DefaultController.php   默认的控制器类文件
   extensions/                包含第三方扩展
   models/                    包含模块类文件
   views/                     包含控制器视图和布局文件
      layouts/                包含布局文件
      default/                包含 DefaultController 的视图文件
         index.php            首页视图文件
</pre>
</div>
<div>.............</div>
<div></div>
<div>
<h1>路径别名与名字空间</h1>
</div>
<div>Yii 中广泛的使用了路径别名。路径别名关联于一个目录或文件的路径。它以点号语法指定</div>
<div>通过使用 <a href="http://www.yiichina.com/api/YiiBase#getPathOfAlias" target="_blank" rel="noopener">YiiBase::getPathOfAlias()</a>， 别名可以被翻译为其相应的路径。 例如， system.web.CController 会被翻译为yii/framework/web/CController</div>
<div>通过调用 <a href="http://www.yiichina.com/api/YiiBase#setPathOfAlias" target="_blank" rel="noopener">YiiBase::setPathOfAlias()</a>，我们可以定义新的根路径别名。</div>
<div></div>
<div>
<h2>Root Alias</h2>
</div>
<div>为方便起见，Yii 预定义了以下几个根别名：</div>
<div>
<ul>
 	<li>system: 表示 Yii 框架目录；</li>
 	<li>zii: 表示 <a href="http://www.yiichina.com/guide/extension.use#zii-extensions" target="_blank" rel="noopener">Zii 库</a> 目录；</li>
 	<li>application: 表示应用的 <a href="http://www.yiichina.com/guide/basics.application#application-base-directory" target="_blank" rel="noopener">基础目录</a>；</li>
 	<li>webroot: 表示 <a href="http://www.yiichina.com/guide/basics.entry" target="_blank" rel="noopener">入口脚本</a> 文件所在的目录。此别名从版本 1.0.3 开始有效</li>
 	<li>ext: 表示包含了所有第三方 <a href="http://www.yiichina.com/guide/extension.overview" target="_blank" rel="noopener">扩展</a> 的目录。此别名从版本 1.0.8 开始有效</li>
</ul>
</div>
<div>通过使用 <a href="http://www.yiichina.com/api/YiiBase#getPathOfAlias" target="_blank" rel="noopener">YiiBase::getPathOfAlias()</a>, 别名可以被翻译为其相应的路径。 例如， system.web.CController 会被翻译为yii/framework/web/CController</div>
<div>
<h2>Importing Classes</h2>
使用别名可以很方便的导入类的定义。 例如，如果我们想包含 <a href="http://www.yiichina.com/api/CController" target="_blank" rel="noopener">CController</a> 类的定义，我们可以调用如下代码
<div>
<div>
<pre>Yii::import('system.web.CController');</pre>
</div>
</div>
</div>
<div><a href="http://www.yiichina.com/api/YiiBase#import" target="_blank" rel="noopener">import</a> 方法跟 include 和 require 不同，它更加高效。 导入（import）的类定义并不会真正被包含进来，直到它第一次被引用。 多次导入同样的名字空间也会比 include_once 和 require_once 快得多</div>
<div>
<h3>使用Class Map</h3>
</div>
<div>
<h3>使用Class Map</h3>
<div></div>
<div>从1.1.5版本开始，Yii允许用户定义的类通过使Class Map机制来预先导入，这也是Yii内置类使用的方法。 预先引入机制可以在Yii应用的任何地方使用，无需显式地导入或者包含文件。</div>
</div>
<div>

若要使用预导入功能，要在<a href="http://www.yiichina.com/api/CWebApplication#run" target="_blank" rel="noopener">CWebApplication::run()</a>执行前执行下面的代码：
<div>
<div>
<pre>Yii::$classMap=array(
    'ClassName1' =&gt; 'path/to/ClassName1.php',
    'ClassName2' =&gt; 'path/to/ClassName2.php',
    ......
);</pre>
</div>
</div>
</div>
<div>
<h2>导入目录</h2>
</div>
<div>

使用如下语法导入整个目录，这样此目录下的类文件就会在需要时被自动包含。
<div>
<div>
<pre>Yii::import('system.web.*');</pre>
</div>
</div>
</div>
<div>
<h2>Namespace</h2>
</div>
<div>不要将路径别名和名字空间混淆了，名字空间是指对一些类名的一个逻辑组合，这样它们就可以相互区分开，即使有相同的名字</div>
<div>
<h2>使用命名空间的类</h2>
</div>
<div>若要自动导入使用命名空间的类，命名空间的格式必须和路径别名相似。</div>
<div>比如说，类application\components\GoogleMap 所对应的路径必须和别名:</div>
<div>application.components.GoogleMap一致。</div>
<div></div>
<div>
<h1>开发规范</h1>
</div>
<div>1.Yii 偏爱规范胜于配置。遵循规范可使你能够创建成熟的Yii应用而不需要编写、维护复杂的配置。</div>
<div>2.Yii 仍然可以在几乎所有的方面通过配置实现自定义</div>
<div>

Yii 编程中推荐的开发规范。 为简单起见，我们假设 WebRoot 是 Yii 应用安装的目录。
<h2>URL</h2>
默认情况下，Yii 识别如下格式的 URL：

</div>
<div>
<pre>http://hostname/index.php?r=ControllerID/ActionID
</pre>
<div>1.r GET 变量意为 <a href="http://www.yiichina.com/guide/basics.controller#route" target="_blank" rel="noopener">路由（route）</a> ，它可以被Yii解析为 控制器和动作。</div>
<div>2.如果 ActionID 被省略，控制器将使用默认的动作（在<a href="http://www.yiichina.com/api/CController#defaultAction" target="_blank" rel="noopener">CController::defaultAction</a>中定义）；</div>
<div>3.如果 ControllerID 也被省略（或者 r 变量不存在），应用将使用默认的控制器 （在<a href="http://www.yiichina.com/api/CWebApplication#defaultController" target="_blank" rel="noopener">CWebApplication::defaultController</a>中定义）。</div>
<div>4.通过 <a href="http://www.yiichina.com/api/CUrlManager" target="_blank" rel="noopener">CUrlManager</a> 的帮助，可以创建更加可识别，更加 SEO 友好的 URL，</div>
<div>   例如http://hostname/ControllerID/ActionID.html</div>
</div>
<div>
<h2>代码</h2>
1.命名变量、函数和类时使用 驼峰风格，即每个单词的首字母大写并连在一起，中间无空格。 变量名和函数名应该使它们的第一个单词全部小写，以使其区别于类名（例如：$basePath, runController(), LinkPager）。对私有类成员变量来说，我们推荐以下划线作为其名字前缀（例如： $_actionList）

</div>
<div>2. 一个针对控制器名字的特殊规则是它们必须以单词 Controller 结尾。那么控制器 ID 即类名的首字母小写并去掉单词Controller。 例如，PageController 类的 ID 就是 page</div>
<div></div>
<div>
<h2>配置</h2>
</div>
<div>配置是一个键值对数组。每个键代表了所配置的对象中的属性名，每个值则为相应属性的初始值。 例如，array('name'=&gt;'My application', 'basePath'=&gt;'./protected') 初始化了 name 和 basePath 属性为它们相应的数组值</div>
<div></div>
<div>
<h2>文件</h2>
命名和使用文件的规范取决于它们的类型。

</div>
<div>类文件应以它们包含的公有类命名。例如， <a href="http://www.yiichina.com/api/CController" target="_blank" rel="noopener">CController</a> 类位于 CController.php 文件中</div>
<div>视图文件应以视图的名字命名。例如， index 视图位于 index.php 文件中。 视图文件是一个PHP脚本文件，它包含了用于呈现内容的 HTML和PHP代码</div>
<div>配置文件可以任意命名。 配置文件是一个PHP脚本，它的主要目的是返回一个体现配置的关联数组</div>
<div></div>
<div>
<h2>目录</h2>
</div>
<div>Yii 假定了一系列默认的目录用于不同的场合。如果需要，每个目录都可以自定义</div>
<div></div>
<div>
<ul>
 	<li>WebRoot/protected: 这是 <a href="http://www.yiichina.com/guide/basics.application#application-base-directory" target="_blank" rel="noopener">应用基础目录</a>， 是放置所有安全敏感的PHP脚本和数据文件的地方。Yii 有一个默认的application 别名指向此目录。 此目录及目录中的文件应该保护起来防止Web用户访问。它可以通过<a href="http://www.yiichina.com/api/CWebApplication#basePath" target="_blank" rel="noopener">CWebApplication::basePath</a> 自定义。</li>
 	<li>WebRoot/protected/runtime: 此目录放置应用在运行时产生的私有临时文件。 此目录必须对 Web 服务器进程可写。它可以通过 <a href="http://www.yiichina.com/api/CApplication#runtimePath" target="_blank" rel="noopener">CApplication::runtimePath</a>自定义。</li>
 	<li>WebRoot/protected/extensions: 此目录放置所有第三方扩展。 它可以通过 <a href="http://www.yiichina.com/api/CApplication#extensionPath" target="_blank" rel="noopener">CApplication::extensionPath</a> 自定义。</li>
 	<li>WebRoot/protected/modules: 此目录放置所有的应用 <a href="http://www.yiichina.com/guide/basics.module" target="_blank" rel="noopener">模块</a>，每个模块使用一个子目录。</li>
 	<li>WebRoot/protected/controllers: 此目录放置所有控制器类文件。 它可以通过<a href="http://www.yiichina.com/api/CWebApplication#controllerPath" target="_blank" rel="noopener">CWebApplication::controllerPath</a> 自定义。</li>
 	<li>WebRoot/protected/views: 此目录放置所有试图文件， 包含控制器视图，布局视图和系统视图。 它可以通过<a href="http://www.yiichina.com/api/CWebApplication#viewPath" target="_blank" rel="noopener">CWebApplication::viewPath</a> 自定义。</li>
 	<li>WebRoot/protected/views/ControllerID: 此目录放置单个控制器类中使用的所有视图文件。 此处的ControllerID 是指控制器的 ID 。它可以通过 <a href="http://www.yiichina.com/api/CController#viewPath" target="_blank" rel="noopener">CController::viewPath</a> 自定义。</li>
 	<li>WebRoot/protected/views/layouts: 此目录放置所有布局视图文件。它可以通过<a href="http://www.yiichina.com/api/CWebApplication#layoutPath" target="_blank" rel="noopener">CWebApplication::layoutPath</a> 自定义。</li>
 	<li>WebRoot/protected/views/system: 此目录放置所有系统视图文件。 系统视图文件是用于显示异常和错误的模板。它可以通过 <a href="http://www.yiichina.com/api/CWebApplication#systemViewPath" target="_blank" rel="noopener">CWebApplication::systemViewPath</a> 自定义。</li>
 	<li>WebRoot/assets: 此目录放置公共资源文件。 资源文件是可以被发布的，可由Web用户访问的私有文件。此目录必须对 Web 服务器进程可写。 它可以通过 <a href="http://www.yiichina.com/api/CAssetManager#basePath" target="_blank" rel="noopener">CAssetManager::basePath</a> 自定义</li>
 	<li>WebRoot/themes: 此目录放置应用使用的不同的主题。每个子目录即一个主题，主题的名字即目录的名字。 它可以通过 <a href="http://www.yiichina.com/api/CThemeManager#basePath" target="_blank" rel="noopener">CThemeManager::basePath</a> 自定义。</li>
</ul>
</div>
<div>
<h2>数据库</h2>
</div>
<div>

多数Web 应用是由数据库驱动的。 推荐在对表和列命名时使用如下命名规范。
<ul>
 	<li>数据库表名和列名都使用小写命名。</li>
 	<li>名字中的单词应使用下划线分割 (例如 product_order)。</li>
 	<li>对于表名，推荐使用单数名字。</li>
 	<li>表名可以使用一个通用前缀，例如 tbl_ 。这样当应用所使用的表和另一个应用说使用的表共存于同一个数据库中时就特别有用。 这两个应用的表可以通过使用不同的表前缀很容易地区别开。</li>
</ul>
</div>
<div>
<h1>开发流程</h1>
</div>
<div>
<ol>
 	<li>创建目录结构骨架。</li>
 	<li>配置此 <a href="http://www.yiichina.com/guide/basics.application" target="_blank" rel="noopener">应用</a>。通过修改应用配置文件实现的。 此步骤可能也需要编写一些应用组件（例如用户组件）。</li>
 	<li>为每个类型的数据(表)创建一个 <a href="http://www.yiichina.com/guide/basics.model" target="_blank" rel="noopener">模型</a> 类。Gii 工具可以用于快速为每个数据表创建 <a href="http://www.yiichina.com/guide/database.ar" target="_blank" rel="noopener">active record</a> 类
<div>为每个类型的用户请求 创建一个 <a href="http://www.yiichina.com/guide/basics.controller" target="_blank" rel="noopener">控制器</a> 类。 具体如何对用户请求归类要看实际需求。</div>
<div>总体来说，如果一个模型类需要被用户访问，就应该有一个相应的控制器类。 Gii 工具也可以自动实现这一步骤。</div></li>
 	<li>实现 <a href="http://www.yiichina.com/guide/basics.controller#action" target="_blank" rel="noopener">动作</a> 和他们相应的 <a href="http://www.yiichina.com/guide/basics.view" target="_blank" rel="noopener">视图</a>。 这是真正所需要做的工作。</li>
 	<li>在控制器类中配置必要的动作 <a href="http://www.yiichina.com/guide/basics.controller#filter" target="_blank" rel="noopener">过滤器</a>。</li>
 	<li>如果需要主题功能，创建 <a href="http://www.yiichina.com/guide/topics.theming" target="_blank" rel="noopener">主题</a> 。</li>
 	<li>如果需要 <a href="http://www.yiichina.com/guide/topics.i18n" target="_blank" rel="noopener">国际化（I18N）</a> ，创建翻译信息。</li>
 	<li>对可缓存的数据点和视图点应用适当的 <a href="http://www.yiichina.com/guide/caching.overview" target="_blank" rel="noopener">缓存</a> 技术。</li>
 	<li>最终 <a href="http://www.yiichina.com/guide/topics.performance" target="_blank" rel="noopener">调整</a> 与部署。</li>
</ol>
上述的每个步骤中，可能需要创建并执行测试用例。

</div>
<div></div>
<div>==========================================================================================================================</div>
<div>                                                                                                                                  使用表单</div>
<div>==========================================================================================================================</div>
<div></div>
<div>

通过HTML表单收集用户数据是Web程序开发的主要工作之一。除了表单设计外， 开发者还需要将现存的或默认的数据填充到表单，验证用户输入， 对无效的输入显示适当的错误信息，保存输入到持久性存储器。通过其 MVC 结构极大地简化了此工作流程。

处理表单时，通常需要以下步骤：
<ol>
 	<li>创建用于表现所要收集数据字段的模型类。</li>
 	<li>创建一个控制器动作，响应表单提交。</li>
 	<li>在视图脚本中创建与控制器动作相关的表单。</li>
</ol>
</div>
<div>
<h1>创建模型</h1>
</div>
<div>在编写表单所需的 HTML 代码之前,先确定来自最终用户输入的数据的类型,以及这些数据应符合什么样的规则。</div>
<div>模型类可用于记录这些信息,保存用户输入和验证这些输入的中心位置</div>
<div></div>
<div>根据用户所输入数据的方式创建不同类型的模型。</div>
<div>1. 如果用户输入被收集、使用然后丢弃，我们应该创建一个 <a href="http://www.yiichina.com/guide/basics.model" target="_blank" rel="noopener">表单模型</a>;</div>
<div>2.如果用户的输入被收集后要保存到数据库，我们应使用一个 <a href="http://www.yiichina.com/guide/database.ar" target="_blank" rel="noopener">Active Record</a> 。 两种类型的模型共享同样的基类 <a href="http://www.yiichina.com/api/CModel" target="_blank" rel="noopener">CModel</a> ，它定义了表单所需的通用接口</div>
<div></div>
<div>
<h2>定义模型类</h2>
创建了一个 LoginForm 模型类用于在一个登录页中收集用户的输入。 由于登录信息只被用于验证用户，并不需要保存，因此我们将 LoginForm 创建为一个 表单模型。
<div>
<div>
<pre>class LoginForm extends CFormModel{
    public $username;
    public $password;
    public $rememberMe=false;
}</pre>
</div>
</div>
LoginForm 中定义了三个属性: $username, $password 和 $rememberMe。用于保存用户输入的用户名和密码，还有用户是否想记住他的登录的选项。 由于 $rememberMe 有一个默认的值 false，相应的选项在初始化显示在登录表单中时将是未勾选状态。

</div>
<div>
<h2>声明验证规则</h2>
</div>
<div>用户提交了他的输入，模型被填充，需要在使用前确保用户的输入是有效的。 通过将用户的输入和一系列规则执行验证实现的。</div>
<div>我们在 rules() 方法中指定这些验证规则， 此方法应返回一个规则配置数组。</div>
<div>
<pre>class LoginForm extends CFormModel{
    public $username;
    public $password;
    public $rememberMe=false;
 
    private $_identity;
 
    public function rules()
    {
        return array(
            array('username, password', 'required'),
            array('rememberMe', 'boolean'),
            array('password', 'authenticate'),
        );
    }
 
    public function authenticate($attribute,$params)
    {
        $this-&gt;_identity=new UserIdentity($this-&gt;username,$this-&gt;password);
        if(!$this-&gt;_identity-&gt;authenticate())
            $this-&gt;addError('password','错误的用户名或密码。');
    }}</pre>
</div>
<div>

上述代码指定：username 和 password 为必填项， password 应被验证（authenticated），rememberMe 应该是一个布尔值。

rules() 返回的每个规则必须是以下格式：
<div>
<div>
<pre>array('AttributeList', 'Validator', 'on'=&gt;'ScenarioList', ...附加选项)</pre>
</div>
</div>
其中 AttributeList（特性列表） 是需要通过此规则验证的特性列表字符串，每个特性名字由逗号分隔;Validator（验证器） 指定要执行验证的种类；on 参数是可选的，它指定此规则应被应用到的场景列表； 附加选项是一个名值对数组，用于初始化相应验证器的属性值。

有三种方式可在验证规则中指定 Validator 。第一， Validator 可以是模型类中一个方法的名字，就像上面示例中的authenticate 。验证方法必须是下面的结构：
<div>
<div>
<pre>/**
 * @param string 所要验证的特性的名字
 * @param array 验证规则中指定的选项
 */public function ValidatorName($attribute,$params) { ... }</pre>
</div>
</div>
第二，Validator 可以是一个验证器类的名字，当此规则被应用时， 一个验证器类的实例将被创建以执行实际验证。规则中的附加选项用于初始化实例的属性值。 验证器类必须继承自 <a href="http://www.yiichina.com/api/CValidator" target="_blank" rel="noopener">CValidator</a>。

第三，Validator 可以是一个预定义的验证器类的别名。在上面的例子中， required 名字是 <a href="http://www.yiichina.com/api/CRequiredValidator" target="_blank" rel="noopener">CRequiredValidator</a> 的别名，它用于确保所验证的特性值不为空。 下面是预定义的验证器别名的完整列表：

</div>
<div></div>
<div>==========================================================================================================================</div>
<div>                                                                                                                                 使用数据库</div>
<div>==========================================================================================================================</div>
<div>
<ul>
 	<li><a href="http://www.yiichina.com/guide/database.overview" target="_blank" rel="noopener">概览</a></li>
</ul>
</div>
<div>Yii数据访问对象(DAO)建立在PHP的数据对象(PDO)extension上</div>
<div>使得在一个单一的统一的接口可以访问不同的数据库管理系统(DBMS)</div>
<div>Yii 的Active Record（ AR ），实现了被广泛采用的对象关系映射(ORM)办法，简化数据库编程。按约定，一个类代表一个表，一个实例代表一行数据。</div>
<div>Yii AR消除了大部分用于处理CRUD（创建，读取，更新和删除）数据操作的sql语句的重复任务</div>
<div>
<h1>1.数据访问对象 (DAO)</h1>
</div>
<div>数据访问对象（DAO） 对访问存储在不同数据库管理系统（DBMS）中的数据提供了一个通用的API。 因此，在将底层 DBMS 更换为另一个时，无需修改使用了 DAO 访问数据的代码。</div>
<div>Yii DAO 基于 <a href="http://php.net/manual/en/book.pdo.php" target="_blank" rel="noopener">PHP Data Objects (PDO)</a> 构建。</div>
<div>

Yii DAO 主要包含如下四个类：
<ul>
 	<li><a href="http://www.yiichina.com/api/CDbConnection" target="_blank" rel="noopener">CDbConnection</a>: 代表一个数据库连接。</li>
 	<li><a href="http://www.yiichina.com/api/CDbCommand" target="_blank" rel="noopener">CDbCommand</a>: 代表一条执行的 SQL 语句。</li>
 	<li><a href="http://www.yiichina.com/api/CDbDataReader" target="_blank" rel="noopener">CDbDataReader</a>: 代表一个只向前移动的，来自一个查询结果集中的行的流。</li>
 	<li><a href="http://www.yiichina.com/api/CDbTransaction" target="_blank" rel="noopener">CDbTransaction</a>: 代表一个数据库事务。</li>
</ul>
</div>
<div>
<h2>建立数据库连接</h2>
</div>
<div>1.建立一个数据库连接，创建一个 <a href="http://www.yiichina.com/api/CDbConnection" target="_blank" rel="noopener">CDbConnection</a> 实例并将其激活。 连接到数据库需要一个数据源的名字（DSN）以指定连接信息。</div>
<div>2.用户名和密码也可能会用到。 当连接到数据库的过程中发生错误时 (例如，错误的 DSN 或无效的用户名/密码)，将会抛出一个异常</div>
<div></div>
<div>

3.DSN 的格式取决于所使用的 PDO 数据库驱动。总体来说， DSN 要含有 PDO 驱动的名字，跟上一个冒号，再跟上驱动特定的连接语法。下面是一个常用DSN格式的列表。
<ul>
 	<li>SQLite: sqlite:/path/to/dbfile</li>
 	<li>MySQL: mysql:host=localhost;dbname=testdb</li>
 	<li>PostgreSQL: pgsql:host=localhost;port=5432;dbname=testdb</li>
 	<li>SQL Server: mssql:host=localhost;dbname=testdb</li>
 	<li>Oracle: oci:dbname=//localhost:1521/testdb</li>
</ul>
</div>
<div>

由于 <a href="http://www.yiichina.com/api/CDbConnection" target="_blank" rel="noopener">CDbConnection</a> 继承自 <a href="http://www.yiichina.com/api/CApplicationComponent" target="_blank" rel="noopener">CApplicationComponent</a>，我们也可以将其作为一个 <a href="http://www.yiichina.com/guide/basics.application#application-component" target="_blank" rel="noopener">应用组件</a> 使用。要这样做的话， 请在 <a href="http://www.yiichina.com/guide/basics.application#application-configuration" target="_blank" rel="noopener">应用配置</a> 中配置一个 db （或其他名字）应用组件如下：
<div>
<div>
<pre>array(
    ......
    'components'=&gt;array(
        ......
        'db'=&gt;array(
            'class'=&gt;'CDbConnection',
            'connectionString'=&gt;'mysql:host=localhost;dbname=testdb',
            'username'=&gt;'root',
            'password'=&gt;'password',
            'emulatePrepare'=&gt;true,  // needed by some MySQL installations
        ),
    ),
)</pre>
</div>
</div>
</div>
<div>可以通过 Yii::app()-&gt;db 访问数据库连接了。它已经被自动激活了</div>
<div>通过这种方式，这个单独的DB连接就可以在我们代码中的很多地方共享</div>
<div></div>
<div>
<h2>执行 SQL 语句</h2>
</div>
<div>

数据库连接建立后，SQL 语句就可以通过使用 <a href="http://www.yiichina.com/api/CDbCommand" target="_blank" rel="noopener">CDbCommand</a> 执行了。你可以通过使用指定的SQL语句作为参数调用<a href="http://www.yiichina.com/api/CDbConnection#createCommand" target="_blank" rel="noopener">CDbConnection::createCommand()</a> 创建一个 <a href="http://www.yiichina.com/api/CDbCommand" target="_blank" rel="noopener">CDbCommand</a> 实例。
<div>
<div>
<pre>$connection=Yii::app()-&gt;db;   // 假设你已经建立了一个 "db" 连接// 如果没有，你可能需要显式建立一个连接：// $connection=new CDbConnection($dsn,$username,$password);$command=$connection-&gt;createCommand($sql);
// 如果需要，此 SQL 语句可通过如下方式修改：// $command-&gt;text=$newSQL;</pre>
</div>
</div>
</div>
<div>

一条 SQL 语句会通过 <a href="http://www.yiichina.com/api/CDbCommand" target="_blank" rel="noopener">CDbCommand</a> 以如下两种方式被执行：
<ul>
 	<li><a href="http://www.yiichina.com/api/CDbCommand#execute" target="_blank" rel="noopener">execute()</a>: 执行一个无查询 （non-query）SQL语句， 例如 INSERT, UPDATE 和 DELETE 。如果成功，将返回此执行所影响的行数。</li>
 	<li><a href="http://www.yiichina.com/api/CDbCommand#query" target="_blank" rel="noopener">query()</a>: 执行一条会返回若干行数据的 SQL 语句，例如 SELECT。 如果成功，它将返回一个 <a href="http://www.yiichina.com/api/CDbDataReader" target="_blank" rel="noopener">CDbDataReader</a> 实例，通过此实例可以遍历数据的结果行。为简便起见， （Yii）还实现了一系列 queryXXX() 方法以直接返回查询结果。</li>
</ul>
</div>
<div>
<pre>$rowCount=$command-&gt;execute();   // 执行无查询 SQL$dataReader=$command-&gt;query();   // 执行一个 SQL 查询$rows=$command-&gt;queryAll();      // 查询并返回结果中的所有行$row=$command-&gt;queryRow();       // 查询并返回结果中的第一行$column=$command-&gt;queryColumn(); // 查询并返回结果中的第一列$value=$command-&gt;queryScalar();  // 查询并返回结果中第一行的第一个字段</pre>
</div>
<div>
<h2>获取查询结果</h2>
在 <a href="http://www.yiichina.com/api/CDbCommand#query" target="_blank" rel="noopener">CDbCommand::query()</a> 生成 <a href="http://www.yiichina.com/api/CDbDataReader" target="_blank" rel="noopener">CDbDataReader</a> 实例之后，可以通过重复调用 <a href="http://www.yiichina.com/api/CDbDataReader#read" target="_blank" rel="noopener">CDbDataReader::read()</a> 获取结果中的行。你也可以在 PHP 的 foreach 语言结构中使用 <a href="http://www.yiichina.com/api/CDbDataReader" target="_blank" rel="noopener">CDbDataReader</a> 一行行检索数据。
<div>
<div>
<pre>$dataReader=$command-&gt;query();
// 重复调用 read() 直到它返回 falsewhile(($row=$dataReader-&gt;read())!==false) { ... }// 使用 foreach 遍历数据中的每一行foreach($dataReader as $row) { ... }// 一次性提取所有行到一个数组$rows=$dataReader-&gt;readAll();</pre>
</div>
</div>
</div>
<div>注意: 不同于 <a href="http://www.yiichina.com/api/CDbCommand#query" target="_blank" rel="noopener">query()</a>, 所有的 queryXXX() 方法会直接返回数据。 例如， <a href="http://www.yiichina.com/api/CDbCommand#queryRow" target="_blank" rel="noopener">queryRow()</a> 会返回代表查询结果第一行的一个数组。</div>
<div></div>
<div>
<h2>使用事务</h2>
当一个应用要执行几条查询，（每条查询要从数据库中读取/或向数据库中写入信息时） 保证所有sql语句都执行很重要。 事务，在 Yii 中表现为 <a href="http://www.yiichina.com/api/CDbTransaction" target="_blank" rel="noopener">CDbTransaction</a> 实例，可能会在下面的情况中启动：
<ul>
 	<li>开始事务.</li>
 	<li>一个个执行查询。任何对数据库的更新对外界不可见。</li>
 	<li>提交事务。如果事务成功，更新变为可见。</li>
 	<li>如果查询中的一个失败，整个事务回滚。</li>
</ul>
上述工作流可以通过如下代码实现：
<div>
<div>
<pre>$transaction=$connection-&gt;beginTransaction();
try{
    $connection-&gt;createCommand($sql1)-&gt;execute();
    $connection-&gt;createCommand($sql2)-&gt;execute();
    //.... other SQL executions
    $transaction-&gt;commit(); //提交事务}catch(Exception $e){
    $transaction-&gt;rollBack();//回滚事务}</pre>
</div>
</div>
<h2>绑定参数(即是变量)</h2>
要避免 <a href="http://en.wikipedia.org/wiki/SQL_injection" target="_blank" rel="noopener">SQL 注入攻击</a> 并提高重复执行的 SQL 语句的效率， 你可以 "准备（prepare）"一条含有可选参数占位符的 SQL 语句，在参数绑定时，这些占位符将被替换为实际的参数。

参数占位符可以是命名的 (表现为一个唯一的标记) 或未命名的 (表现为一个问号)。调用 <a href="http://www.yiichina.com/api/CDbCommand#bindParam" target="_blank" rel="noopener">CDbCommand::bindParam()</a> 或<a href="http://www.yiichina.com/api/CDbCommand#bindValue" target="_blank" rel="noopener">CDbCommand::bindValue()</a> 以使用实际参数替换这些占位符。 这些参数不需要使用引号引起来：底层的数据库驱动会为你搞定这个。 参数绑定必须在 SQL 语句执行之前完成。
<div>
<div>
<pre></pre>
<pre>// 一条带有两个占位符 ":username" 和 ":email"的 SQL</pre>
<pre>$sql="INSERT INTO tbl_user (username, email) VALUES(:username,:email)";
                                         $command=$connection-&gt;createCommand($sql);
// 用实际的用户名替换占位符 ":username"      $command-&gt;bindParam(":username",$username,PDO::PARAM_STR);
// 用实际的 Email 替换占位符 ":email"       $command-&gt;bindParam(":email",$email,PDO::PARAM_STR);
                                          $command-&gt;execute();
// 使用新的参数集插入另一行                  $command-&gt;bindParam(":username",$username2,PDO::PARAM_STR);
$command-&gt;bindParam(":email",$email2,PDO::PARAM_STR);
$command-&gt;execute();</pre>
</div>
</div>
方法 <a href="http://www.yiichina.com/api/CDbCommand#bindParam" target="_blank" rel="noopener">bindParam()</a> 和 <a href="http://www.yiichina.com/api/CDbCommand#bindValue" target="_blank" rel="noopener">bindValue()</a> 非常相似。唯一的区别就是前者使用一个 PHP 变量绑定参数， 而后者使用一个值。对于那些内存中的大数据块参数，处于性能的考虑，应优先使用前者。
<h2>绑定列</h2>
当获取查询结果时，你也可以使用 PHP 变量绑定列。 这样在每次获取查询结果中的一行时就会自动使用最新的值填充。
<div>
<div>
<pre>$sql="SELECT username, email FROM tbl_user";
$dataReader=$connection-&gt;createCommand($sql)-&gt;query();
// 使用 $username 变量绑定第一列 (username)   $dataReader-&gt;bindColumn(1,$username);// 使用 $email 变量绑定第二列 (email) $dataReader-&gt;bindColumn(2,$email);
while($dataReader-&gt;read()!==false){
    // $username 和 $email 含有当前行中的 username 和 email }</pre>
</div>
</div>
<h2>使用表前缀（区分作用）</h2>
从版本 1.1.0 起， Yii 提供了集成了对使用表前缀的支持。 表前缀是指在当前连接的数据库中的数据表的名字前面添加的一个字符串。 它常用于共享的服务器环境，这种环境中多个应用可能会共享同一个数据库，要使用不同的表前缀以相互区分。 例如，一个应用可以使用 tbl_ 作为表前缀而另一个可以使用 yii_

要使用表前缀，配置 <a href="http://www.yiichina.com/api/CDbConnection#tablePrefix" target="_blank" rel="noopener">CDbConnection::tablePrefix</a> 属性为所希望的表前缀。 然后，在 SQL 语句中使用 {{TableName}} 代表表的名字，其中的 TableName 是指不带前缀的表名。 例如，如果数据库含有一个名为 tbl_user 的表，而 tbl_ 被配置为表前缀，那我们就可以使用如下代码执行用户相关的查询：
<div>
<div>
<pre>$sql='SELECT * FROM {{user}}';  //对应表tbl_user $users=$connection-&gt;createCommand($sql)-&gt;queryAll();</pre>
</div>
</div>
</div>
<div></div>
<div></div>
<div>
<h1>2.Active Record</h1>
</div>
<div>1.Active Record (AR) 是一个流行的 对象-关系映射 (ORM) 技术。</div>
<div>2.每个 AR 类代表一个数据表（或视图），数据表（或视图）的列在 AR 类中体现为类的属性，一个 AR 实例则表示表中的一行。</div>
<div>3.常见的 CRUD 操作作为 AR 的方法实现。更加面向对象的方式访问数据。</div>
<div></div>
<div>

简单起见，我们使用下面的数据表作为此节中的例子。注意，如果你使用 MySQL 数据库，你应该将下面的 SQL 中的 AUTOINCREMENT 替换为 AUTO_INCREMENT。
<div>
<div>
<pre>CREATE TABLE tbl_post (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    title VARCHAR(128) NOT NULL,
    content TEXT NOT NULL,
    create_time INTEGER NOT NULL);</pre>
</div>
</div>
</div>
<div>如果你想使用一个不是 db 的应用组件，或者如果你想使用 AR 处理多个数据库，你应该覆盖<a href="http://www.yiichina.com/api/CActiveRecord#getDbConnection" target="_blank" rel="noopener">CActiveRecord::getDbConnection()</a>。 <a href="http://www.yiichina.com/api/CActiveRecord" target="_blank" rel="noopener">CActiveRecord</a> 类是所有 AR 类的基类。</div>
<div>
<h2>定义 AR 类</h2>
要访问一个数据表，我们首先需要通过集成 <a href="http://www.yiichina.com/api/CActiveRecord" target="_blank" rel="noopener">CActiveRecord</a> 定义一个 AR 类。 每个 AR 类代表一个单独的数据表，一个 AR 实例则代表那个表中的一行。 如下例子演示了代表 tbl_post 表的 AR 类的最简代码：
<div>
<div>
<pre>class Post extends CActiveRecord{
    public static function model($className=__CLASS__)
    {
        return parent::model($className);
    }
 //认情况下，AR 类的名字和数据表的名字相同。如果不同，请覆盖 <a href="http://www.yiichina.com/api/CActiveRecord#tableName" target="_blank" rel="noopener">tableName()</a> 方法。 <a href="http://www.yiichina.com/api/CActiveRecord#model" target="_blank" rel="noopener">model()</a> 方法为每个 AR 类声明为如此（稍后解释）
    public function tableName()
    {
        return 'tbl_post';
    }}</pre>
</div>
</div>
</div>
<div> 例如，我们可以使用以下代码向 tbl_post 表中插入一个新行</div>
<div>
<pre>$post=new Post;</pre>
<pre>//从未在 Post 类中显式定义属性 title，但通过上述代码访问。 因为 title 是 tbl_post 表中的一个列，CActiveRecord 通过PHP的 __get() 魔术方法使其成为一个可访问的属性$post-&gt;title='sample post'; //如果我们尝试以同样的方式访问一个不存在的列，将会抛出一个异常$post-&gt;content='post body content'; $post-&gt;save();</pre>
</div>
<div>

AR 依靠表中良好定义的主键。如果一个表没有主键，则必须在相应的 AR 类中通过如下方式覆盖 primaryKey() 方法指定哪一列或哪几列作为主键。
<div>
<div>
<pre>public function primaryKey(){
    return 'id';
    // 对于复合主键，要返回一个类似如下的数组
    // return array('pk1', 'pk2');}</pre>
</div>
</div>
<h2>创建记录</h2>
要向数据表中插入新行，我们要创建一个相应 AR 类的实例，设置其与表的列相关的属性，然后调用 <a href="http://www.yiichina.com/api/CActiveRecord#save" target="_blank" rel="noopener">save()</a> 方法完成插入：
<div>
<div>
<pre>$post=new Post;
$post-&gt;title='sample post';
$post-&gt;content='content for the sample post';
$post-&gt;create_time=time();
$post-&gt;save();</pre>
</div>
</div>
如果表的主键是自增的，在插入完成后，AR 实例将包含一个更新的主键。在上面的例子中， id 属性将反映出新插入帖子的主键值，即使我们从未显式地改变它。

如果一个列在表结构中使用了静态默认值（例如一个字符串，一个数字）定义。则 AR 实例中相应的属性将在此实例创建时自动含有此默认值。改变此默认值的一个方式就是在 AR 类中显示定义此属性：
<div>
<div>
<pre>class Post extends CActiveRecord{
    public $title='please enter a title';
    ......
}
 
$post=new Post;
echo $post-&gt;title;  // 这儿将显示: please enter a title</pre>
</div>
</div>
从版本 1.0.2 起，记录在保存（插入或更新）到数据库之前，其属性可以赋值为 <a href="http://www.yiichina.com/api/CDbExpression" target="_blank" rel="noopener">CDbExpression</a> 类型。 例如，为保存一个由 MySQL 的 NOW() 函数返回的时间戳，我们可以使用如下代码：
<div>
<div>
<pre>$post=new Post;
$post-&gt;create_time=new CDbExpression('NOW()');
// $post-&gt;create_time='NOW()'; 不会起作用，因为// 'NOW()' 将会被作为一个字符串处理。$post-&gt;save();</pre>
</div>
</div>
<blockquote>提示: 由于 AR 允许我们无需写一大堆 SQL 语句就能执行数据库操作， 我们经常会想知道 AR 在背后到底执行了什么 SQL 语句。这可以通过开启 Yii 的 <a href="http://www.yiichina.com/guide/topics.logging" target="_blank" rel="noopener">日志功能</a> 实现。例如，我们在应用配置中开启了 <a href="http://www.yiichina.com/api/CWebLogRoute" target="_blank" rel="noopener">CWebLogRoute</a> ，我们将会在每个网页的最后看到执行过的 SQL 语句。 从 1.0.5 版本起，我们可以在应用配置中设置<a href="http://www.yiichina.com/api/CDbConnection#enableParamLogging" target="_blank" rel="noopener">CDbConnection::enableParamLogging</a> 为 true ，这样绑定在 SQL 语句中的参数值也会被记录。</blockquote>
<h2>读取记录</h2>
条件的结果中的第一行$post=Post::model()-&gt;find($condition,$params);
<div>
<div>
<pre>// 查找具有指定主键值的那一行                      $post=Post::model()-&gt;findByPk($postID,$condition,$params);
// 查找具有指定属性值的行                          $post=Post::model()-&gt;findByAttributes($attributes,$condition,$params);
// 通过指定的 SQL 语句查找结果中的第一行            $post=Post::model()-&gt;findBySql($sql,$params);</pre>
</div>
</div>
如上所示，通过 Post::model() 调用 find 方法。 静态方法 model() 是每个 AR 类所必须的。 此方法返回在对象上下文中的一个用于访问类级别方法（类似于静态类方法的东西）的 AR 实例。

如果 find 方法找到了一个满足查询条件的行，它将返回一个 Post 实例，实例的属性含有数据表行中相应列的值。 然后就可以像读取普通对象的属性那样读取载入的值，例如 echo $post-&gt;title;。

如果使用给定的查询条件在数据库中没有找到任何东西， find 方法将返回 null 。

调用 find 时，我们使用 $condition 和 $params 指定查询条件。此处 $condition 可以是 SQL 语句中的 WHERE 字符串，$params 则是一个参数数组，其中的值应绑定到 $condation 中的占位符。例如：
<div>
<div>
<pre>// 查找 postID=10 的那一行          $post=Post::model()-&gt;find('postID=:postID', array(':postID'=&gt;10));</pre>
</div>
</div>
<blockquote>注意: 在上面的例子中，我们可能需要在特定的 DBMS 中将 postID 列的引用进行转义。 例如，如果我们使用 PostgreSQL，我们必须将此表达式写为 "postID"=:postID，因为 PostgreSQL 在默认情况下对列名大小写不敏感。</blockquote>
我们也可以使用 $condition 指定更复杂的查询条件。 不使用字符串，我们可以让 $condition 成为一个 <a href="http://www.yiichina.com/api/CDbCriteria" target="_blank" rel="noopener">CDbCriteria</a> 的实例，它允许我们指定不限于 WHERE 的条件。 例如：
<div>
<div>
<pre>$criteria=new CDbCriteria;
$criteria-&gt;select='title';  // 只选择 'title' 列$criteria-&gt;condition='postID=:postID';
$criteria-&gt;params=array(':postID'=&gt;10);
$post=Post::model()-&gt;find($criteria); // $params 不需要了</pre>
</div>
</div>
注意，当使用 <a href="http://www.yiichina.com/api/CDbCriteria" target="_blank" rel="noopener">CDbCriteria</a> 作为查询条件时，$params 参数不再需要了，因为它可以在 <a href="http://www.yiichina.com/api/CDbCriteria" target="_blank" rel="noopener">CDbCriteria</a> 中指定，就像上面那样。

一种替代 <a href="http://www.yiichina.com/api/CDbCriteria" target="_blank" rel="noopener">CDbCriteria</a> 的方法是给 find 方法传递一个数组。 数组的键和值各自对应标准（criterion）的属性名和值，上面的例子可以重写为如下：
<div>
<div>
<pre>$post=Post::model()-&gt;find(array(
    'select'=&gt;'title',
    'condition'=&gt;'postID=:postID',
    'params'=&gt;array(':postID'=&gt;10),
));</pre>
</div>
</div>
<blockquote>信息: 当一个查询条件是关于按指定的值匹配几个列时，我们可以使用 <a href="http://www.yiichina.com/api/CActiveRecord#findByAttributes" target="_blank" rel="noopener">findByAttributes()</a>。我们使 $attributes参数是一个以列名做索引的值的数组。在一些框架中，此任务可以通过调用类似 findByNameAndTitle 的方法实现。虽然此方法看起来很诱人， 但它常常引起混淆，冲突和比如列名大小写敏感的问题。</blockquote>
当有多行数据匹配指定的查询条件时，我们可以通过下面的 findAll 方法将他们全部带回。 每个都有其各自的 find 方法，就像我们已经讲过的那样。
<div>
<div>
<pre>// 查找满足指定条件的所有行$posts=Post::model()-&gt;findAll($condition,$params);
// 查找带有指定主键的所有行$posts=Post::model()-&gt;findAllByPk($postIDs,$condition,$params);
// 查找带有指定属性值的所有行$posts=Post::model()-&gt;findAllByAttributes($attributes,$condition,$params);
// 通过指定的SQL语句查找所有行$posts=Post::model()-&gt;findAllBySql($sql,$params);</pre>
</div>
</div>
如果没有任何东西符合查询条件，findAll 将返回一个空数组。这跟 find 不同，find 会在没有找到什么东西时返回 null。

除了上面讲述的 find 和 findAll 方法，为了方便，（Yii）还提供了如下方法：
<div>
<div>
<pre>// 获取满足指定条件的行数$n=Post::model()-&gt;count($condition,$params);
// 通过指定的 SQL 获取结果行数$n=Post::model()-&gt;countBySql($sql,$params);
// 检查是否至少有一行复合指定的条件$exists=Post::model()-&gt;exists($condition,$params);</pre>
</div>
</div>
<h2>更新记录</h2>
在 AR 实例填充了列的值之后，我们可以改变它们并把它们存回数据表。
<div>
<div>
<pre>$post=Post::model()-&gt;findByPk(10);
$post-&gt;title='new post title';
$post-&gt;save(); // 将更改保存到数据库</pre>
</div>
</div>
正如我们可以看到的，我们使用同样的 <a href="http://www.yiichina.com/api/CActiveRecord#save" target="_blank" rel="noopener">save()</a> 方法执行插入和更新操作。 如果一个 AR 实例是使用 new 操作符创建的，调用<a href="http://www.yiichina.com/api/CActiveRecord#save" target="_blank" rel="noopener">save()</a> 将会向数据表中插入一行新数据； 如果 AR 实例是某个 find 或 findAll 方法的结果，调用 <a href="http://www.yiichina.com/api/CActiveRecord#save" target="_blank" rel="noopener">save()</a> 将更新表中现有的行。 实际上，我们是使用 <a href="http://www.yiichina.com/api/CActiveRecord#isNewRecord" target="_blank" rel="noopener">CActiveRecord::isNewRecord</a> 说明一个 AR 实例是不是新的。

直接更新数据表中的一行或多行而不首先载入也是可行的。 AR 提供了如下方便的类级别方法实现此目的：
<div>
<div>
<pre>// 更新符合指定条件的行Post::model()-&gt;updateAll($attributes,$condition,$params);
// 更新符合指定条件和主键的行Post::model()-&gt;updateByPk($pk,$attributes,$condition,$params);
// 更新满足指定条件的行的计数列Post::model()-&gt;updateCounters($counters,$condition,$params);</pre>
</div>
</div>
在上面的代码中， $attributes 是一个含有以 列名作索引的列值的数组； $counters 是一个由列名索引的可增加的值的数组；$condition 和 $params 在前面的段落中已有描述。
<h2>删除记录</h2>
如果一个 AR 实例被一行数据填充,我们也可以删除此行数据。
<div>
<div>
<pre>$post=Post::model()-&gt;findByPk(10); // 假设有一个帖子，其 ID 为 10$post-&gt;delete(); // 从数据表中删除此行</pre>
</div>
</div>
注意，删除之后， AR 实例仍然不变，但数据表中相应的行已经没了。

使用下面的类级别代码，可以无需首先加载行就可以删除它。
<div>
<div>
<pre>// 删除符合指定条件的行Post::model()-&gt;deleteAll($condition,$params);
// 删除符合指定条件和主键的行Post::model()-&gt;deleteByPk($pk,$condition,$params);</pre>
</div>
</div>
<h2>数据验证</h2>
当插入或更新一行时，我们常常需要检查列的值是否符合相应的规则。 如果列的值是由最终用户提供的，这一点就更加重要。总体来说，我们永远不能相信任何来自客户端的数据。

当调用 <a href="http://www.yiichina.com/api/CActiveRecord#save" target="_blank" rel="noopener">save()</a> 时， AR 会自动执行数据验证。 验证是基于在 AR 类的 <a href="http://www.yiichina.com/api/CModel#rules" target="_blank" rel="noopener">rules()</a> 方法中指定的规则进行的。 关于验证规则的更多详情，请参考 <a href="http://www.yiichina.com/guide/form.model#declaring-validation-rules" target="_blank" rel="noopener">声明验证规则</a> 一节。 下面是保存记录时所需的典型的工作流。
<div>
<div>
<pre>if($post-&gt;save()){
    // 数据有效且成功插入/更新}else{
    // 数据无效，调用  getErrors() 提取错误信息}</pre>
</div>
</div>
当要插入或更新的数据由最终用户在一个 HTML 表单中提交时，我们需要将其赋给相应的 AR 属性。 我们可以通过类似如下的方式实现：
<div>
<div>
<pre>$post-&gt;title=$_POST['title'];
$post-&gt;content=$_POST['content'];
$post-&gt;save();</pre>
</div>
</div>
如果有很多列，我们可以看到一个用于这种复制的很长的列表。 这可以通过使用如下所示的 <a href="http://www.yiichina.com/api/CActiveRecord#attributes" target="_blank" rel="noopener">attributes</a> 属性简化操作。 更多信息可以在 <a href="http://www.yiichina.com/guide/form.model#securing-attribute-assignments" target="_blank" rel="noopener">安全的特性赋值</a> 一节和 <a href="http://www.yiichina.com/guide/form.action" target="_blank" rel="noopener">创建动作</a> 一节找到。
<div>
<div>
<pre>// 假设 $_POST['Post'] 是一个以列名索引列值为值的数组$post-&gt;attributes=$_POST['Post'];
$post-&gt;save();</pre>
</div>
</div>
<h2>对比记录</h2>
类似于表记录，AR 实例由其主键值来识别。 因此，要对比两个 AR 实例，假设它们属于相同的 AR 类， 我们只需要对比它们的主键值。 然而,一个更简单的方式是调用 <a href="http://www.yiichina.com/api/CActiveRecord#equals" target="_blank" rel="noopener">CActiveRecord::equals()</a>。
<blockquote>信息: 不同于 AR 在其他框架的执行, Yii 在其 AR 中支持多个主键. 一个复合主键由两个或更多字段构成。相应地， 主键值在 Yii 中表现为一个数组. <a href="http://www.yiichina.com/api/CActiveRecord#primaryKey" target="_blank" rel="noopener">primaryKey</a> 属性给出了一个 AR 实例的主键值。</blockquote>
<h2>自定义</h2>
<a href="http://www.yiichina.com/api/CActiveRecord" target="_blank" rel="noopener">CActiveRecord</a> 提供了几个占位符方法，它们可以在子类中被覆盖以自定义其工作流。
<ul>
 	<li><a href="http://www.yiichina.com/api/CModel#beforeValidate" target="_blank" rel="noopener">beforeValidate</a> 和</li>
 	<li><a href="http://www.yiichina.com/api/CActiveRecord#beforeSave" target="_blank" rel="noopener">beforeSave</a> 和 <a href="http://www.yiichina.com/api/CActiveRecord#afterSave" target="_blank" rel="noopener">afterSave</a>: 这两个将在保存 AR 实例之前和之后被调用。</li>
 	<li><a href="http://www.yiichina.com/api/CActiveRecord#beforeDelete" target="_blank" rel="noopener">beforeDelete</a> 和 <a href="http://www.yiichina.com/api/CActiveRecord#afterDelete" target="_blank" rel="noopener">afterDelete</a>: 这两个将在一个 AR 实例被删除之前和之后被调用。</li>
 	<li><a href="http://www.yiichina.com/api/CActiveRecord#afterConstruct" target="_blank" rel="noopener">afterConstruct</a>: 这个将在每个使用 new 操作符创建 AR 实例后被调用。</li>
 	<li><a href="http://www.yiichina.com/api/CActiveRecord#beforeFind" target="_blank" rel="noopener">beforeFind</a>: 这个将在一个 AR 查找器被用于执行查询（例如 find(), findAll()）之前被调用。 1.0.9 版本开始可用。</li>
 	<li><a href="http://www.yiichina.com/api/CActiveRecord#afterFind" target="_blank" rel="noopener">afterFind</a>: 这个将在每个 AR 实例作为一个查询结果创建时被调用。</li>
</ul>
<h2>使用 AR 处理事务</h2>
每个 AR 实例都含有一个属性名叫 <a href="http://www.yiichina.com/api/CActiveRecord#dbConnection" target="_blank" rel="noopener">dbConnection</a> ，是一个 <a href="http://www.yiichina.com/api/CDbConnection" target="_blank" rel="noopener">CDbConnection</a> 的实例，这样我们可以在需要时配合 AR 使用由 Yii DAO 提供的 <a href="http://www.yiichina.com/guide/database.dao#using-transactions" target="_blank" rel="noopener">事务</a> 功能:
<div>
<div>
<pre>$model=Post::model();
$transaction=$model-&gt;dbConnection-&gt;beginTransaction();
try{
    // 查找和保存是可能由另一个请求干预的两个步骤
    // 这样我们使用一个事务以确保其一致性和完整性
    $post=$model-&gt;findByPk(10);
    $post-&gt;title='new post title';
    $post-&gt;save();
    $transaction-&gt;commit();
}catch(Exception $e){
    $transaction-&gt;rollBack();
}</pre>
</div>
</div>
<h2>命名范围</h2>
<blockquote>Note: 对命名范围的支持从版本 1.0.5 开始。 命名范围的最初想法来源于 Ruby on Rails.</blockquote>
命名范围(named scope) 表示一个 命名的（named） 查询规则，它可以和其他命名范围联合使用并应用于 Active Record 查询。

命名范围主要是在 <a href="http://www.yiichina.com/api/CActiveRecord#scopes" target="_blank" rel="noopener">CActiveRecord::scopes()</a> 方法中以名字-规则对的方式声明。 如下代码在 Post 模型类中声明了两个命名范围, published 和 recently。
<div>
<div>
<pre>class Post extends CActiveRecord{
    ......
    public function scopes()
    {
        return array(
            'published'=&gt;array(
                'condition'=&gt;'status=1',
            ),
            'recently'=&gt;array(
                'order'=&gt;'create_time DESC',
                'limit'=&gt;5,
            ),
        );
    }}</pre>
</div>
</div>
每个命名范围声明为一个可用于初始化 <a href="http://www.yiichina.com/api/CDbCriteria" target="_blank" rel="noopener">CDbCriteria</a> 实例的数组。 例如，recently 命名范围指定 order 属性为create_time DESC ， limit 属性为 5。他们翻译为查询规则后就会返回最近的5篇帖子。

命名范围多用作 find 方法调用的修改器。 几个命名范围可以链到一起形成一个更有约束性的查询结果集。例如， 要找到最近发布的帖子， 我们可以使用如下代码：
<div>
<div>
<pre>$posts=Post::model()-&gt;published()-&gt;recently()-&gt;findAll();</pre>
</div>
</div>
总体来说，命名范围必须出现在一个 find 方法调用的左边。 它们中的每一个都提供一个查询规则，并联合到其他规则， 包括传递给 find 方法调用的那一个。 最终结果就像给一个查询添加了一系列过滤器。

从版本 1.0.6 开始，命名范围也可用于 update 和 delete 方法。 例如，如下代码将删除所有最近发布的帖子：
<div>
<div>
<pre>Post::model()-&gt;published()-&gt;recently()-&gt;delete();</pre>
</div>
</div>
<blockquote>注意: 命名范围只能用于类级别方法。也就是说，此方法必须使用 ClassName::model() 调用。</blockquote>
<h3>参数化的命名范围</h3>
命名范围可以参数化。例如， 我们想自定义 recently 命名范围中指定的帖子数量，要实现此目的，不是在<a href="http://www.yiichina.com/api/CActiveRecord#scopes" target="_blank" rel="noopener">CActiveRecord::scopes</a> 方法中声明命名范围， 而是需要定义一个名字和此命名范围的名字相同的方法：
<div>
<div>
<pre>public function recently($limit=5){
    $this-&gt;getDbCriteria()-&gt;mergeWith(array(
        'order'=&gt;'create_time DESC',
        'limit'=&gt;$limit,
    ));
    return $this;
}</pre>
</div>
</div>
然后，我们就可以使用如下语句获取3条最近发布的帖子。
<div>
<div>
<pre>$posts=Post::model()-&gt;published()-&gt;recently(3)-&gt;findAll();</pre>
</div>
</div>
上面的代码中，如果我们没有提供参数 3，我们将默认获取 5 条最近发布的帖子。
<h3>默认的命名范围</h3>
模型类可以有一个默认命名范围，它将应用于所有 (包括相关的那些) 关于此模型的查询。例如，一个支持多种语言的网站可能只想显示当前用户所指定的语言的内容。 因为可能会有很多关于此网站内容的查询， 我们可以定义一个默认的命名范围以解决此问题。 为实现此目的，我们覆盖 <a href="http://www.yiichina.com/api/CActiveRecord#defaultScope" target="_blank" rel="noopener">CActiveRecord::defaultScope</a> 方法如下：
<div>
<div>
<pre>class Content extends CActiveRecord{
    public function defaultScope()
    {
        return array(
            'condition'=&gt;"language='".Yii::app()-&gt;language."'",
        );
    }}</pre>
</div>
</div>
现在，如果下面的方法被调用，将会自动使用上面定义的查询规则：
<div>
<div>
<pre>$contents=Content::model()-&gt;findAll();</pre>
</div>
</div>
注意，默认的命名范围只会应用于 SELECT 查询。INSERT, UPDATE 和 DELETE 查询将被忽略。

</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>==========================================================================================================================</div>
<div>                                                                                                                                          缓存</div>
<div>==========================================================================================================================</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>==========================================================================================================================</div>
<div>                                                                                                                                        扩展 Yii</div>
<div>==========================================================================================================================</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>==========================================================================================================================</div>
<div>                                                                                                                                        测试</div>
<div>==========================================================================================================================</div>
<div></div>
<div></div>
<div></div>
<div>==========================================================================================================================</div>
<div>                                                                                                                                      专题</div>
<div>==========================================================================================================================</div>
<div>
<h1>验证和授权</h1>
</div>
<div> 验证是指核查一个人是否真的是他自己所声称的那个人。这通常需要一个用户名和密码， 但也包括任何其他可以表明身份的方式，例如一个智能卡，指纹等等。</div>
<div> 授权则是找出已通过验证的用户是否允许操作特定的资源。 这一般是通过查询此用户是否属于一个有权访问该资源的角色来判断的。</div>
<div></div>
<div>Yii 有一个内置的验证/授权（auth）框架，用起来很方便，还能对其进行自定义，使其符合特殊的需求</div>
<div></div>
<div>auth 框架的核心是一个预定义的 用户（user）应用组件 它是一个实现了 <a href="http://www.yiichina.com/api/IWebUser" target="_blank" rel="noopener">IWebUser</a> 接口的对象。 此用户组件代表当前用户的持久性认证信息</div>
<div>可以通过Yii::app()-&gt;user在任何地方访问</div>
<div>使用此用户组件，我们可以通过 <a href="http://www.yiichina.com/api/CWebUser#isGuest" target="_blank" rel="noopener">CWebUser::isGuest</a> 检查检查一个用户是否登陆</div>
<div>可以 <a href="http://www.yiichina.com/api/CWebUser#login" target="_blank" rel="noopener">登录（login）</a> 或 <a href="http://www.yiichina.com/api/CWebUser#logout" target="_blank" rel="noopener">注销（logout）</a> 一个用户</div>
<div>可以通过<a href="http://www.yiichina.com/api/CWebUser#checkAccess" target="_blank" rel="noopener">CWebUser::checkAccess</a>检查此用户是否可以执行特定的操作</div>
<div>可以获取此用户的<a href="http://www.yiichina.com/api/CWebUser#name" target="_blank" rel="noopener">唯一标识（unique identifier）</a>及其他持久性身份信息</div>
<div></div>
<div>
<h2>定义身份类</h2>
</div>
<div>为了验证一个用户，我们定义一个有验证逻辑的身份类。这个身份类实现<a href="http://www.yiichina.com/api/IUserIdentity" target="_blank" rel="noopener">IUserIdentity</a> 接口</div>
<div>

不同的类可能实现不同的验证方式（例如：OpenID，LDAP）。最好是继承 <a href="http://www.yiichina.com/api/CUserIdentity" target="_blank" rel="noopener">CUserIdentity</a>，此类是居于用户名和密码的验证方式。定义身份类的主要工作是实现<a href="http://www.yiichina.com/api/IUserIdentity#authenticate" target="_blank" rel="noopener">IUserIdentity::authenticate</a>方法。在用户会话中根据需要，身份类可能需要定义别的身份信息

</div>
<div>使用<a href="http://www.yiichina.com/guide/database.ar" target="_blank" rel="noopener">Active Record</a>来验证提供的用户名、密码和数据库的用户表是否吻合。</div>
<div>通过重写getId函数来返回验证过程中获得的_id变量（缺省的实现则是返回用户名）。</div>
<div>在验证过程中，我们还借助<a href="http://www.yiichina.com/api/CBaseUserIdentity#setState" target="_blank" rel="noopener">CBaseUserIdentity::setState</a>函数把获得的title信息存成一个状态</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>
<h2>登录和注销</h2>
</div>
<div>

使用身份类和用户部件，我们方便的实现登录和注销。
<div>
<div>
<pre>// 使用提供的用户名和密码登录用户$identity=new UserIdentity($username,$password);
if($identity-&gt;authenticate())
    Yii::app()-&gt;user-&gt;login($identity);
else
    echo $identity-&gt;errorMessage;
......
// 注销当前用户Yii::app()-&gt;user-&gt;logout();</pre>
</div>
</div>
</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>
<h3>基于Cookie 的登录</h3>
</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>
<h3>授权处理结果</h3>
</div>
<div></div>
<div></div>
<div></div>
<div>
<h2>访问控制过滤器</h2>
</div>
<div></div>
<div></div>
<div></div>
<div>
<h3>概览（Overview）</h3>
</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>
<h2>配置授权管理器</h2>
</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>
<h2>定义授权等级体系</h2>
</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>
<h2>使用业务规则</h2>
</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>
<h3>权限检查</h3>
</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>
<h3>使用默认角色</h3>
</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div>========================================================================================================================</div>
<div>                                                                                                                        关键word</div>
<div>========================================================================================================================</div>
<div>Yii::app()
Yii::app()  返回在index.php中创建的CWebApplication实例
主要负责一些全局性的功能模块
比如Yii::app()-&gt;getUser()返回的是CWebUser实例（用于表达当前用户的验证信息）
在index.php使用的配置文件，其实质就是对Yii::app()进行属性的初始化
关于CComponent的说明，这是Yii的基石</div>
要访问一个应用组件:

</div>
<!--more-->

<!--more-->

<!--more-->

<!--more-->

<!--more-->

<!--more-->

<!--more-->

<!--more-->

<!--more-->

<!--more-->

<!--more-->

<!--more-->
<div>

使用 Yii::app()-&gt;ComponentID ，其中的 ComponentID 是指组件的ID（例如Yii::app()-&gt;cache）。
<div></div>
</div>
<div>========================================================================================================================</div>
<div>                                                                                                                      专题总结</div>
<div>========================================================================================================================</div>
<div></div>
<div></div>
<div>事务机制：</div>
<div>
<ol start="1">
 	<li>$trans = Yii::app()-&gt;db-&gt;beginTransaction();</li>
 	<li>try {</li>
 	<li>    $manufacturer = new Manufacturer();</li>
 	<li>    $manufacturer-&gt;name = $name;</li>
 	<li>    $manufacturer-&gt;email = $email;</li>
 	<li>    $manufacturer-&gt;save();</li>
 	<li>    $trans-&gt;commit();</li>
 	<li>} catch (Exception $e) {</li>
 	<li>    $trans-&gt;rollback();</li>
 	<li>    $this-&gt;response(array('status' =&gt; 1, 'msg' =&gt; $e-&gt;getMessage()));</li>
 	<li>}</li>
</ol>
</div>
<div></div>
<div></div>
<div>
<pre>$transaction=$connection-&gt;beginTransaction();
try{
    $connection-&gt;createCommand($sql1)-&gt;execute();
    $connection-&gt;createCommand($sql2)-&gt;execute();
    //.... other SQL executions
    $transaction-&gt;commit();
}catch(Exception $e) // 如果有一条查询失败，则会抛出异常{
    $transaction-&gt;rollBack();
}</pre>
</div>
<div>Yii思想关键字：</div>
<div>1.做项目</div>
<div>2.yii源代码</div>
<div>3.UML图 --&gt;理解框架</div>
<div>

4.MVC  ，组件，事件

杂谈：
IAuthManager-&gt;createAuthItem
\
CApplicationComponent
\
CAuthManager-&gt;createRole  call createAuthItem
\
CDbAuthManager  -&gt;implents createAuthItem

</div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date><![CDATA[2018-01-01 15:59:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-01 07:59:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[yii%e5%ad%a6%e4%b9%a0%e7%b3%bb%e5%88%97%e4%b9%8byii%e5%a4%a7%e8%87%b4%e7%bb%93%e6%9e%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1523038747;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:270;}i:1;a:1:{s:2:"id";i:210;}i:2;a:1:{s:2:"id";i:289;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>学习方法</title>
		<link>https://www.idatavisual.com/?p=53</link>
		<pubDate>Wed, 03 Jan 2018 07:36:59 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">1.目录学习--&gt;了解框架--&gt;子框架--&gt;子子框架</span>

<span class="Apple-style-span">2.具体学习--&gt;填充内容</span>

<span class="Apple-style-span">拿白纸，回顾多少就是你所掌握的</span>

<span class="Apple-style-span">空闲时在脑海里回顾知识框架图</span>
<pre class="html">1	UML
2	代码大致结构
3	敲1k行/day
4	先看整体结构，把握思路理解类的作用
5	代码框架的工具
6	先找到main函数
7	功能模块之间的关系</pre>
&nbsp;

计划：

1.上限学习法

2.每周研究一个算法]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 15:36:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 07:36:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ad%a6%e4%b9%a0%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%96%b9%e6%b3%95%e8%ae%ba"><![CDATA[方法论]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521862123;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:27;}i:1;a:1:{s:2:"id";i:171;}i:2;a:1:{s:2:"id";i:216;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>编程方法</title>
		<link>https://www.idatavisual.com/?p=55</link>
		<pubDate>Wed, 03 Jan 2018 07:38:08 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=55</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">1.卓越的编程方法和编程习惯，编程不再痛苦
2.学会调试程序也要学会调试自己
3.不断学习优秀的方法和风格，积累经验，才能痛苦少一点，快乐多一点
</span>

<span class="Apple-style-span"><img src="http://img.blog.csdn.net/20130714132305750" alt="" /></span>
<div>

<span class="Apple-style-span">应用程序开发技巧：</span>

<span class="Apple-style-span">1.不要试图一下子搞懂整个项目,对于自己负责的部分非常了解，并且能够交付价值给小组。 </span>

<span class="Apple-style-span">2.关注于尽快交付价值 ,经理能够通过你的交付对你更加信任。这样能够向上级领导证明你的贡献以及员工价值。 你如果能够很好的理解一些内容，那么就写些笔记，或者画些类图、时序图、数据模型图等，以便你或日后其他的开发者可以进行维护。 </span>

<span class="Apple-style-span">3.维护大型项目所必须的技能 </span>

<span class="Apple-style-span"> (1)能够迅速发现需要的类 当你定位到需要修复或增强的类/方法，就已经完工了一半。 </span>

<span class="Apple-style-span"> (2) 能够分析变更的影响 ,就是要确认你的修改没有破坏代码的其他部分。 </span>

<span class="Apple-style-span">对项目进行必要了解，然后进行快速交付。你可以在不降低代码质量的前提下做到这一点。 </span>

<span class="Apple-style-span">Java新加入了一些特性，如回调机制(callback patterns) </span>

<span class="Apple-style-span">提高编程效率的技巧：</span>

<span class="Apple-style-span">1. 编写单元测试，提高效率
2. 训练你的编程能力
需要不断练习。
阅读一些诸如《Effective Java》和《Design Patterns》等类型的书，并每天做些基础训练。
从欧拉项目中找出些问题，然后 用你最喜欢的计算机语言解决它。和你做的普通项目不同，这些练习没有时间限制。因此，好好安排利用你的时间正确地做事。通过这样的练习，你的工作效率将有很大提高。这是显而易见的，不是吗？
3. 使用并改进开发库
4. 阅读代码和技术资料
阅读代码和修改/编写代码一样困难。在当今开源世界的情况下，可以参阅大量优质代码。
选择一个你最喜欢的开发库，然后仔细阅读以充分利用里面的资源。
或许你不能很快便理解所有的内容，但是通过不断的训练，你将能够区分其中使用的不同模式，同时把这些模式用到你的代码中。


</span>

</div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 15:38:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 07:38:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%bc%96%e7%a8%8b%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%96%b9%e6%b3%95%e8%ae%ba"><![CDATA[方法论]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521848565;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:216;}i:1;a:1:{s:2:"id";i:141;}i:2;a:1:{s:2:"id";i:45;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LAMP解决方案</title>
		<link>https://www.idatavisual.com/?p=57</link>
		<pubDate>Wed, 03 Jan 2018 07:39:13 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[<div>LAMP网站架构方案</div>
<span class="Apple-style-span">LAMP（Linux- Apache-MySQL-PHP）网站架构是目前国际流行的Web框架，</span>
<span class="Apple-style-span">该框架包括：Linux操作系统，Apache网络服务器，MySQL数据库，Perl、PHP或者Python编程语言，</span>

<span class="Apple-style-span">优势：</span>
<span class="Apple-style-span">和 Java/J2EE架构相比，LAMP具有Web资源丰富、轻量、快速开发等特点，微软的.NET架构相比，LAMP具有通用、跨平台、高性能、低价格的 优势，因此LAMP无论是性能、质量还是价格都是企业搭建网站的首选平台。</span>

<span class="Apple-style-span">对于大流量、大并发量的网站系统架构来说:</span>
<div><span class="Apple-style-span">硬件上</span>使用高性能的服务器、负载均衡、CDN等，</div>
<div><span class="Apple-style-span">在软件架构上:</span>使用高性能的操作系统（OS）、高性能的网页服务器（Web Server）、高性能的数据库（Database）、高效率的编程语言等。</div>
<div>
下面我将从这几点对其一一讨论:</div>
<div>
操作系统
免费的高度稳定性的服务器可以用CentOS

Web服务器、缓存和PHP加速
Apache是LAMP架构最核心的WebServer，开源、稳定、模块丰富是Apache的优势。
Apache的缺点:有些臃肿，内存和CPU开销大，性能上有损耗，不如一些轻量级的Web服务器（例如nginx）高效</div>
<div>轻量级的Web服务器:对于静态文件的响应能力来说远高于Apache服务器。

Apache做为WebServer是负载PHP的最佳选择，
如果流量很大的话，可以采用nginx来负载非PHP的Web请求。nginx是一个高性能的HTTP和反向代理服器，Nginx以它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。</div>
<div>Nginx不支持PHP和CGI等动态语言，但支持负载均衡和容错，可和Apache配合使用，是轻量级的HTTP服务器的首选。

Web服务器的缓存方案:</div>
<div>1&gt;Apache提供了自己的缓存模块</div>
<div>2&gt;外加的Squid模块进行缓存，这两种方式均可以有效的提高Apache的访问响应能力。Squid Cache是一个Web缓存服务器，支持高效的缓存，可以作为网页服务器的前置cache服务器缓存相关请求来提高Web服务器的速度，把Squid放在 Apache的前端来缓存Web服务器生成的动态内容，而Web应用程序只需要适当地设置页面实效时间即可。如访问量巨大则可考虑使用memcache作 为分布式缓存。</div>
<div></div>
<div>
<div>PHP的加速:</div>
使用eAccelerator加速器，eAccelerator是一个自由开放源码PHP加速器，优化和动 态内容缓存，提高了性能PHP脚本的缓存性能，使得PHP脚本在编译的状态下，对服务器的开销几乎完全消除。它还有对脚本起优化作用，以加快其执行效率。 使PHP程序代码执效率能提高1-10倍。
具体的解决方案有以下几种：
1、squid + Apache + PHP + eAccelerator
使用Apache负载PHP，使用squid进行缓存，html或图片的请求可以直接由squid返回给用户。很多大型网站都采用这种架构。
2、nginx/Apache + PHP（fastcgi） + eAccelerator
使用nginx或Apache负载PHP，PHP使用fastcgi方式运行，效率较高。
3、nginx + Apache + PHP + eAccelerator
此方案综合了nginx和Apache的优点，使用Apache负载PHP，nginx负责解析其他Web请求，使用nginx的rewrite模块，Apache端口不对外开放。

数据库
开源的数据库中，MySQL在性能、稳定性和功能上是首选，可以达到百万级别的数据存储，网站初期可以将MySQL和Web服务器放在一起</div>
<div>
当访问量达到一定规模后，应该将MySQL数据库从WebServer上独立出来，在单独的服务器上运行，同时保持WebServer和MySQL服务器的稳定连接。
当数据库访问量达到更大的级别，可以考虑使用MySQL Cluster等数据库集群或者库表散列等解决方案。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 15:39:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 07:39:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lamp%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web%e6%9c%8d%e5%8a%a1"><![CDATA[web服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1520141928;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:210;}i:1;a:1:{s:2:"id";i:64;}i:2;a:1:{s:2:"id";i:43;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Redis总结</title>
		<link>https://www.idatavisual.com/?p=59</link>
		<pubDate>Wed, 03 Jan 2018 07:48:56 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=59</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">redis是一个key-value存储系统。和Memcached类似。</span>

<span class="Apple-style-span">1&gt;它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hashs（哈希类型）。</span>

<span class="Apple-style-span">2&gt;这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</span>

<span class="Apple-style-span">在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。</span>

<span class="Apple-style-span">3&gt;区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</span><!--more-->

<span class="Apple-style-span">Redis提供了丰富的命令（command）对数据库和各种数据类型进行操作，这些command可以在Linux终端使用。在编程时，比如使用Redis 的Java语言包，这些命令都有对应的方法。下面将Redis提供的命令做一总结。</span>

<span class="Apple-style-span">官网命令列表：http://redis.io/commands （英文）</span>
<h3><span class="Apple-style-span">1、连接操作相关的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">quit：关闭连接（connection）</span></li>
 	<li><span class="Apple-style-span">auth：简单密码认证</span></li>
</ul>
<h3><span class="Apple-style-span">2、对value操作的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">exists(key)：确认一个key是否存在</span></li>
 	<li><span class="Apple-style-span">del(key)：删除一个key</span></li>
 	<li><span class="Apple-style-span">type(key)：返回值的类型</span></li>
 	<li><span class="Apple-style-span">keys(pattern)：返回满足给定pattern的所有key</span></li>
 	<li><span class="Apple-style-span">randomkey：随机返回key空间的一个key</span></li>
 	<li><span class="Apple-style-span">rename(oldname, newname)：将key由oldname重命名为newname，若newname存在则删除newname表示的key</span></li>
 	<li><span class="Apple-style-span">dbsize：返回当前数据库中key的数目</span></li>
 	<li><span class="Apple-style-span">expire：设定一个key的活动时间（s）</span></li>
 	<li><span class="Apple-style-span">ttl：获得一个key的活动时间</span></li>
 	<li><span class="Apple-style-span">select(index)：按索引查询</span></li>
 	<li><span class="Apple-style-span">move(key, dbindex)：将当前数据库中的key转移到有dbindex索引的数据库</span></li>
 	<li><span class="Apple-style-span">flushdb：删除当前选择数据库中的所有key</span></li>
 	<li><span class="Apple-style-span">flushall：删除所有数据库中的所有key</span></li>
</ul>
<h3><span class="Apple-style-span"><span id="more-2211"></span>3、对String操作的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">set(key, value)：给数据库中名称为key的string赋予值value</span></li>
 	<li><span class="Apple-style-span">get(key)：返回数据库中名称为key的string的value</span></li>
 	<li><span class="Apple-style-span">getset(key, value)：给名称为key的string赋予上一次的value</span></li>
 	<li><span class="Apple-style-span">mget(key1, key2,…, key N)：返回库中多个string（它们的名称为key1，key2…）的value</span></li>
 	<li><span class="Apple-style-span">setnx(key, value)：如果不存在名称为key的string，则向库中添加string，名称为key，值为value</span></li>
 	<li><span class="Apple-style-span">setex(key, time, value)：向库中添加string（名称为key，值为value）同时，设定过期时间time</span></li>
 	<li><span class="Apple-style-span">mset(key1, value1, key2, value2,…key N, value N)：同时给多个string赋值，名称为key i的string赋值value i</span></li>
 	<li><span class="Apple-style-span">msetnx(key1, value1, key2, value2,…key N, value N)：如果所有名称为key i的string都不存在，则向库中添加string，名称key i赋值为value i</span></li>
 	<li><span class="Apple-style-span">incr(key)：名称为key的string增1操作</span></li>
 	<li><span class="Apple-style-span">incrby(key, integer)：名称为key的string增加integer</span></li>
 	<li><span class="Apple-style-span">decr(key)：名称为key的string减1操作</span></li>
 	<li><span class="Apple-style-span">decrby(key, integer)：名称为key的string减少integer</span></li>
 	<li><span class="Apple-style-span">append(key, value)：名称为key的string的值附加value</span></li>
 	<li><span class="Apple-style-span">substr(key, start, end)：返回名称为key的string的value的子串</span></li>
</ul>
<h3><span class="Apple-style-span">4、对List操作的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">rpush(key, value)：在名称为key的list尾添加一个值为value的元素</span></li>
 	<li><span class="Apple-style-span">lpush(key, value)：在名称为key的list头添加一个值为value的 元素</span></li>
 	<li><span class="Apple-style-span">llen(key)：返回名称为key的list的长度</span></li>
 	<li><span class="Apple-style-span">lrange(key, start, end)：返回名称为key的list中start至end之间的元素（下标从0开始，下同）</span></li>
 	<li><span class="Apple-style-span">ltrim(key, start, end)：截取名称为key的list，保留start至end之间的元素</span></li>
 	<li><span class="Apple-style-span">lindex(key, index)：返回名称为key的list中index位置的元素</span></li>
 	<li><span class="Apple-style-span">lset(key, index, value)：给名称为key的list中index位置的元素赋值为value</span></li>
 	<li><span class="Apple-style-span">lrem(key, count, value)：删除count个名称为key的list中值为value的元素。count为0，删除所有值为value的元素，count&gt;0从头至尾删除count个值为value的元素，count&lt;0从尾到头删除|count|个值为value的元素。 lpop(key)：返回并删除名称为key的list中的首元素 rpop(key)：返回并删除名称为key的list中的尾元素 blpop(key1, key2,… key N, timeout)：lpop命令的block版本。即当timeout为0时，若遇到名称为key i的list不存在或该list为空，则命令结束。如果timeout&gt;0，则遇到上述情况时，等待timeout秒，如果问题没有解决，则对keyi+1开始的list执行pop操作。</span></li>
 	<li><span class="Apple-style-span">brpop(key1, key2,… key N, timeout)：rpop的block版本。参考上一命令。</span></li>
 	<li><span class="Apple-style-span">rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部</span></li>
</ul>
<h3><span class="Apple-style-span">5、对Set操作的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">sadd(key, member)：向名称为key的set中添加元素member</span></li>
 	<li><span class="Apple-style-span">srem(key, member) ：删除名称为key的set中的元素member</span></li>
 	<li><span class="Apple-style-span">spop(key) ：随机返回并删除名称为key的set中一个元素</span></li>
 	<li><span class="Apple-style-span">smove(srckey, dstkey, member) ：将member元素从名称为srckey的集合移到名称为dstkey的集合</span></li>
 	<li><span class="Apple-style-span">scard(key) ：返回名称为key的set的基数</span></li>
 	<li><span class="Apple-style-span">sismember(key, member) ：测试member是否是名称为key的set的元素</span></li>
 	<li><span class="Apple-style-span">sinter(key1, key2,…key N) ：求交集</span></li>
 	<li><span class="Apple-style-span">sinterstore(dstkey, key1, key2,…key N) ：求交集并将交集保存到dstkey的集合</span></li>
 	<li><span class="Apple-style-span">sunion(key1, key2,…key N) ：求并集</span></li>
 	<li><span class="Apple-style-span">sunionstore(dstkey, key1, key2,…key N) ：求并集并将并集保存到dstkey的集合</span></li>
 	<li><span class="Apple-style-span">sdiff(key1, key2,…key N) ：求差集</span></li>
 	<li><span class="Apple-style-span">sdiffstore(dstkey, key1, key2,…key N) ：求差集并将差集保存到dstkey的集合</span></li>
 	<li><span class="Apple-style-span">smembers(key) ：返回名称为key的set的所有元素</span></li>
 	<li><span class="Apple-style-span">srandmember(key) ：随机返回名称为key的set的一个元素</span></li>
</ul>
<h3><span class="Apple-style-span">6、对zset（sorted set）操作的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">zadd(key, score, member)：向名称为key的zset中添加元素member，score用于排序。如果该元素已经存在，则根据score更新该元素的顺序。</span></li>
 	<li><span class="Apple-style-span">zrem(key, member) ：删除名称为key的zset中的元素member</span></li>
 	<li><span class="Apple-style-span">zincrby(key, increment, member) ：如果在名称为key的zset中已经存在元素member，则该元素的score增加increment；否则向集合中添加该元素，其score的值为increment</span></li>
 	<li><span class="Apple-style-span">zrank(key, member) ：返回名称为key的zset（元素已按score从小到大排序）中member元素的rank（即index，从0开始），若没有member元素，返回“nil”</span></li>
 	<li><span class="Apple-style-span">zrevrank(key, member) ：返回名称为key的zset（元素已按score从大到小排序）中member元素的rank（即index，从0开始），若没有member元素，返回“nil”</span></li>
 	<li><span class="Apple-style-span">zrange(key, start, end)：返回名称为key的zset（元素已按score从小到大排序）中的index从start到end的所有元素</span></li>
 	<li><span class="Apple-style-span">zrevrange(key, start, end)：返回名称为key的zset（元素已按score从大到小排序）中的index从start到end的所有元素</span></li>
 	<li><span class="Apple-style-span">zrangebyscore(key, min, max)：返回名称为key的zset中score &gt;= min且score &lt;= max的所有元素 zcard(key)：返回名称为key的zset的基数 zscore(key, element)：返回名称为key的zset中元素element的score zremrangebyrank(key, min, max)：删除名称为key的zset中rank &gt;= min且rank &lt;= max的所有元素 zremrangebyscore(key, min, max) ：删除名称为key的zset中score &gt;= min且score &lt;= max的所有元素</span></li>
 	<li><span class="Apple-style-span">zunionstore / zinterstore(dstkeyN, key1,…,keyN, WEIGHTS w1,…wN, AGGREGATE SUM|MIN|MAX)：对N个zset求并集和交集，并将最后的集合保存在dstkeyN中。对于集合中每一个元素的score，在进行AGGREGATE运算前，都要乘以对于的WEIGHT参数。如果没有提供WEIGHT，默认为1。默认的AGGREGATE是SUM，即结果集合中元素的score是所有集合对应元素进行SUM运算的值，而MIN和MAX是指，结果集合中元素的score是所有集合对应元素中最小值和最大值。</span></li>
</ul>
<h3><span class="Apple-style-span">7、对Hash操作的命令</span></h3>
<ul>
 	<li><span class="Apple-style-span">hset(key, field, value)：向名称为key的hash中添加元素field&lt;—&gt;value</span></li>
 	<li><span class="Apple-style-span">hget(key, field)：返回名称为key的hash中field对应的value</span></li>
 	<li><span class="Apple-style-span">hmget(key, field1, …,field N)：返回名称为key的hash中field i对应的value</span></li>
 	<li><span class="Apple-style-span">hmset(key, field1, value1,…,field N, value N)：向名称为key的hash中添加元素field i&lt;—&gt;value i</span></li>
 	<li><span class="Apple-style-span">hincrby(key, field, integer)：将名称为key的hash中field的value增加integer</span></li>
 	<li><span class="Apple-style-span">hexists(key, field)：名称为key的hash中是否存在键为field的域</span></li>
 	<li><span class="Apple-style-span">hdel(key, field)：删除名称为key的hash中键为field的域</span></li>
 	<li><span class="Apple-style-span">hlen(key)：返回名称为key的hash中元素个数</span></li>
 	<li><span class="Apple-style-span">hkeys(key)：返回名称为key的hash中所有键</span></li>
 	<li><span class="Apple-style-span">hvals(key)：返回名称为key的hash中所有键对应的value</span></li>
 	<li><span class="Apple-style-span">hgetall(key)：返回名称为key的hash中所有的键（field）及其对应的value</span></li>
</ul>
<h3><span class="Apple-style-span">8、持久化</span></h3>
<ul>
 	<li><span class="Apple-style-span">save：将数据同步保存到磁盘</span></li>
 	<li><span class="Apple-style-span">bgsave：将数据异步保存到磁盘</span></li>
 	<li><span class="Apple-style-span">lastsave：返回上次成功将数据保存到磁盘的Unix时戳</span></li>
 	<li><span class="Apple-style-span">shundown：将数据同步保存到磁盘，然后关闭服务</span></li>
</ul>
<h3><span class="Apple-style-span">9、远程服务控制</span></h3>
<ul>
 	<li><span class="Apple-style-span">info：提供服务器的信息和统计</span></li>
 	<li><span class="Apple-style-span">monitor：实时转储收到的请求</span></li>
 	<li><span class="Apple-style-span">slaveof：改变复制策略设置</span></li>
 	<li><span class="Apple-style-span">config：在运行时配置Redis服务器</span></li>
</ul>
<div><span class="Apple-style-span">Redis 事务机制：</span></div>
<div>
<div id="cnblogs_post_body">

<span class="Apple-style-span">二、相关命令列表：</span>
<table class=" xhe-border" border="0" align="center">
<tbody>
<tr>
<td><span class="Apple-style-span">命令原型</span></td>
<td><span class="Apple-style-span">时间复杂度</span></td>
<td><span class="Apple-style-span">命令描述</span></td>
<td><span class="Apple-style-span">返回值</span></td>
</tr>
<tr>
<td><span class="Apple-style-span">MULTI</span></td>
<td><span class="Apple-style-span">用于标记事务的开始，其后执行的命令都将被存入命令队列，直到执行EXEC时，这些命令才会被原子的执行。</span></td>
<td><span class="Apple-style-span">始终返回OK</span></td>
</tr>
<tr>
<td><span class="Apple-style-span">EXEC</span></td>
<td><span class="Apple-style-span">执行在一个事务内命令队列中的所有命令，同时将当前连接的状态恢复为正常状态，即非事务状态。如果在事务中执行了WATCH命令，那么只有当WATCH所监控的Keys没有被修改的前提下，EXEC命令才能执行事务队列中的所有命令，否则EXEC将放弃当前事务中的所有命令。</span></td>
<td><span class="Apple-style-span">原子性的返回事务中各条命令的返回结果。如果在事务中使用了WATCH，一旦事务被放弃，EXEC将返回NULL-multi-bulk回复。</span></td>
</tr>
<tr>
<td><span class="Apple-style-span">DISCARD</span></td>
<td><span class="Apple-style-span">回滚事务队列中的所有命令，同时再将当前连接的状态恢复为正常状态，即非事务状态。如果WATCH命令被使用，该命令将UNWATCH所有的Keys。</span></td>
<td><span class="Apple-style-span">始终返回OK。</span></td>
</tr>
<tr>
<td><span class="Apple-style-span">WATCHkey [key ...]</span></td>
<td><span class="Apple-style-span">O(1)</span></td>
<td><span class="Apple-style-span">在MULTI命令执行之前，可以指定待监控的Keys，然而在执行EXEC之前，如果被监控的Keys发生修改，EXEC将放弃执行该事务队列中的所有命令。</span></td>
<td><span class="Apple-style-span">始终返回OK。</span></td>
</tr>
<tr>
<td><span class="Apple-style-span">UNWATCH</span></td>
<td><span class="Apple-style-span">O(1)</span></td>
<td><span class="Apple-style-span">取消当前事务中指定监控的Keys，如果执行了EXEC或DISCARD命令，则无需再手工执行该命令了，因为在此之后，事务中所有被监控的Keys都将自动取消。</span></td>
<td><span class="Apple-style-span">始终返回OK。</span></td>
</tr>
</tbody>
</table>
<span class="Apple-style-span">三、命令示例：</span>

<span class="Apple-style-span">   1. 事务被正常执行：</span>
<span class="Apple-style-span">    #在Shell命令行下执行Redis的客户端工具。</span>
/&gt;<span class="Apple-style-span"> redis-cli
#在当前连接上启动一个新的事务。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">multi</span>
OK
<span class="Apple-style-span">   #执行事务中的第一条命令，从该命令的返回结果可以看出，该命令并没有立即执行，而是存于事务的命令队列。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">incr t1</span>
QUEUED
<span class="Apple-style-span">    #又执行一个新的命令，从结果可以看出，该命令也被存于事务的命令队列。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">incr t2</span>
QUEUED
<span class="Apple-style-span">   #执行事务命令队列中的所有命令，从结果可以看出，队列中命令的结果得到返回。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">exec</span>
1) (integer) 1
2) (integer) 1

<span class="Apple-style-span">   2. 事务中存在失败的命令：</span>
<span class="Apple-style-span">    #开启一个新的事务。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">multi</span>
OK
<span class="Apple-style-span">    #设置键a的值为string类型的3。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">set a 3</span>
QUEUED
<span class="Apple-style-span">    #从键a所关联的值的头部弹出元素，由于该值是字符串类型，而lpop命令仅能用于List类型，因此在执行exec命令时，该命令将会失败。</span>
redis 127.0.0.1:6379&gt;<span class="Apple-style-span"> lpop a</span>
QUEUED
<span class="Apple-style-span">    #再次设置键a的值为字符串4。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">set a 4</span>
QUEUED
<span class="Apple-style-span">    #获取键a的值，以便确认该值是否被事务中的第二个set命令设置成功。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">get a</span>
QUEUED
<span class="Apple-style-span">    #从结果中可以看出，事务中的第二条命令lpop执行失败，而其后的set和get命令均执行成功，这一点是Redis的事务与关系型数据库中的事务之间最为重要的差别。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">exec</span>
1) OK
2) (error) ERR Operation against a key holding the wrong kind of value
3) OK
4) "4"

<span class="Apple-style-span">   3. 回滚事务：</span>
<span class="Apple-style-span">    #为键t2设置一个事务执行前的值。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">set t2 tt</span>
OK
<span class="Apple-style-span">    #开启一个事务。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">multi</span>
OK
<span class="Apple-style-span">    #在事务内为该键设置一个新值。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">set t2 ttnew</span>
QUEUED
<span class="Apple-style-span">    #放弃事务。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">discard</span>
OK
<span class="Apple-style-span">    #查看键t2的值，从结果中可以看出该键的值仍为事务开始之前的值。</span>
redis 127.0.0.1:6379&gt; <span class="Apple-style-span">get t2</span>
"tt"

<span class="Apple-style-span">四、WATCH命令和基于CAS的乐观锁：</span>

在Redis的事务中，WATCH命令可用于提供CAS(check-and-set)功能。假设我们通过WATCH命令在事务执行之前监控了多个Keys，倘若在WATCH之后有任何Key的值发生了变化，EXEC命令执行的事务都将被放弃，同时返回Null multi-bulk应答以通知调用者事务执行失败。例如，我们再次假设Redis中并未提供incr命令来完成键值的原子性递增，如果要实现该功能，我们只能自行编写相应的代码。其伪码如下：
<span class="Apple-style-span">      val = GET mykey</span>
<span class="Apple-style-span">      val = val + 1</span>
<span class="Apple-style-span">      SET mykey $val</span>
以上代码只有在单连接的情况下才可以保证执行结果是正确的，因为如果在同一时刻有多个客户端在同时执行该段代码，那么就会出现多线程程序中经常出现的一种错误场景--竞态争用(race condition)。比如，客户端A和B都在同一时刻读取了mykey的原有值，假设该值为10，此后两个客户端又均将该值加一后set回Redis服务器，这样就会导致mykey的结果为11，而不是我们认为的12。为了解决类似的问题，我们需要借助WATCH命令的帮助，见如下代码：
<span class="Apple-style-span">      WATCH mykey</span>
<span class="Apple-style-span">      val = GET mykey</span>
<span class="Apple-style-span">      val = val + 1</span>
<span class="Apple-style-span">      MULTI</span>
<span class="Apple-style-span">      SET mykey $val</span>
<span class="Apple-style-span">      EXEC</span>
和此前代码不同的是，新代码在获取mykey的值之前先通过WATCH命令监控了该键，此后又将set命令包围在事务中，这样就可以有效的保证每个连接在执行EXEC之前，如果当前连接获取的mykey的值被其它连接的客户端修改，那么当前连接的EXEC命令将执行失败。这样调用者在判断返回值后就可以获悉val是否被重新设置成功。

</div>
&nbsp;

<span class="Apple-style-span">下载http://www.oschina.net/p/redis</span>

<span class="Apple-style-span">解压后里面有：lib 源文件 、examples 例子、test测试</span>

<span class="Apple-style-span">将lib目录拷贝到你的项目中，就可以开始你的predis操作了。</span>

<span class="Apple-style-span">//使用autoload加载相关库,这边重点就是为了require $file;
spl_autoload_register(function($class) {
$file = __DIR__.’/lib/Predis/’.$class.’.php’;
if (file_exists($file)) {
require $file;
return true;
}
});</span>

<span class="Apple-style-span">//配置连接的IP、端口、以及相应的数据库
$server = array(
‘host’     =&gt; ’127.0.0.1′,
‘port’     =&gt; 6379,
‘database’ =&gt; 15
);
$redis = new Client($server);</span>

<span class="Apple-style-span">//普通set/get操作
$redis-&gt;set(‘library’, ‘predis’);
$retval = $redis-&gt;get(‘library’);
echo $retval; //显示 ‘predis’</span>

<span class="Apple-style-span">//setex set一个存储时效
$redis-&gt;setex(‘str’, 10, ‘bar’); //表示存储有效期为10秒</span>

<span class="Apple-style-span">//setnx/msetnx相当于add操作,不会覆盖已有值
$redis-&gt;setnx(‘foo’,12); //true
$redis-&gt;setnx(‘foo’,34); //false</span>

<span class="Apple-style-span">//getset操作,set的变种,结果返回替换前的值
$redis-&gt;getset(‘foo’,56);//返回34</span>

<span class="Apple-style-span">// incrby/incr/decrby/decr 对值的递增和递减
$redis-&gt;incr(‘foo’); //foo为57
$redis-&gt;incrby(‘foo’,2); //foo为59</span>

<span class="Apple-style-span">//exists检测是否存在某值
$redis-&gt;exists(‘foo’);//true</span>

<span class="Apple-style-span">//del 删除
$redis-&gt;del(‘foo’);//true</span>

<span class="Apple-style-span">//type 类型检测,字符串返回string,列表返回 list,set表返回set/zset,hash表返回hash
$redis-&gt;type(‘foo’);//不存在,返回none
$redis-&gt;set(‘str’,'test’);
$redis-&gt;type(‘str’); //字符串，返回string</span>

<span class="Apple-style-span">//append 连接到已存在字符串
$redis-&gt;append(‘str’,'_123′); //返回累加后的字符串长度8,此进str为 ‘test_123′</span>

<span class="Apple-style-span">//setrange 部分替换操作
$redis-&gt;setrange(‘str’,0,’abc’); //返回3,参数2为0时等同于set操作
$redis-&gt;setrange(‘str’,2,’cd’);//返回4,表示从第2个字符后替换,这时’str’为’abcd’</span>

<span class="Apple-style-span">//substr 部分获取操作
$redis-&gt;substr(‘str’,0,2);//表示从第0个起，取到第2个字符，共3个，返回’abc’</span>

<span class="Apple-style-span">//strlen 获取字符串长度
$redis-&gt;strlen(‘str’); //返回4</span>

<span class="Apple-style-span">//setbit/getbit 位存储和获取
$redis-&gt;setbit(‘binary’,31,1);  //表示在第31位存入1,这边可能会有大小端问题?不过没关系,getbit 应该不会有问题
$redis-&gt;getbit(‘binary’,31);    //返回1</span>

<span class="Apple-style-span">//keys 模糊查找功能,支持*号以及?号(匹配一个字符)
$redis-&gt;set(‘foo1′,123);
$redis-&gt;set(‘foo2′,456);
$redis-&gt;keys(‘foo*’); //返回foo1和foo2的array
$redis-&gt;keys(‘f?o?’);  //同上</span>

<span class="Apple-style-span">//randomkey 随机返回一个key
$redis-&gt;randomkey(); //可能是返回 ‘foo1′或者是’foo2′及其它任何一存在redis的key</span>

<span class="Apple-style-span">//rename/renamenx 对key进行改名,所不同的是renamenx不允许改成已存在的key
$redis-&gt;rename(‘str’,'str2′); //把原先命名为’str’的key改成了’str2′</span>

<span class="Apple-style-span">//expire 设置key-value的时效性,ttl 获取剩余有效期,persist 重新设置为永久存储
$redis-&gt;expire(‘foo’, 1); //设置有效期为1秒
$redis-&gt;ttl(‘foo’); //返回有效期值1s
$redis-&gt;expire(‘foo’); //取消expire行为</span>

<span class="Apple-style-span">//dbsize 返回redis当前数据库的记录总数
$redis-&gt;dbsize();</span>

<span class="Apple-style-span">/*
队列操作
*/</span>

<span class="Apple-style-span">//rpush/rpushx 有序列表操作,从队列后插入元素
//lpush/lpushx 和rpush/rpushx的区别是插入到队列的头部,同上,’x'含义是只对已存在的key进行操作
$redis-&gt;rpush(‘fooList’, ‘bar1′); //返回一个列表的长度1
$redis-&gt;lpush(‘fooList’, ‘bar0′); //返回一个列表的长度2
$redis-&gt;rpushx(‘fooList’, ‘bar2′); //返回3,rpushx只对已存在的队列做添加,否则返回0
//llen返回当前列表长度
$redis-&gt;llen(‘fooList’);//3</span>

<span class="Apple-style-span">//lrange 返回队列中一个区间的元素
$redis-&gt;lrange(‘fooList’,0,1); //返回数组包含第0个至第1个共2个元素
$redis-&gt;lrange(‘fooList’,0,-1);//返回第0个至倒数第一个,相当于返回所有元素,注意redis中很多时候会用到负数,下同</span>

<span class="Apple-style-span">//lindex 返回指定顺序位置的list元素
$redis-&gt;lindex(‘fooList’,1); //返回’bar1′</span>

<span class="Apple-style-span">//lset 修改队列中指定位置的value
$redis-&gt;lset(‘fooList’,1,’123′);//修改位置1的元素,返回true</span>

<span class="Apple-style-span">//lrem 删除队列中左起指定数量的字符
$redis-&gt;lrem(‘fooList’,1,’_'); //删除队列中左起(右起使用-1)1个字符’_'(若有)</span>

<span class="Apple-style-span">//lpop/rpop 类似栈结构地弹出(并删除)最左或最右的一个元素
$redis-&gt;lpop(‘fooList’); //’bar0′
$redis-&gt;rpop(‘fooList’); //’bar2′</span>

<span class="Apple-style-span">//ltrim 队列修改，保留左边起若干元素，其余删除
$redis-&gt;ltrim(‘fooList’, 0,1); //保留左边起第0个至第1个元素</span>

<span class="Apple-style-span">//rpoplpush 从一个队列中pop出元素并push到另一个队列
$redis-&gt;rpush(‘list1′,’ab0′);
$redis-&gt;rpush(‘list1′,’ab1′);
$redis-&gt;rpush(‘list2′,’ab2′);
$redis-&gt;rpush(‘list2′,’ab3′);
$redis-&gt;rpoplpush(‘list1′,’list2′);//结果list1 =&gt;array(‘ab0′),list2 =&gt;array(‘ab1′,’ab2′,’ab3′)
$redis-&gt;rpoplpush(‘list2′,’list2′);//也适用于同一个队列,把最后一个元素移到头部list2 =&gt;array(‘ab3′,’ab1′,’ab2′)</span>

<span class="Apple-style-span">//linsert 在队列的中间指定元素前或后插入元素
$redis-&gt;linsert(‘list2′, ‘before’,'ab1′,’123′); //表示在元素’ab1′之前插入’123′
$redis-&gt;linsert(‘list2′, ‘after’,'ab1′,’456′);   //表示在元素’ab1′之后插入’456′</span>

<span class="Apple-style-span">//blpop/brpop 阻塞并等待一个列队不为空时，再pop出最左或最右的一个元素（这个功能在php以外可以说非常好用）
//brpoplpush 同样是阻塞并等待操作，结果同rpoplpush一样
$redis-&gt;blpop(‘list3′,10); //如果list3为空则一直等待,直到不为空时将第一元素弹出,10秒后超时</span>

<span class="Apple-style-span">/**
set表操作
*/</span>

<span class="Apple-style-span">//sadd 增加元素,返回true,重复返回false
$redis-&gt;sadd(‘set1′,’ab’);
$redis-&gt;sadd(‘set1′,’cd’);
$redis-&gt;sadd(‘set1′,’ef’);</span>

<span class="Apple-style-span">//srem 移除指定元素
$redis-&gt;srem(‘set1′,’cd’); //删除’cd’元素</span>

<span class="Apple-style-span">//spop 弹出首元素
$redis-&gt;spop(‘set1′);</span>

<span class="Apple-style-span">//smove 移动当前set表的指定元素到另一个set表
$redis-&gt;sadd(‘set2′,’123′);
$redis-&gt;smove(‘set1′,’set2′,’ab’);//移动’set1′中的’ab’到’set2′,返回true or false</span>

<span class="Apple-style-span">//scard 返回当前set表元素个数
$redis-&gt;scard(‘set2′);//2</span>

<span class="Apple-style-span">//sismember 判断元素是否属于当前表
$redis-&gt;sismember(‘set2′,’123′); //true or false</span>

<span class="Apple-style-span">//smembers 返回当前表的所有元素
$redis-&gt;smembers(‘set2′); //array(’123′,’ab’);</span>

<span class="Apple-style-span">//sinter/sunion/sdiff  返回两个表中元素的交集/并集/补集
$redis-&gt;sadd(‘set1′,’ab’);
$redis-&gt;sinter(‘set2′,’set1′); //返回array(‘ab’)</span>

<span class="Apple-style-span">//sinterstore/sunionstore/sdiffstore 将两个表交集/并集/补集元素copy到第三个表中
$redis-&gt;set(‘foo’,0);
$redis-&gt;sinterstore(‘foo’,'set1′); //这边等同于将’set1′的内容copy到’foo’中，并将’foo’转为set表
$redis-&gt;sinterstore(‘foo’,array(‘set1′,’set2′)); //将’set1′和’set2′中相同的元素copy到’foo’表中,覆盖’foo’原有内容</span>

<span class="Apple-style-span">//srandmember 返回表中一个随机元素
$redis-&gt;srandmember(‘set1′);</span>

<span class="Apple-style-span">/**
有序set表操作
*/</span>

<span class="Apple-style-span">//sadd 增加元素,并设置序号,返回true,重复返回false
$redis-&gt;zadd(‘zset1′,1,’ab’);
$redis-&gt;zadd(‘zset1′,2,’cd’);
$redis-&gt;zadd(‘zset1′,3,’ef’);</span>

<span class="Apple-style-span">//zincrby 对指定元素索引值的增减,改变元素排列次序
$redis-&gt;zincrby(‘zset1′,10,’ab’);//返回11</span>

<span class="Apple-style-span">//zrem 移除指定元素
$redis-&gt;zrem(‘zset1′,’ef’); //true or false</span>

<span class="Apple-style-span">//zrange 按位置次序返回表中指定区间的元素
$redis-&gt;zrange(‘zset1′,0,1); //返回位置0和1之间(两个)的元素
$redis-&gt;zrange(‘zset1′,0,-1);//返回位置0和倒数第一个元素之间的元素(相当于所有元素)</span>

<span class="Apple-style-span">//zrevrange 同上,返回表中指定区间的元素,按次序倒排
$redis-&gt;zrevrange(‘zset1′,0,-1); //元素顺序和zrange相反</span>

<span class="Apple-style-span">//zrangebyscore/zrevrangebyscore 按顺序/降序返回表中指定索引区间的元素
$redis-&gt;zadd(‘zset1′,3,’ef’);
$redis-&gt;zadd(‘zset1′,5,’gh’);
$redis-&gt;zrangebyscore(‘zset1′,2,9); //返回索引值2-9之间的元素 array(‘ef’,'gh’)
//参数形式
$redis-&gt;zrangebyscore(‘zset1′,2,9,’withscores’); //返回索引值2-9之间的元素并包含索引值 array(array(‘ef’,3),array(‘gh’,5))
$redis-&gt;zrangebyscore(‘zset1′,2,9,array(‘withscores’ =&gt;true,’limit’=&gt;array(1, 2))); //返回索引值2-9之间的元素,’withscores’ =&gt;true表示包含索引值; ‘limit’=&gt;array(1, 2),表示最多返回2条,结果为array(array(‘ef’,3),array(‘gh’,5))</span>

<span class="Apple-style-span">//zunionstore/zinterstore 将多个表的并集/交集存入另一个表中
$redis-&gt;zunionstore(‘zset3′,array(‘zset1′,’zset2′,’zset0′)); //将’zset1′,’zset2′,’zset0′的并集存入’zset3′
//其它参数
$redis-&gt;zunionstore(‘zset3′,array(‘zset1′,’zset2′),array(‘weights’ =&gt; array(5,0)));//weights参数表示权重，其中表示并集后值大于5的元素排在前，大于0的排在后
$redis-&gt;zunionstore(‘zset3′,array(‘zset1′,’zset2′),array(‘aggregate’ =&gt; ‘max’));//’aggregate’ =&gt; ‘max’或’min’表示并集后相同的元素是取大值或是取小值</span>

<span class="Apple-style-span">//zcount 统计一个索引区间的元素个数
$redis-&gt;zcount(‘zset1′,3,5);//2
$redis-&gt;zcount(‘zset1′,’(3′,5)); //’(3′表示索引值在3-5之间但不含3,同理也可以使用’(5′表示上限为5但不含5</span>

<span class="Apple-style-span">//zcard 统计元素个数
$redis-&gt;zcard(‘zset1′);//4</span>

<span class="Apple-style-span">//zscore 查询元素的索引
$redis-&gt;zscore(‘zset1′,’ef’);//3</span>

<span class="Apple-style-span">//zremrangebyscore 删除一个索引区间的元素
$redis-&gt;zremrangebyscore(‘zset1′,0,2); //删除索引在0-2之间的元素(‘ab’,'cd’),返回删除元素个数2</span>

<span class="Apple-style-span">//zrank/zrevrank 返回元素所在表顺序/降序的位置(不是索引)
$redis-&gt;zrank(‘zset1′,’ef’);//返回0,因为它是第一个元素;zrevrank则返回1(最后一个)</span>

<span class="Apple-style-span">//zremrangebyrank 删除表中指定位置区间的元素
$redis-&gt;zremrangebyrank(‘zset1′,0,10); //删除位置为0-10的元素,返回删除的元素个数2</span>

<span class="Apple-style-span">/**
hash表操作
*/</span>

<span class="Apple-style-span">//hset/hget 存取hash表的数据
$redis-&gt;hset(‘hash1′,’key1′,’v1′); //将key为’key1′ value为’v1′的元素存入hash1表
$redis-&gt;hset(‘hash1′,’key2′,’v2′);
$redis-&gt;hget(‘hash1′,’key1′);  //取出表’hash1′中的key ‘key1′的值,返回’v1′</span>

<span class="Apple-style-span">//hexists 返回hash表中的指定key是否存在
$redis-&gt;hexists (‘hash1′,’key1′); //true or false</span>

<span class="Apple-style-span">//hdel 删除hash表中指定key的元素
$redis-&gt;hdel(‘hash1′,’key2′); //true or false</span>

<span class="Apple-style-span">//hlen 返回hash表元素个数
$redis-&gt;hlen(‘hash1′); //1</span>

<span class="Apple-style-span">//hsetnx 增加一个元素,但不能重复
$redis-&gt;hsetnx(‘hash1′,’key1′,’v2′); //false
$redis-&gt;hsetnx(‘hash1′,’key2′,’v2′); //true</span>

<span class="Apple-style-span">//hmset/hmget 存取多个元素到hash表
$redis-&gt;hmset(‘hash1′,array(‘key3′=&gt;’v3′,’key4′=&gt;’v4′));
$redis-&gt;hmget(‘hash1′,array(‘key3′,’key4′)); //返回相应的值 array(‘v3′,’v4′)</span>

<span class="Apple-style-span">//hincrby 对指定key进行累加
$redis-&gt;hincrby(‘hash1′,’key5′,3); //返回3
$redis-&gt;hincrby(‘hash1′,’key5′,10); //返回13</span>

<span class="Apple-style-span">//hkeys 返回hash表中的所有key
$redis-&gt;hkeys(‘hash1′); //返回array(‘key1′,’key2′,’key3′,’key4′,’key5′)</span>

<span class="Apple-style-span">//hvals 返回hash表中的所有value
$redis-&gt;hvals(‘hash1′); //返回array(‘v1′,’v2′,’v3′,’v4′,13)</span>

<span class="Apple-style-span">//hgetall 返回整个hash表元素
$redis-&gt;hgetall(‘hash1′); //返回array(‘key1′=&gt;’v1′,’key2′=&gt;’v2′,’key3′=&gt;’v3′,’key4′=&gt;’v4′,’key5′=&gt;13)</span>

<span class="Apple-style-span">/**
排序操作
*/</span>

<span class="Apple-style-span">//sort 排序
$redis-&gt;rpush(‘tab’,3);
$redis-&gt;rpush(‘tab’,2);
$redis-&gt;rpush(‘tab’,17);
$redis-&gt;sort(‘tab’);  //返回array(2,3,17)
//使用参数,可组合使用 array(‘sort’ =&gt; ‘desc’,'limit’ =&gt; array(1, 2))
$redis-&gt;sort(‘tab’,array(‘sort’ =&gt; ‘desc’));  //降序排列,返回array(17,3,2)
$redis-&gt;sort(‘tab’,array(‘limit’ =&gt; array(1, 2)));  //返回顺序位置中1的元素2个(这里的2是指个数,而不是位置),返回array(3,17)
$redis-&gt;sort(‘tab’,array(‘limit’ =&gt; array(‘alpha’ =&gt; true))); //按首字符排序返回array(17,2,3),因为17的首字符是’1′所以排首位置
$redis-&gt;sort(‘tab’,array(‘limit’ =&gt; array(‘store’ =&gt; ‘ordered’))); //表示永久性排序,返回元素个数
$redis-&gt;sort(‘tab’,array(‘limit’ =&gt; array(‘get’ =&gt; ‘pre_*’))); //使用了通配符’*'过滤元素,表示只返回以’pre_’开头的元素</span>

<span class="Apple-style-span">/**
redis管理操作
*/</span>

<span class="Apple-style-span">//select 指定要操作的数据库
$redis-&gt;select(‘mydb’); //指定为mydb,不存在则创建</span>

<span class="Apple-style-span">//flushdb 清空当前库
$redis-&gt;flushdb();</span>

<span class="Apple-style-span">//move 移动当库的元素到其它库
$redis-&gt;set(‘foo’, ‘bar’);
$redis-&gt;move(‘foo’, ‘mydb2′); //若’mydb2′库存在</span>

<span class="Apple-style-span">//info 显示服务当状态信息
$redis-&gt;info();</span>

<span class="Apple-style-span">//slaveof 配置从服务器
$redis-&gt;slaveof(’127.0.0.1′,80); //配置127.0.0.1端口80的服务器为从服务器
$redis-&gt;slaveof(); //清除从服务器</span>

<span class="Apple-style-span">//同步保存服务器数据到磁盘
$redis-&gt;save();
//异步保存服务器数据到磁盘
$redis-&gt;bgsave();
//??
$redis-&gt;bgrewriteaof();
//返回最后更新磁盘的时间
$redis-&gt;lastsave();</span>

<span class="Apple-style-span">//set/get多个key-value
$mkv = array(
‘usr:0001′ =&gt; ‘First user’,
‘usr:0002′ =&gt; ‘Second user’,
‘usr:0003′ =&gt; ‘Third user’
);
$redis-&gt;mset($mkv); //存储多个key对应的value
$retval = $redis-&gt;mget(array_keys($mkv)); //获取多个key对应的value
print_r($retval);</span>

<span class="Apple-style-span">//批量操作
$replies = $redis-&gt;pipeline(function($pipe) {
$pipe-&gt;ping();
$pipe-&gt;flushdb();
$pipe-&gt;incrby(‘counter’, 10); //增量操作
$pipe-&gt;incrby(‘counter’, 30);
$pipe-&gt;exists(‘counter’);
$pipe-&gt;get(‘counter’);
$pipe-&gt;mget(‘does_not_exist’, ‘counter’);
});
print_r($replies);</span>

<span class="Apple-style-span">//CAS,事务性操作</span>

<span class="Apple-style-span">function zpop($client, $zsetKey) {
$element = null;
$options = array(
‘cas’   =&gt; true,     // Initialize with support for CAS operations
‘watch’ =&gt; $zsetKey, // Key that needs to be WATCHed to detect changes
‘retry’ =&gt; 3,        // Number of retries on aborted transactions, after
// which the client bails out with an exception.
);</span>

<span class="Apple-style-span">$txReply = $client-&gt;multiExec($options, function($tx)
use ($zsetKey, &amp;$element) {
@list($element) = $tx-&gt;zrange($zsetKey, 0, 0);
if (isset($element)) {
$tx-&gt;multi();     // With CAS, MULTI *must* be explicitly invoked.
$tx-&gt;zrem($zsetKey, $element);
}
});
return $element;
}
$zpopped = zpop($redis, ‘zset’);
echo isset($zpopped) ? “ZPOPed $zpopped” : “Nothing to ZPOP!”, “\n”;</span>

<span class="Apple-style-span">//对存取的key加前缀,如: ‘nrk:’
$redis-&gt;getProfile()-&gt;setPreprocessor(new KeyPrefixPreprocessor(‘nrk:’));</span>

<span class="Apple-style-span">//分布式存储的一些方法
$multiple_servers = array(
array(
‘host’     =&gt; ’127.0.0.1′,
‘port’     =&gt; 6379,
‘database’ =&gt; 15,
‘alias’    =&gt; ‘first’,
),
array(
‘host’     =&gt; ’127.0.0.1′,
‘port’     =&gt; 6380,
‘database’ =&gt; 15,
‘alias’    =&gt; ‘second’,
),
);</span>

<span class="Apple-style-span">use Predis\Distribution\IDistributionStrategy;</span>

<span class="Apple-style-span">class NaiveDistributionStrategy implements IDistributionStrategy {
private $_nodes, $_nodesCount;</span>

<span class="Apple-style-span">public function __constructor() {
$this-&gt;_nodes = array();
$this-&gt;_nodesCount = 0;
}</span>

<span class="Apple-style-span">public function add($node, $weight = null) {
$this-&gt;_nodes[] = $node;
$this-&gt;_nodesCount++;
}</span>

<span class="Apple-style-span">public function remove($node) {
$this-&gt;_nodes = array_filter($this-&gt;_nodes, function($n) use($node) {
return $n !== $node;
});
$this-&gt;_nodesCount = count($this-&gt;_nodes);
}</span>

<span class="Apple-style-span">public function get($key) {
$count = $this-&gt;_nodesCount;
if ($count === 0) {
throw new RuntimeException(‘No connections’);
}
return $this-&gt;_nodes[$count &gt; 1 ? abs(crc32($key) % $count) : 0];
}</span>

<span class="Apple-style-span">public function generateKey($value) {
return crc32($value);
}
}</span>

<span class="Apple-style-span">//配置键分布策略
$options = array(
‘key_distribution’ =&gt; new NaiveDistributionStrategy(),
);</span>

<span class="Apple-style-span">$redis = new Predis\Client($multiple_servers, $options);</span>

<span class="Apple-style-span">for ($i = 0; $i set(“key:$i”, str_pad($i, 4, ’0′, 0));
$redis-&gt;get(“key:$i”);
}</span>

<span class="Apple-style-span">$server1 = $redis-&gt;getClientFor(‘first’)-&gt;info();
$server2 = $redis-&gt;getClientFor(‘second’)-&gt;info();</span>

<span class="Apple-style-span">printf(“Server ‘%s’ has %d keys while server ‘%s’ has %d keys.\n”,
‘first’, $server1['db15']['keys'], ‘second’, $server2['db15']['keys']</span>
<div id="cnblogs_post_body">
<div><span class="Apple-style-span">参考文献：</span></div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="blog_post_info"></div>
</div>
http://www.cnblogs.com/stephen-liu74/archive/2012/02/18/2357783.html

</div>
<div><span class="Apple-style-span">http://slj.me/2011/04/redis-cli-commands/</span></div>
<div><span class="Apple-style-span">http://baike.baidu.com/link?url=lGUP7ZKfRvkSEVr6tDZNqhYT5YOpQkHBJ01My-RtE2xjjjvO-Ez1g0gDyUyMCofQcQWZzuA4qnZK2CyVYCZqTK#1  </span></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 15:48:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 07:48:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[redis%e6%80%bb%e7%bb%93]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%ad%98%e5%82%a8"><![CDATA[存储]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_32feb5ea11264519e4ab4b647734cb06]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0eaffccc4d9484f528a1b09ece713e2c]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0c8b7b1d9446b5cb107cf93095e22a89]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_7c25bda9cb977a1d5cf82907e19522fd]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_b26f50c01f6819a658c77a21208e8d80]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1520114185;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:64;}i:1;a:1:{s:2:"id";i:35;}i:2;a:1:{s:2:"id";i:57;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSON</title>
		<link>https://www.idatavisual.com/?p=66</link>
		<pubDate>Wed, 03 Jan 2018 08:03:53 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=66</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span">JSON：JavaScript 对象表示法（JavaScript Object Notation）。</span>

<span class="Apple-style-span">JSON 是存储和交换文本信息的语法。类似 XML。</span>

<span class="Apple-style-span">JSON 比 XML 更小、更快，更易解析</span>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">JSON - 转换为 JavaScript 对象</span></h2>
</div>
<div><span class="Apple-style-span">无需解析器，JavaScript 程序能够使用内建的 <a title="JavaScript eval() 函数" href="http://www.w3school.com.cn/jsref/jsref_eval2.asp" target="_blank" rel="noopener">eval() 函数</a>(用 JSON 数据来生成原生的 JavaScript 对象)</span></div>
<div>
<h2><span class="Apple-style-span">实例</span></h2>
</div>
<div>
<pre><span class="Apple-style-span">&lt;script type="text/javascript"&gt;
<code>var JSONObject= {
"name":"Bill Gates",
"street":"Fifth Avenue New York 666",
"age":56,
"phone":"555 1234567"};</code> document.getElementById("jname").innerHTML=JSONObject.name document.getElementById("jage").innerHTML=JSONObject.age document.getElementById("jstreet").innerHTML=JSONObject.street document.getElementById("jphone").innerHTML=JSONObject.phone &lt;/script&gt;</span></pre>
</div>
<div>
<h4><span class="Apple-style-span">使用 JSON</span></h4>
<ul>
 	<li><span class="Apple-style-span">读取 JSON 字符串</span></li>
 	<li><span class="Apple-style-span">用 eval() 处理 JSON 字符串</span></li>
</ul>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">JSON 语法规则</span></h2>
<span class="Apple-style-span">JSON 语法是 JavaScript 对象表示法语法的子集。</span>
<ul>
 	<li><span class="Apple-style-span">数据在key/value对中</span></li>
 	<li><span class="Apple-style-span">数据由逗号分隔</span></li>
 	<li><span class="Apple-style-span">花括号保存对象</span></li>
 	<li><span class="Apple-style-span">方括号保存数组</span></li>
</ul>
</div>
<!--more-->
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">JSON 对象</span></h2>
</div>
<div>

<span class="Apple-style-span">JSON 对象在花括号中书写：</span>

<span class="Apple-style-span">对象可以包含多个名称/值对：</span>
<pre><span class="Apple-style-span">{ "firstName":"John" , "lastName":"Doe" }
</span></pre>
<span class="Apple-style-span">这一点也容易理解，与这条 JavaScript 语句等价：</span>
<pre><span class="Apple-style-span">firstName = "John"
lastName = "Doe"
</span></pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">JSON 数组</span></h2>
<span class="Apple-style-span">JSON 数组在方括号中书写(</span><span class="Apple-style-span">数组可包含多个对象</span>)：
<pre><span class="Apple-style-span">{
"employees": [
               { "firstName":"John" , "lastName":"Doe" },
               { "firstName":"Anna" , "lastName":"Smith" },
               { "firstName":"Peter" , "lastName":"Jones" }
             ]
}
</span></pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span">对象 "employees" 是包含三个对象的数组。每个对象代表一条关于某人（有姓和名）的记录</span></div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">JSON 使用 JavaScript 语法</span></h2>
</div>
<div>

<span class="Apple-style-span">像这样访问 JavaScript 对象数组中的第一项：</span>
<pre><span class="Apple-style-span">employees[0].lastName;
</span></pre>
<span class="Apple-style-span">返回的内容是：</span>
<pre><span class="Apple-style-span">Doe</span></pre>
</div>
<div>

<span class="Apple-style-span">这样修改数据：</span>
<pre><span class="Apple-style-span">employees[0].lastName = "Jobs";
</span></pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">把 JSON 文本转换为 JavaScript 对象</span></h2>
</div>
<div><span class="Apple-style-span"> 最常见的用法之一:从 web 服务器上</span></div>
<div><span class="Apple-style-span">                     --&gt;读取 JSON 数据（作为文件或作为 HttpRequest）</span></div>
<div><span class="Apple-style-span">                          --&gt; 将 JSON 数据转换为 JavaScript 对象 </span></div>
<div><span class="Apple-style-span">                               --&gt; 然后在网页中使用该数据</span></div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">JSON 实例 - 来自字符串的对象</span></h2>
</div>
<div>

<span class="Apple-style-span">包含 JSON 语法的 JavaScript 字符串：</span>
<pre><span class="Apple-style-span">var json_txt = '{ "employees" : [' +
'{ "firstName":"Bill" , "lastName":"Gates" },' +
'{ "firstName":"George" , "lastName":"Bush" },' +
'{ "firstName":"Thomas" , "lastName":"Carter" } ]}';</span></pre>
</div>
<div>

<span class="Apple-style-span">eval()可解析 JSON 文本，然后生成 JavaScript 对象。必须把文本包围在括号中，这样才能避免语法错误：</span>
<pre><span class="Apple-style-span">var obj = eval ("(" + json_txt + ")");
</span></pre>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 16:03:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 08:03:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[json]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521937621;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:70;}i:1;a:1:{s:2:"id";i:64;}i:2;a:1:{s:2:"id";i:76;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CSS</title>
		<link>https://www.idatavisual.com/?p=68</link>
		<pubDate>Wed, 03 Jan 2018 08:04:22 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=68</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<h2>CSS 语法</h2>
CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。
<pre>selector {declaration1; declaration2; ... declarationN }
</pre>
选择器通常是您需要<span class="Apple-style-span">改变样式的 HTML 元素</span>。

每条声明由一个属性和一个值组成。
<pre>selector {property: value}
</pre>
在这个例子中，h1 是选择器，color 和 font-size 是属性，red 和 14px 是值。
<pre>h1 {color:red; font-size:14px;}
</pre>
下面的示意图为您展示了上面这段代码的结构：

<img src="file:///C:/Users/YUANWA~1/AppData/Local/Temp/enhtmlclip/Image(2).gif" alt="CSS 语法" /><span class="Apple-style-span">提示：</span>请使用花括号来包围声明。

</div>
<!--more-->
<div>
<h2>记得写引号</h2>
<span class="Apple-style-span">提示：</span>如果值为若干单词，则要给值加引号：
<pre>p {font-family: <code>"sans serif"</code>;}</pre>
</div>
<div>
<h2>多重声明：</h2>
<span class="Apple-style-span">提示：</span>如果要定义不止一个声明，则需要用分号将每个声明分开。下面的例子展示出如何定义一个红色文字的居中段落。最后一条规则是不需要加分号的，因为分号在英语中是一个分隔符号，不是结束符号。然而，大多数有经验的设计师会在每条声明的末尾都加上分号，这么做的好处是，当你从现有的规则中增减声明时，会尽可能地减少出错的可能性。就像这样：
<pre>p {text-align:center<code>;</code> color:red<code>;</code>}</pre>
你应该在每行只描述一个属性，这样可以增强样式定义的可读性，就像这样：
<pre>p {
  text-align: center;
  color: black;
  font-family: arial;
}
</pre>
</div>
<div></div>
<div>
<h2>选择器的分组</h2>
</div>
<div><span class="Apple-style-span">被分组的选择器就可以分享相同的声明。用逗号将需要分组的选择器分开。所有的标题元素都是绿色的。</span></div>
<div>
<pre><code>h1,h2,h3,h4,h5,h6</code> { color: green; }</pre>
</div>
<div>
<h2>继承及其问题</h2>
</div>
<div><span class="Apple-style-span">根据 CSS，子元素从父元素继承属性。但是它并不总是按此方式工作,根据不同浏览器，其规则不同</span></div>
<div>
<h2>继承是一个诅咒吗？</h2>
如果你不希望 "Verdana, sans-serif" 字体被所有的子元素继承，又该怎么做呢？比方说，你希望段落的字体是 Times。没问题。创建一个针对 p 的特殊规则，这样它就会摆脱父元素的规则：
<pre>body  {
     font-family: Verdana, sans-serif;
     }

td, ul, ol, ul, li, dl, dt, dd  {
     font-family: Verdana, sans-serif;
     }

<code>p</code> { font-family: Times, "Times New Roman", serif; }</pre>
</div>
<div></div>
<div>
<h2>id 选择器</h2>
<span class="Apple-style-span">id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</span>

<span class="Apple-style-span">id 选择器以 "#" 来定义。</span>

</div>
<div></div>
<div></div>
<div>

下面的两个 id 选择器，第一个可以定义元素的颜色为红色，第二个定义元素的颜色为绿色：
<pre><code>#red</code> {color:red;} <code>#green</code> {color:green;}</pre>
下面的 HTML 代码中，id 属性为 red 的 p 元素显示为红色，而 id 属性为 green 的 p 元素显示为绿色。
<pre>&lt;p <code>id="red"</code>&gt;这个段落是红色。&lt;/p&gt; &lt;p <code>id="green"</code>&gt;这个段落是绿色。&lt;/p&gt;</pre>
<span class="Apple-style-span">注意：</span>id 属性只能在每个 HTML 文档中出现一次

</div>
<div>
<h2>id 选择器和派生选择器</h2>
<span class="Apple-style-span">d 选择器常常用于建立派生选择器</span>

</div>
<div>
<pre><code>#sidebar p</code> { font-style: italic; text-align: right; margin-top: 0.5em; } <code>#sidebar h2</code> { font-size: 1em; font-weight: normal; font-style: italic; margin: 0; line-height: 1.5; text-align: right; }</pre>
页面中sidebar 内的 p 元素,h2 元素得到了特殊的处理

</div>
<div>
<h2>单独的选择器</h2>
<pre><code>#sidebar</code> { border: 1px dotted #000; padding: 10px; }</pre>
</div>
<div><span class="Apple-style-span">类选择器</span></div>
<div>

<span class="Apple-style-span">在 CSS 中，类选择器以一个点号显示：</span>
<pre><code>.center</code> {text-align: center}</pre>
</div>
<div><span class="Apple-style-span">在上面的例子中，所有拥有 center 类的 HTML 元素均为居中</span></div>
<div>

h1 和 p 元素都有 center 类。这意味着两者都将遵守 ".center" 选择器中的规则。
<pre>&lt;h1 <code>class="center"</code>&gt; This heading will be center-aligned &lt;/h1&gt; &lt;p <code>class="center"</code>&gt; This paragraph will also be center-aligned. &lt;/p&gt;</pre>
</div>
<div></div>
<div>

<span class="Apple-style-span">class 也可被用作派生选择器：</span>
<pre><code>.fancy td</code> { color: #f60; background: #666; }</pre>
在上面这个例子中，类名为 fancy 的更大的元素内部的表格单元都会以灰色背景显示橙色文字。（名为 fancy 的更大的元素可能是一个表格或者一个 div）

</div>
<div></div>
<div>
<h2>派生选择器</h2>
</div>
<div><span class="Apple-style-span">通过依据元素在其位置的上下文关系来定义样式，可以使标记更加简洁</span></div>
<div>

再看看下面的 CSS 规则：
<pre>strong {
     color: red;
     }

h2 {
     color: red;
     }

<code>h2 strong</code> { /*将h2的strong的颜色 改为blue*/ color: blue; }</pre>
下面是它施加影响的 HTML：
<pre>&lt;p&gt;The strongly emphasized word in this paragraph is&lt;strong&gt;red&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;This subhead is also red.&lt;/h2&gt;
<code>&lt;h2&gt;</code>The strongly emphasized word in this subhead is<code>&lt;strong&gt;</code>blue<code>&lt;/strong&gt;</code>.<code>&lt;/h2&gt;</code></pre>
</div>
<div></div>
<div>
<h2>属性和值选择器</h2>
例子为 title="W3School" 的所有元素设置样式：
<pre><code>[title=W3School]</code> { border:5px solid blue; }</pre>
</div>
<div></div>
<div>
<h2>样式表</h2>
</div>
<div>
<h3>外部样式表</h3>
当样式需要应用于很多页面时。每个页面使用 &lt;link&gt; 标签链接到样式表。&lt;link&gt; 标签在（文档的）头部：
<pre>&lt;head&gt;
&lt;<code>link</code> rel="stylesheet" type="text/css" href="<code>mystyle.css</code>" /&gt; &lt;/head&gt;</pre>
</div>
<div>
<h3>内部样式表</h3>
</div>
<div>

当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 &lt;style&gt; 标签在文档<span class="Apple-style-span">头部定义内部样式表</span>:
<pre>&lt;head&gt;
<code>&lt;style type="text/css"&gt;</code> hr {color: sienna;} p {margin-left: 20px;} body {background-image: url("images/back40.gif");} <code>&lt;/style&gt;</code> &lt;/head&gt;</pre>
</div>
<div>
<h3>内联样式</h3>
</div>
<div>

使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距：
<pre>&lt;p <code>style</code>="color: sienna; margin-left: 20px"&gt; This is a paragraph &lt;/p&gt;</pre>
</div>
<div>
<h2>多重样式</h2>
</div>
<div>

如果某些属性在<span class="Apple-style-span">不同的样式表</span>中<span class="Apple-style-span">被同样的选择器定义</span>，那么属性值将从更具体的样式表中被继承过来(由最具体的css+其没有的css属性 =最终css)。

例如，外部样式表拥有针对 h3 选择器的三个属性：
<pre>h3 {
  color: red;
  text-align: <code>left</code>; font-size: <code>8pt</code>; }</pre>
而内部样式表拥有针对 h3 选择器的两个属性：
<pre>h3 {
  text-align: <code>right</code>; font-size: <code>20pt</code>; }</pre>
假如拥有内部样式表的这个页面同时与外部样式表链接，那么 h3 得到的样式是：
<pre>color: <code>red</code>; text-align: <code>right</code>; font-size: <code>20pt</code>;</pre>
<div></div>
<div></div>
</div>
<div>常用属性：</div>
<div>

CSS布局：

display：
每个元素都有一个默认的 display 值，这与元素的类型有关。对于大多数元素它们的默认值通常是 block 或 inline 。一个 block 元素通常被叫做块级元素。一个 inline 元素通常被叫做行内元素。

block
div 是一个标准的块级元素。一个块级元素会新开始一行并且尽可能撑满容器。其他常用的块级元素包括 p 、 form 和HTML5中的新元素： header 、 footer 、 section 等等。

inline
span 是一个标准的行内元素。一个行内元素可以在段落中 &lt;span&gt; 像这样 &lt;/span&gt; 包裹一些文字而不会打乱段落的布局。 a 元素是最常用的行内元素，它可以被用作链接

none
一些特殊元素的默认 display 值是它，例如 script 。 display:none 通常被 JavaScript 用来在不删除元素的情况下隐藏或显示元素。
它和 visibility 属性不一样。把 display 设置成 none 不会保留元素本该显示的空间，但是 visibility: hidden; 还会保留
#main {
max-width: 600px;
margin: 0 auto;
}

position
static  任意 position: static; 的元素不会被特殊的定位
relative  在一个相对定位（position属性的值为relative）的元素上设置 top 、 right 、 bottom 和 left 属性会使其偏离其正常位置
fixed
一个固定定位（position属性的值为fixed）元素会相对于视窗来定位，这意味着即便页面滚动，它还是会停留在相同的位置

absolute
它相对于它的父元素定位。
如果父元素是 position: static; ，那么它直接相对于body元素定位。
float  Float 可用于实现文字环绕图片

clear 属性被用于控制浮动

overflow: auto;
margin-left: 200px;
min-width 和 max-width 来限制最大或最小宽度

display: inline-block;
vertical-align: top;

z-index: 999;
text-indent:50px;

</div>
<div></div>
<div></div>
<div></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 16:04:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 08:04:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[css]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1516044404;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:64;}i:1;a:1:{s:2:"id";i:76;}i:2;a:1:{s:2:"id";i:59;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ajax</title>
		<link>https://www.idatavisual.com/?p=70</link>
		<pubDate>Wed, 03 Jan 2018 08:04:55 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=70</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<h2>AJAX</h2>
</div>
<span class="Apple-style-span">AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）</span>
<div><span class="Apple-style-span">与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下</span></div>
<div><span class="Apple-style-span">是一种用于创建快速动态网页的技术。</span></div>
<div>

通过在后台与服务器进行少量数据交换， 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。

有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。

</div>
<div>

Google 通过其 Google Suggest 使 AJAX 变得流行起来。

Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表

</div>
<!--more-->
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span">AJAX 的工作原理</span></div>
<div>
<h2><span class="Apple-style-span">XMLHttpRequest 对象</span></h2>
<div><span class="Apple-style-span">XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新</span></div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">创建 XMLHttpRequest 对象</span></h2>
</div>
<div>
<h3><span class="Apple-style-span">语法：</span></h3>
<pre><span class="Apple-style-span">variable=new XMLHttpRequest();
</span></pre>
</div>
</div>
<div>

请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：
<pre>var xmlhttp;
if (window.XMLHttpRequest)
  {<span class="Apple-style-span">// code for IE7+, Firefox, Chrome, Opera, Safari</span>
  xmlhttp=new XMLHttpRequest();
  }
else
  {<span class="Apple-style-span">// code for IE6, IE5</span>
  xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
  }
</pre>
</div>
<div><span class="Apple-style-span">XMLHttpRequest 对象用于和服务器交换数据。</span></div>
<div>
<h2><span class="Apple-style-span">向服务器发送请求</span></h2>
<span class="Apple-style-span">如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：</span>
<pre><span class="Apple-style-span">xmlhttp.open("GET","test1.txt",true);
xmlhttp.send(); </span></pre>
</div>
<div>

<span class="Apple-style-span">与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用,</span>在以下情况中，<span class="Apple-style-span">请使用 POST 请求</span>：
<ul>
 	<li>无法使用缓存文件（更新服务器上的文件或数据库）</li>
 	<li>向服务器发送大量数据（POST 没有数据量限制）</li>
 	<li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li>
</ul>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>

使用 XMLHttpRequest 对象的 open() 和 send() 方法：
<pre>xmlhttp.open("GET","test1.txt",true);  //get方法，异步传输，url=test1.txt
xmlhttp.send();
</pre>
</div>
<div>
<h2>POST 请求</h2>
</div>
<div>

请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：
<pre>xmlhttp.open("POST","ajax_test.asp",true);
xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
xmlhttp.send("fname=Bill&amp;lname=Gates");
</pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>

通过 AJAX，JavaScript 无需等待服务器的响应，而是：
<ul>
 	<li>在等待服务器响应时执行其他脚本</li>
 	<li>当响应就绪后对响应进行处理</li>
</ul>
</div>
<div><span class="Apple-style-span">实例：</span></div>
<div>&lt;head&gt;
&lt;script type="text/javascript"&gt;
function loadXMLDoc() {
var xmlhttp;
//判定浏览器
if(window.XMLHttpRequest){
xmlhttp = new XMLHttpRequest();
}else{
xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
}
//执行
xmlhttp.onreadystatechange = function(){
if(xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200){
document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
}
}
xmlhttp.open("GET","/ajax/test1.php",true);
xmlhttp.send();
// document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;button type="button" onclick="loadXMLDoc()"&gt;请求数据&lt;/button&gt;
&lt;div id="myDiv"&gt;&lt;/div&gt;
&lt;/body&gt;</div>
<div>
<h2>Async = true</h2>
当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：
<pre>xmlhttp.onreadystatechange=function()
  {
  if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)
    {
    document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
    }
  }
xmlhttp.open("GET","test1.txt",true);
xmlhttp.send();
</pre>
</div>
<div>
<div></div>
<div></div>
<div>注释：当您使用 <span class="Apple-style-span">async=false</span> 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可：</div>
<pre>xmlhttp.open("GET","test1.txt",false);
xmlhttp.send();
document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
</pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2>服务器响应</h2>
<div><span class="Apple-style-span">获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性</span></div>
<div>
<h2>responseText 属性</h2>
</div>
<div>

responseText 属性返回字符串形式的响应可以这样使用：
<pre>document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
</pre>
</div>
</div>
<div>
<h2>responseXML 属性</h2>
<div><span class="Apple-style-span">来自服务器的响应是 XML，而且需要作为 XML 对象进行解析</span></div>
<div>
<pre>xmlDoc=xmlhttp.responseXML;
txt="";
x=xmlDoc.getElementsByTagName("ARTIST");
for (i=0;i&lt;x.length;i++)
  {
  txt=txt + x[i].childNodes[0].nodeValue + "&lt;br /&gt;";
  }
document.getElementById("myDiv").innerHTML=txt;
</pre>
</div>
</div>
<div>
<h2>onreadystatechange 事件</h2>
<div>

当请求被发送到服务器时，我们需要执行一些基于响应的任务。

每当 readyState 改变时，就会触发 onreadystatechange 事件。

readyState 属性存有 XMLHttpRequest 的状态信息

</div>
<div></div>
</div>
<div>

XMLHttpRequest 对象的三个重要的属性：
<table class=" xhe-border">
<tbody>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
<tr>
<td>onreadystatechange</td>
<td>存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td>
</tr>
<tr>
<td>readyState</td>
<td>存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。
<ul>
 	<li>0: 请求未初始化</li>
 	<li>1: 服务器连接已建立</li>
 	<li>2: 请求已接收</li>
 	<li>3: 请求处理中</li>
 	<li>4: 请求已完成，且响应已就绪</li>
</ul>
</td>
</tr>
<tr>
<td>status</td>
<td>200: "OK"

404: 未找到页面</td>
</tr>
</tbody>
</table>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2>使用 Callback 函数</h2>
</div>
<div><span class="Apple-style-span">callback 函数是一种以参数形式传递给另一个函数的函数</span></div>
<div>
<pre>function myFunction()
{
loadXMLDoc("ajax_info.txt",function()
  {
  if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)
    {
    document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
    }
  });
}
</pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span">AJAX 可用来与 XML 文件进行交互式通信</span></div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span"> </span></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 16:04:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 08:04:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ajax]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521275344;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:76;}i:1;a:1:{s:2:"id";i:64;}i:2;a:1:{s:2:"id";i:57;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jquery</title>
		<link>https://www.idatavisual.com/?p=72</link>
		<pubDate>Wed, 03 Jan 2018 08:05:23 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=72</guid>
		<description></description>
		<content:encoded><![CDATA[<div>$('#parent_id').find("option:selected").val()</div>
<div></div>
<span class="Apple-style-span">$(document).ready():</span>
<div><span class="Apple-style-span">想要一个事件运行在你的页面上，须在$(document).ready()里调用这个事件。</span></div>
<div><span class="Apple-style-span">所有包括在$(document).ready()里面的元素或事件都将会在DOM完成加载之后立即加载，并且在页面内容加载之前</span></div>
<div><span class="Apple-style-span">实例：</span></div>
<div>
<pre><span class="Apple-style-span">&lt;head&gt;
&lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
     $(document).ready(function(){
            $("p").click(function(){
            $(this).hide();
     });
});
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;If you click on me, I will disappear.&lt;/p&gt;
&lt;/body
</span></pre>
</div>
<!--more--><span style="color: #000000; font-size: 2.4em;">jQuery HTML</span>
<div>
<h2><span class="Apple-style-span">jQuery DOM 操作</span></h2>
<div><span class="Apple-style-span">DOM = Document Object Model（文档对象模型）</span></div>
<div>
<h2><span class="Apple-style-span">获得内容 - text()、html() 以及 val()</span></h2>
</div>
<div>
<ul>
 	<li><span class="Apple-style-span">text() - 设置或返回所选元素的文本内容</span></li>
 	<li><span class="Apple-style-span">html() - 设置或返回所选元素的内容（包括 HTML 标记）</span></li>
 	<li><span class="Apple-style-span">val() - 设置或返回表单字段的值</span></li>
</ul>
</div>
<div>

<span class="Apple-style-span">通过 jQuery text() 和 html() 方法来获得内容：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$("#btn1").click(function(){
  alert("Text: " + $("#test").text());
});
$("#btn2").click(function(){
  alert("HTML: " + $("#test").html());
});</span></pre>
</div>
<div>
<h2></h2>
<span class="Apple-style-span">通过 text()、html() 以及 val() 方法来设置内容：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$("#btn1").click(function(){
     $("#test1").text("Hello world!");
});
$("#btn2").click(function(){
     $("#test2").html("&lt;b&gt;Hello world!&lt;/b&gt;");
});
$("#btn3").click(function(){
     $("#test3").val("Dolly Duck");
});
</span></pre>
<h2><span class="Apple-style-span"> </span></h2>
<div>
<h2><span class="Apple-style-span">text()、html() 以及 val() 的回调函数</span></h2>
</div>
<div>

<span class="Apple-style-span">回调函数由两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。</span>

<span class="Apple-style-span">带有回调函数的 text() 和 html()：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$("#btn1").click(function(){
  $("#test1").text(function(i,origText){
    return "Old text: " + origText + " New text: Hello world!
    (index: " + i + ")";
  });
});

$("#btn2").click(function(){
  $("#test2").html(function(i,origText){
    return "Old html: " + origText + " New html: Hello &lt;b&gt;world!&lt;/b&gt;
    (index: " + i + ")";
  });
});
</span></pre>
</div>
<h2><span class="Apple-style-span"> </span><span class="Apple-style-span">获取属性 - attr()</span></h2>
</div>
<div>

<span class="Apple-style-span">如何获得链接中 href 属性的值：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$("button").click(function(){
  alert($("#w3s").attr("href"));
});</span></pre>
</div>
<div>

<span class="Apple-style-span">改变（设置）链接中 href 属性的值：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$("button").click(function(){
  $("#w3s").attr("href","http://www.w3school.com.cn/jquery");
});
</span></pre>
</div>
</div>
<!--more-->

&nbsp;
<div>
<h1><span class="Apple-style-span">jQuery 遍历</span></h1>
</div>
<div><span class="Apple-style-span">jQuery 遍历，意为“移动”，用于根据其相对于其他元素的关系来“查找”（或选取）HTML 元素。以某项选择开始，并沿着这个选择移动，直到抵达您期望的元素为止</span></div>
<div>
<h3><span class="Apple-style-span">图示解释：</span></h3>
<span class="Apple-style-span"><img src="file:///C:/Users/YUANWA~1/AppData/Local/Temp/enhtmlclip/Image(1).gif" alt="遍历 DOM 树" /></span>

</div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">向上遍历 DOM 树</span></h2>
<div>
<h2><span class="Apple-style-span">jQuery parent() 方法</span></h2>
<span class="Apple-style-span">parent() 方法返回被选元素的直接父元素,该方法只会向上一级对 DOM 树进行遍历</span>

</div>
</div>
<div>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("span").parent();
});
</span></pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">jQuery parents() 方法</span></h2>
<span class="Apple-style-span">parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (&lt;html&gt;)</span>

</div>
<div>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("span").parents();
});
</span></pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span">使用可选参数来过滤对祖先元素的搜索</span></div>
<div>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("span").parents("ul");
});
</span></pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">jQuery parentsUntil() 方法</span></h2>
</div>
<div><span class="Apple-style-span">parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素</span></div>
<div>

<span class="Apple-style-span">返回介于 &lt;span&gt; 与 &lt;div&gt; 元素之间的所有祖先元素：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("span").parentsUntil("div");
});
</span></pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">向下遍历 DOM 树</span></h2>
</div>
<div>
<h2><span class="Apple-style-span">jQuery children() 方法</span></h2>
<span class="Apple-style-span">children() 方法返回被选元素的所有直接子元素</span>

</div>
<div>

<span class="Apple-style-span">返回每个 &lt;div&gt; 元素的所有直接子元素：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("div").children();
});
</span></pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>

<span class="Apple-style-span">返回类名为 "1" 的所有 &lt;p&gt; 元素，并且它们是 &lt;div&gt; 的直接子元素：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("div").children("p.1");
});
</span></pre>
</div>
<div>
<h2><span class="Apple-style-span">jQuery find() 方法</span></h2>
<span class="Apple-style-span">find() 方法返回被选元素的后代元素，一路向下直到最后一个后代</span>

</div>
<div>

<span class="Apple-style-span">返回属于 &lt;div&gt; 后代的所有 &lt;span&gt; 元素：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("div").find("span");
});
</span></pre>
</div>
<div>返回 &lt;div&gt; 的所有后代：</div>
<div>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("div").find("*");
});
</span></pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">在 DOM 树中水平遍历</span></h2>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">jQuery siblings() 方法</span></h2>
<span class="Apple-style-span">siblings() 方法返回被选元素的所有同胞元素</span>

</div>
<div>

<span class="Apple-style-span">返回 &lt;h2&gt; 的所有同胞元素：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("h2").siblings();
});
</span></pre>
</div>
<div>返回属于 &lt;h2&gt; 的同胞元素的所有 &lt;p&gt; 元素：</div>
<div>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("h2").siblings("p");
});
</span></pre>
</div>
<div>
<h2><span class="Apple-style-span">jQuery next() 方法</span></h2>
<span class="Apple-style-span">next() 方法返回被选元素的下一个同胞元素</span>

</div>
<div>

<span class="Apple-style-span">返回 &lt;h2&gt; 的下一个同胞元素：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("h2").next();
});
</span></pre>
</div>
<div>
<h2><span class="Apple-style-span">jQuery nextAll() 方法</span></h2>
<span class="Apple-style-span">nextAll() 方法返回被选元素的所有跟随的同胞元素</span>

</div>
<div>

<span class="Apple-style-span">返回 &lt;h2&gt; 的所有跟随的同胞元素：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("h2").nextAll();
});
</span></pre>
</div>
<div>
<h2><span class="Apple-style-span">jQuery nextUntil() 方法</span></h2>
<span class="Apple-style-span">nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素</span>

</div>
<div>

<span class="Apple-style-span">返回介于 &lt;h2&gt; 与 &lt;h6&gt; 元素之间的所有同胞元素：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$(document).ready(function(){
  $("h2").nextUntil("h6");
});
</span></pre>
</div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">jQuery prev(), prevAll() &amp; prevUntil() 方法</span></h2>
<span class="Apple-style-span">prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已：它们返回的是前面的同胞元素（在 DOM 树中沿着同胞元素向后遍历，而不是向前）</span>

</div>
<div>
<h1><span class="Apple-style-span">jQuery Ajax</span></h1>
</div>
<div><span class="Apple-style-span">AJAX 是与服务器交换数据的艺术，它在不重载全部页面的情况下，实现了对部分网页的更新</span></div>
<div><span class="Apple-style-span">通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON - 同时您能够把这些外部数据直接载入网页的被选元素中。</span></div>
<div>
<h2><span class="Apple-style-span">jQuery load() 方法</span></h2>
</div>
<div><span class="Apple-style-span">load() 方法从服务器加载数据，并把返回的数据放入被选元素中</span></div>
<div>
<h3><span class="Apple-style-span">语法：</span></h3>
<pre><span class="Apple-style-span">$(selector).load(URL,data,callback);
</span></pre>
</div>
<div>

<span class="Apple-style-span">必需的 URL 参数规定您希望加载的 URL。</span>

<span class="Apple-style-span">可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。</span>

<span class="Apple-style-span">可选的 callback 参数是 load() 方法完成后所执行的函数名称</span>

</div>
<div>

<span class="Apple-style-span">会把文件 "demo_test.txt" 的内容加载到指定的 &lt;div&gt; 元素中：</span>
<h3><span class="Apple-style-span">示例</span></h3>
<pre><span class="Apple-style-span">$("#div1").load("demo_test.txt");
</span></pre>
</div>
<div>

<span class="Apple-style-span">把 jQuery 选择器添加到 URL 参数。</span>

<span class="Apple-style-span">下面的例子把 "demo_test.txt" 文件中 id="p1" 的元素的内容，加载到指定的 &lt;div&gt; 元素中：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$("#div1").load("demo_test.txt #p1");
</span></pre>
</div>
<div>

<span class="Apple-style-span">可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：</span>
<ul>
 	<li><span class="Apple-style-span">responseTxt - 包含调用成功时的结果内容</span></li>
 	<li><span class="Apple-style-span">statusTXT - 包含调用的状态</span></li>
 	<li><span class="Apple-style-span">xhr - 包含 XMLHttpRequest 对象</span></li>
</ul>
</div>
<div>

<span class="Apple-style-span">下面的例子会在 load() 方法完成后显示一个提示框。如果 load() 方法已成功，则显示“外部内容加载成功！”，而如果失败，则显示错误消息：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$("button").click(function(){
  $("#div1").load("demo_test.txt",function(responseTxt,statusTxt,xhr){
    if(statusTxt=="success")
      alert("外部内容加载成功！");
    if(statusTxt=="error")
      alert("Error: "+xhr.status+": "+xhr.statusText);
  });
});
</span></pre>
</div>
<div>
<h2><span class="Apple-style-span">HTTP 请求：GET vs. POST</span></h2>
<span class="Apple-style-span">两种在客户端和服务器端进行请求-响应的常用方法是：GET 和 POST。</span>
<ul>
 	<li><span class="Apple-style-span">GET - 从指定的资源请求数据</span></li>
 	<li><span class="Apple-style-span">POST - 向指定的资源提交要处理的数据</span></li>
</ul>
</div>
<div>

<span class="Apple-style-span">GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。</span>

<span class="Apple-style-span">POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据</span>

</div>
<div>

<span class="Apple-style-span">$.get() 方法通过 HTTP GET 请求从服务器上请求数据。</span>
<h3><span class="Apple-style-span">语法：</span></h3>
<pre><span class="Apple-style-span">$.get(                                                                                                  URL,                                                                                             callbackFunction                                                                                );</span></pre>
</div>
<div>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$("button").click(function(){
         url="/demo_test.php"                                                                             $.get(                                                                                                url,                                                                                             function(data,status){
                   alert("Data: " + data + "\nStatus: " + status);
              }                                                                                           );
});
</span></pre>
</div>
<div>

<span class="Apple-style-span">$.get() 的第一个参数是我们希望请求的 URL（"demo_test.php"）</span>

<span class="Apple-style-span">第二个参数是回调函数。第一个回调参数存有被请求页面的内容，第二个回调参数存有请求的状态</span>

</div>
<div>
<h2><span class="Apple-style-span">jQuery $.post() 方法</span></h2>
</div>
<div>
<h3><span class="Apple-style-span">语法：</span></h3>
<pre><span class="Apple-style-span">$.post(                                                                                                    URL,                                                                                             data,                                                                                            callbackFunction                                                                              );</span></pre>
</div>
<div>

<span class="Apple-style-span">必需的 URL 参数规定您希望请求的 URL。</span>

<span class="Apple-style-span">可选的 data 参数规定连同请求发送的数据。</span>

<span class="Apple-style-span">可选的 callback 参数是请求成功后所执行的函数名。</span>

</div>
<div>

<span class="Apple-style-span">使用 $.post() 连同请求一起发送数据：</span>
<h3><span class="Apple-style-span">实例</span></h3>
<pre><span class="Apple-style-span">$("button").click(function(){                                                                     $.post(                                                                                                "demo_test_post.asp",
       {name:"Donald Duck",city:"Duckburg"},
       function(data,status){
            alert("Data: " + data + "\nStatus: " + status);
       });
});


Jquery数组
</span></pre>
<div class="postBody">
<div id="cnblogs_post_body">
<h5>$.each(array, [callback])遍历,很常用</h5>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_774292" class="syntaxhighlighter javascript">
<table class=" xhe-border" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div></td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="javascript keyword">var</code> <code class="javascript plain">arr = [</code><code class="javascript string">'javascript'</code><code class="javascript plain">, </code><code class="javascript string">'php'</code><code class="javascript plain">, </code><code class="javascript string">'java'</code><code class="javascript plain">, </code><code class="javascript string">'c++'</code><code class="javascript plain">, </code><code class="javascript string">'c#'</code><code class="javascript plain">, </code><code class="javascript string">'perl'</code><code class="javascript plain">, </code><code class="javascript string">'vb'</code><code class="javascript plain">, </code><code class="javascript string">'html'</code><code class="javascript plain">, </code><code class="javascript string">'css'</code><code class="javascript plain">, </code><code class="javascript string">'objective-c'</code><code class="javascript plain">];</code></div>
<div class="line number2 index1 alt1"><code class="javascript plain">$.each(arr, </code><code class="javascript keyword">function</code><code class="javascript plain">(key, val) {</code></div>
<div class="line number3 index2 alt2"><code class="javascript spaces">    </code><code class="javascript comments">// firebug console</code></div>
<div class="line number4 index3 alt1"><code class="javascript spaces">    </code><code class="javascript plain">console.log(</code><code class="javascript string">'index in arr:'</code> <code class="javascript plain">+ key + </code><code class="javascript string">", corresponding value:"</code> <code class="javascript plain">+ val);</code></div>
<div class="line number5 index4 alt2"><code class="javascript spaces">    </code><code class="javascript comments">// 如果想退出循环</code></div>
<div class="line number6 index5 alt1"><code class="javascript spaces">    </code><code class="javascript comments">// return false;</code></div>
<div class="line number7 index6 alt2"><code class="javascript plain">});</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<h5>$.grep(array, callback, [invert])过滤,常用</h5>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_183832" class="syntaxhighlighter javascript">
<table class=" xhe-border" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div></td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="javascript keyword">var</code> <code class="javascript plain">temp = [];</code></div>
<div class="line number2 index1 alt1"><code class="javascript plain">temp = $.grep(arr, </code><code class="javascript keyword">function</code><code class="javascript plain">(val, key) {</code></div>
<div class="line number3 index2 alt2"><code class="javascript spaces">    </code><code class="javascript keyword">if</code><code class="javascript plain">(val.indexOf(</code><code class="javascript string">'c'</code><code class="javascript plain">) != -1)</code></div>
<div class="line number4 index3 alt1"><code class="javascript spaces">        </code><code class="javascript keyword">return</code> <code class="javascript keyword">true</code><code class="javascript plain">;</code></div>
<div class="line number5 index4 alt2"><code class="javascript spaces">    </code><code class="javascript comments">// 如果[invert]参数不给或为false, $.grep只收集回调函数返回true的数组元素</code></div>
<div class="line number6 index5 alt1"><code class="javascript spaces">    </code><code class="javascript comments">// 反之[invert]参数为true, $.grep收集回调函数返回false的数组元素</code></div>
<div class="line number7 index6 alt2"><code class="javascript plain">}, </code><code class="javascript keyword">false</code><code class="javascript plain">);</code></div>
<div class="line number8 index7 alt1"><code class="javascript plain">console.dir(temp);</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<h5>$.map(array, [callback])用的不是太多</h5>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_337207" class="syntaxhighlighter javascript">
<table class=" xhe-border" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div></td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="javascript comments">//1.6之前的版本只支持数组</code></div>
<div class="line number2 index1 alt1"><code class="javascript plain">temp = $.map(arr, </code><code class="javascript keyword">function</code><code class="javascript plain">(val, key) {</code></div>
<div class="line number3 index2 alt2"><code class="javascript spaces">    </code><code class="javascript comments">//返回null,返回的数组长度减1</code></div>
<div class="line number4 index3 alt1"><code class="javascript spaces">    </code><code class="javascript keyword">if</code><code class="javascript plain">(val === </code><code class="javascript string">'vb'</code><code class="javascript plain">) </code><code class="javascript keyword">return</code> <code class="javascript keyword">null</code><code class="javascript plain">;</code></div>
<div class="line number5 index4 alt2"><code class="javascript spaces">    </code><code class="javascript keyword">return</code> <code class="javascript plain">val;</code></div>
<div class="line number6 index5 alt1"><code class="javascript plain">});</code></div>
<div class="line number7 index6 alt2"><code class="javascript plain">console.dir(temp);</code></div>
<div class="line number8 index7 alt1"><code class="javascript comments">//1.6开始支持json格式的object</code></div>
<div class="line number9 index8 alt2"><code class="javascript keyword">var</code> <code class="javascript plain">obj = {key1: </code><code class="javascript string">'val1'</code><code class="javascript plain">, key2: </code><code class="javascript string">'val2'</code><code class="javascript plain">, key3: </code><code class="javascript string">'val3'</code><code class="javascript plain">};</code></div>
<div class="line number10 index9 alt1"><code class="javascript plain">temp = $.map(obj, </code><code class="javascript keyword">function</code><code class="javascript plain">(val, key) {</code></div>
<div class="line number11 index10 alt2"><code class="javascript spaces">    </code><code class="javascript keyword">return</code> <code class="javascript plain">val;</code></div>
<div class="line number12 index11 alt1"><code class="javascript plain">});</code></div>
<div class="line number13 index12 alt2"><code class="javascript plain">console.dir(temp);</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<h5>$.inArray(val, array)判断是否在指定数组中,常用</h5>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_443510" class="syntaxhighlighter javascript">
<table class=" xhe-border" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div></td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="javascript comments">//返回元素在数组中的位置,0为起始位置,返回-1则未找到该元素</code></div>
<div class="line number2 index1 alt1"><code class="javascript plain">console.log($.inArray(</code><code class="javascript string">'javascript'</code><code class="javascript plain">, arr));</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<h5>$.merge(first, second)合并两个数组,使用频率一般</h5>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_501950" class="syntaxhighlighter javascript">
<table class=" xhe-border" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div></td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="javascript keyword">var</code> <code class="javascript plain">frontEnd = [</code><code class="javascript string">'javascript'</code><code class="javascript plain">, </code><code class="javascript string">'css'</code><code class="javascript plain">, </code><code class="javascript string">'html'</code><code class="javascript plain">],</code></div>
<div class="line number2 index1 alt1"><code class="javascript spaces">      </code><code class="javascript plain">backEnd = [</code><code class="javascript string">'java'</code><code class="javascript plain">, </code><code class="javascript string">'php'</code><code class="javascript plain">, </code><code class="javascript string">'c++'</code><code class="javascript plain">];</code></div>
<div class="line number3 index2 alt2"><code class="javascript comments">// 这种方式会修改第一个参数, 即frontEnd数组</code></div>
<div class="line number4 index3 alt1"><code class="javascript plain">temp = $.merge(frontEnd, backEnd);</code></div>
<div class="line number5 index4 alt2"><code class="javascript plain">console.dir(temp);</code></div>
<div class="line number6 index5 alt1"><code class="javascript plain">console.dir(frontEnd);</code></div>
<div class="line number7 index6 alt2"><code class="javascript comments">// 可以用下面的方式来避免对原数组的影响</code></div>
<div class="line number8 index7 alt1"><code class="javascript comments">// $.merge($.merge([], frontEnd), backEnd);</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<h5>$.unique(array)过滤数组中的重复元素,不常用</h5>
<div class="cnblogs_Highlighter">
<div>blahblahblah....</div>
</div>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_851609" class="syntaxhighlighter javascript">
<table class=" xhe-border" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div></td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="javascript comments">// $.unique只支持DOM元素数组,去除重复DOM元素,不支持其他类型数组(String或者Number)</code></div>
<div class="line number2 index1 alt1"><code class="javascript comments">// 获得原始的DOM数组,而不是jQuery封装的</code></div>
<div class="line number3 index2 alt2"><code class="javascript keyword">var</code> <code class="javascript plain">divs = $(</code><code class="javascript string">'div'</code><code class="javascript plain">).get();</code></div>
<div class="line number4 index3 alt1"><code class="javascript comments">// 增加几个class为dup的div</code></div>
<div class="line number5 index4 alt2"><code class="javascript plain">divs = divs.concat($(</code><code class="javascript string">'div.dup'</code><code class="javascript plain">).get());</code></div>
<div class="line number6 index5 alt1"><code class="javascript plain">console.log(</code><code class="javascript string">"before unique:"</code> <code class="javascript plain">+ divs.length);</code></div>
<div class="line number7 index6 alt2"><code class="javascript plain">divs = $.unique(divs);</code></div>
<div class="line number8 index7 alt1"><code class="javascript plain">console.log(</code><code class="javascript string">"after unique:"</code> <code class="javascript plain">+ divs.length);</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<h5>$.makeArray(obj)将类数组对象转成数组,不常用</h5>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_625165" class="syntaxhighlighter javascript">
<table class=" xhe-border" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div></td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="javascript comments">//首先什么是类数组对象?jQuery官网上用divs = getElementsByTag('div')来做例子</code></div>
<div class="line number2 index1 alt1"><code class="javascript comments">//这个divs有类似数组的一些方法比如length,通过[index]方式获取元素等</code></div>
<div class="line number3 index2 alt2"><code class="javascript comments">//然后通过$.makeArray(divs)使它转为数组,就可以用数组的其他功能</code></div>
<div class="line number4 index3 alt1"><code class="javascript comments">//比如reverse(), pop()等</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<h5>$(dom).toArray()将jQuery集合恢复成DOM数组,不常用</h5>
<div class="cnblogs_Highlighter">
<div>
<div id="highlighter_90269" class="syntaxhighlighter javascript">
<table class=" xhe-border" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div></td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="javascript comments">//跟makeArray一样,相当的不常用,一般情况可以忽略</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 16:05:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 08:05:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jquery]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1523269815;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:76;}i:1;a:1:{s:2:"id";i:59;}i:2;a:1:{s:2:"id";i:68;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HTML</title>
		<link>https://www.idatavisual.com/?p=74</link>
		<pubDate>Wed, 03 Jan 2018 08:05:50 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=74</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>HTML &lt;div&gt; 元素</h2>
<div>HTML &lt;div&gt; 元素是块级元素,可用于组合其他 HTML 元素的容器。<span class="Apple-style-span">属于块级元素，浏览器会在其前后显示折行</span></div>
<div><span class="Apple-style-span">1.如果与 CSS 一同使用，&lt;div&gt; 元素可用于对大的内容块设置样式属性</span></div>
<div><span class="Apple-style-span">2.另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 &lt;table&gt; 元素进行文档布局不是表格的正确用法。&lt;table&gt; 元素的作用是显示表格化的数据。</span></div>
<!--more-->
<div><span class="Apple-style-span">HTML基础结构</span></div>
<div><span class="Apple-style-span">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;放置文章标题&lt;/title&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312"/&gt;
//这里是网页编码现在是gb2312
&lt;meta name="keywords" content="关键字"/&gt;
&lt;meta name="description" content="本页描述或关键字描述"/&gt;
&lt;/head&gt;
&lt;body&gt;
这里就是正文内容
&lt;/body&gt;
&lt;/html&gt;</span></div>
<div></div>
<div>
<h2>HTML &lt;span&gt; 元素</h2>
HTML &lt;span&gt; 元素是内联元素，可用作文本的容器。

当与 CSS 一同使用时，&lt;span&gt; 元素可用于为部分文本设置样式属性

</div>
<div></div>
<div><span class="Apple-style-span">div 元素是用于分组 HTML 元素的块级元素。</span></div>
<div>
<h1><span class="Apple-style-span">HTML &lt;th&gt; 标签</span></h1>
</div>
<div>

定义表格内的表头单元格。

HTML 表单中有两种类型的单元格：
<ul>
 	<li>表头单元格 - 包含表头信息（由 th 元素创建）</li>
 	<li>标准单元格 - 包含数据（由 td 元素创建）</li>
</ul>
th 元素内部的文本通常会呈现为居中的粗体文本，而 td 元素内的文本通常是左对齐的普通文本

</div>
<div></div>
<div></div>
<div></div>
<div><span class="Apple-style-span">简单理解，</span><span class="Apple-style-span">div</span><span class="Apple-style-span">是标签，</span><span class="Apple-style-span">css</span><span class="Apple-style-span">是设置标签样式（穿衣服），</span><span class="Apple-style-span">html</span><span class="Apple-style-span">是由div等标签组成的网页</span></div>
<div></div>
<div>
<pre class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style type="text/css"&gt;
div#container{width:500px}
div#header {background-color:#99bbbb;}
div#menu {background-color:#ffff99;height:200px;width:150px;float:left;}
div#content {background-color:#EEEEEE;height:200px;width:350px;float:left;}
div#footer {background-color:#99bbbb;clear:both;text-align:center;}
h1 {margin-bottom:0;}
h2 {margin-bottom:0;font-size:18px;}
ul {margin:0;}
li {list-style:none;}
&lt;/style&gt;
&lt;/head&gt;


&lt;body&gt;


&lt;div id="container"&gt;


&lt;div id="header"&gt;
&lt;h1&gt;Main Title of Web Page&lt;/h1&gt;
&lt;/div&gt;


&lt;div id="menu"&gt;
&lt;h2&gt;Menu&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;div id="content"&gt;Content goes here&lt;/div&gt;


&lt;div id="footer"&gt;Copyright W3School.com.cn&lt;/div&gt;


&lt;/div&gt;


&lt;/body&gt;
&lt;/html&gt;</pre>
<div>
<h2>HTML 块元素</h2>
大多数 HTML 元素被定义为块级元素或内联元素。

编者注：“块级元素”译为 block level element，“内联元素”译为 inline element。

块级元素在浏览器显示时，通常会以新行来开始（和结束）。

例子：&lt;h1&gt;, &lt;p&gt;, &lt;ul&gt;, &lt;table&gt;

</div>
<div>
<h2>HTML 内联元素</h2>
内联元素在显示时通常不会以新行开始。

例子：&lt;b&gt;, &lt;td&gt;, &lt;a&gt;, &lt;img&gt;

</div>
<div>
<h2>HTML &lt;div&gt; 元素</h2>
HTML &lt;div&gt; 元素是块级元素，它是可用于组合其他 HTML 元素的容器。

&lt;div&gt; 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。

如果与 CSS 一同使用，&lt;div&gt; 元素可用于对大的内容块设置样式属性。

&lt;div&gt; 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 &lt;table&gt; 元素进行文档布局不是表格的正确用法。&lt;table&gt; 元素的作用是显示表格化的数据。

</div>
<div>
<h2>HTML &lt;span&gt; 元素</h2>
HTML &lt;span&gt; 元素是内联元素，可用作文本的容器。

&lt;span&gt; 元素也没有特定的含义。

当与 CSS 一同使用时，&lt;span&gt; 元素可用于为部分文本设置样式属性。

</div>
</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 16:05:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 08:05:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[html]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521839149;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:68;}i:1;a:1:{s:2:"id";i:59;}i:2;a:1:{s:2:"id";i:64;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript</title>
		<link>https://www.idatavisual.com/?p=76</link>
		<pubDate>Wed, 03 Jan 2018 08:06:19 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=76</guid>
		<description></description>
		<content:encoded><![CDATA[<div><span class="Apple-style-span">简介：</span></div>
<span class="Apple-style-span">Node.js，avaScript的服务器技术</span>
<div><span class="Apple-style-span">jQuery ,JavaScript的前端技术</span><span class="Apple-style-span">要实现在后台运行JavaScript代码，代码需要先被解释然后正确的执行</span><span class="Apple-style-span">Node.js的原理正是如此，它使用了Google的V8虚拟机</span><span class="Apple-style-span">Node.js事实上既是一个运行时环境，同时又是一个库,</span><span class="Apple-style-span">伴随着Node.js的还有许多有用的模块，它们可以简化很多重复的劳作，比如向终端输出字符串</span><span class="Apple-style-span">JavaScript 被用来改进设计、验证表单、检测浏览器、创建cookies.</span></div>
<!--more-->
<p style="text-align: left;"></p>

<dl>
 	<dt>将动态的文本放入 HTML 页面 ,<span style="color: #000000;">对事件作出响应,</span><span style="color: #000000;">可以读写 HTML 元素</span></dt>
</dl>
<div>JavaScript 是一种解释性语言（就是说，代码执行不进行预编译）。</div>
<div></div>
&nbsp;
<div><span class="Apple-style-span"> </span></div>
<div><span class="Apple-style-span">简明教程：</span></div>
<div>
<h2><span class="Apple-style-span">如何把 JavaScript 放入 HTML 页面</span></h2>
</div>
<div>
<pre><code>document.write("Hello World!");
</code></pre>
<div>
<h2><code><span class="Apple-style-span">如何与老的浏览器打交道</span></code></h2>
</div>
<div>

<code>防止那些不支持 JavaScript 的浏览器会把脚本作为页面的内容来显示 可以使用这样的 HTML 注释标签</code>

</div>
<div>
<pre><code>&lt;script type="text/javascript"&gt;
     &lt;!--
          document.write("Hello World!");
<a>     //--&gt;</a></code></pre>
<pre>&lt;/script&gt;
</pre>
</div>
</div>
<div>实例
<span class="Apple-style-span">head 部分</span>
包含函数的脚本位于文档的 head 部分--&gt;确保在调用函数前，脚本已经载入了。</div>
<div>
<div>

<span class="Apple-style-span">当脚本被调用时，或者当事件被触发时，</span>脚本就会被执行。当把脚本放置到 head 部分后，就可以确保在需要使用脚本之前，它已经被载入了。

</div>
<span class="Apple-style-span">body 部分</span>

</div>
<div>
<div>

在页面载入时脚本就会被执行。当你把脚本放置于 body 部分后，它就会生成页面的内容

</div>
<span class="Apple-style-span">外部 JavaScript</span>

</div>
<div>

希望在若干个页面中运行 JavaScript，同时不在每个页面中写相同的脚本。

</div>
<div>
<pre><code>&lt;script src="xxx.js"&gt;....&lt;/script&gt;</code></pre>
<div><span class="Apple-style-span">注释</span></div>
<div>
<pre>// 这行代码输出标题：
</pre>
<div>
<pre>/*
  下面的代码将输出
  一个标题和两个段落
*/
</pre>
<pre><span class="Apple-style-span">变量名称的规则：</span></pre>
<pre>变量对大小写敏感（y 和 Y 是两个不同的变量） 
变量必须以字母或下划线开始 
</pre>
<div>通过 <span class="Apple-style-span">var 语句</span>来声明 JavaScript 变量：</div>
<div>
<pre>var x;
</pre>
<div>
<pre>var carname="Volvo";
</pre>
</div>
</div>
</div>
</div>
</div>
<div>如果您所赋值的变量还未进行过声明，该变量会自动声明</div>
<div>重新声明 JavaScript 变量
如果您再次声明了 JavaScript 变量，该变量也不会丢失其原始值var x=5;
var x;</div>
<div>
<h2><span class="Apple-style-span">运算符</span></h2>
</div>
<div>+ 运算符用于把文本值或字符串变量加起来（连接起来）</div>
<div>
<h2><span class="Apple-style-span">运算符:</span></h2>
</div>
<div>
<pre>variablename=(condition)?value1:value2 
</pre>
<pre>if,switch  同于php
</pre>
<div><span class="Apple-style-span">警告框</span></div>
<div>经常用于确保用户可以得到某些信息</div>
<div>
<pre>alert("文本")
</pre>
<div><span class="Apple-style-span">确认框</span></div>
<div>用于使用户可以验证或者接受某些信息</div>
<div>
<pre>confirm("文本")
</pre>
<div><span class="Apple-style-span">提示框</span></div>
<div>经常用于提示用户在进入页面前输入某个值</div>
<div>
<pre>prompt("文本","默认值")
</pre>
<div>
<h2><span class="Apple-style-span">函数</span></h2>
<div>     1&gt;将脚本编写为函数，就可以避免页面载入时执行该脚本</div>
</div>
<div>     2&gt;函数包含着一些代码，这些代码只能被事件激活，或者在函数被调用时才会执行</div>
<div>     3&gt;函数在页面起始位置定义，即 &lt;head&gt; 部分</div>
<div></div>
<div><span class="Apple-style-span">定义函数</span></div>
<div>//带有参数，返回值的方法</div>
<div>
<pre>function prod(a,b){
     x=a*b
     return x
}
</pre>
<div>
<h2><span class="Apple-style-span">变量的生存期</span></h2>
<div>1&gt;当您在函数内声明了一个变量后，就只能在该函数中访问该变量。当退出该函数后，这个变量会被撤销。这种变量称为本地变量。</div>
<div>     您可以在不同的函数中使用名称相同的本地变量，这是因为只有声明过变量的函数能够识别其中的每个变量。</div>
<div>2&gt;如果您在函数之外声明了一个变量，则页面上的所有函数都可以访问该变量。这些变量的生存期从声明它们之后开始，在页面关闭时结束</div>
</div>
<div>
<h2><span class="Apple-style-span">for 循环</span></h2>
在脚本的运行次数已确定的情况下使用 for 循环。
<h3><span class="Apple-style-span">语法：</span></h3>
<pre><code>for</code> (变量=开始值;变量&lt;=结束值;变量=变量+步进值) { 需执行的代码 }</pre>
<div>
<h2><span class="Apple-style-span">while 循环</span></h2>
while 循环用于在指定条件为 true 时循环执行代码。
<h3><span class="Apple-style-span">语法：</span></h3>
<pre><code>while</code> (变量&lt;=结束值) { 需执行的代码 }</pre>
<div>
<h2><span class="Apple-style-span">do...while 循环</span></h2>
</div>
<div>
<h3><span class="Apple-style-span">语法：</span></h3>
<pre><code>do</code> { 需执行的代码 } <code>while</code> (变量&lt;=结束值)</pre>
<div>
<h2><span class="Apple-style-span"> For...In 声明</span></h2>
</div>
<div>For...In 声明用于对数组或者对象的属性进行循环操作</div>
<div>
<h3><span class="Apple-style-span">语法：</span></h3>
<pre><code>for</code> (变量 <code>in</code> 对象) { 在此执行代码 }</pre>
<pre>//“变量”用来指定变量，指定的变量可以是数组元素，也可以是对象的属性
</pre>
<pre>事件举例：
鼠标点击 
页面或图像载入 
鼠标悬浮于页面的某个热点之上 
在表单中选取输入框 
确认表单 
键盘按键 
onload 和 onUnload
当用户进入或离开页面时就会触发 onload 和 onUnload 事件。
onload 事件常用来检测访问者的浏览器类型和版本，然后根据这些信息载入特定版本的网页
onload 和 onUnload 事件也常被用来处理用户进入或离开页面时所建立的 cookies
onFocus, onBlur 和 onChange
onFocus、onBlur 和 onChange 事件通常相互配合用来验证表单。

下面是一个使用 onChange 事件的例子。用户一旦改变了域的内容，checkEmail() 函数就会被调用。

&lt;input type="text" size="30" id="email" onchange="checkEmail()"&gt;
onSubmit
onSubmit 用于在提交表单之前验证所有的表单域。
使用 onSubmit 事件的例子。当用户单击表单中的确认按钮时，checkForm() 函数就会被调用。
假若域的值无效，此次提交就会被取消。checkForm() 函数的返回值是 true 或者 false。
如果返回值为true，则提交表单，反之取消提交。

&lt;form method="post" action="xxx.htm" onsubmit="return checkForm()"&gt;
onMouseOver 和 onMouseOut
onMouseOver 和 onMouseOut 用来创建“动态的”按钮。
当 onMouseOver 事件被脚本侦测到时，就会弹出一个警告框
onmouseover="alert('An onMouseOver event');return false"&gt;

Try...Catch 语句
语法：
try
{
   //在此运行代码
}
catch(err)
{
   //在此处理错误
}
</pre>
<div>
<h2><span class="Apple-style-span">Throw 声明</span></h2>
</div>
<div>

throw 声明的作用是创建 exception（异常）。你可以把这个声明与 try...catch 声明配合使用，以达到控制程序流并产生精确错误消息的目的

</div>
<div>
<pre>&lt;script type="text/javascript"&gt;
var x=prompt("Enter a number between 0 and 10:","")
<code>try</code> { if(x&gt;10) <code>          throw "Err1"</code> else if(x&lt;0) <code>          throw "Err2"</code> } <code>catch(er)</code> { if(er=="Err1") alert("Error! The value is too high") if(er == "Err2") alert("Error! The value is too low") } &lt;/script&gt;</pre>
</div>
<pre>onerror 事件 （chrome、opera、safari 浏览器不支持）

只要页面中出现脚本错误，就会产生 onerror 事件
</pre>
<div>
<pre>&lt;html&gt;
&lt;head&gt;
    &lt;script type="text/javascript"&gt;
        onerror = handleErr
        var txt = ""

        function handleErr(msg, url, l) {
            txt = "There was an error on this page.\n\n"
            txt += "Error: " + msg + "\n"
            txt += "URL: " + url + "\n"
            txt += "Line: " + l + "\n\n"
            txt += "Click OK to continue.\n\n"
            alert(txt)
            return true
        }

        function message() {
            alert("Welcome guest!")
        }
    &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;input type="button" value="View message" onclick="message()"/&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
</div>
<div>

下面的表格列出了其余的特殊字符，这些特殊字符都可以使用反斜杠来添加到文本字符串中：
<table class=" xhe-border">
<tbody>
<tr>
<th>代码</th>
<th>输出</th>
</tr>
<tr>
<td>\'</td>
<td>单引号</td>
</tr>
<tr>
<td>\"</td>
<td>双引号</td>
</tr>
<tr>
<td>\&amp;</td>
<td>和号</td>
</tr>
<tr>
<td>\\</td>
<td>反斜杠</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>\r</td>
<td>回车符</td>
</tr>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td>\b</td>
<td>退格符</td>
</tr>
<tr>
<td>\f</td>
<td>换页符</td>
</tr>
</tbody>
</table>
</div>
<pre><span class="Apple-style-span">字符串使用单引号或者双引号</span>来起始或者结束。
var txt="We are the so-called \"Vikings\" from the north."
document.write ("You \&amp; me are singing!")
</pre>
<pre>在文本字符串内部使用<span class="Apple-style-span">反斜杠对代码进行折行</span>
document.write("Hello \
World!")
JavaScript 是面向对象的编程语言 (OOP)
</pre>
<div>
<h2><span class="Apple-style-span">String（字符串）对象 实例</span></h2>
</div>
<div>
<table class=" xhe-border">
<tbody>
<tr>
<th>方法</th>
<th>描述</th>
<th>FF</th>
<th>IE</th>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">anchor()</a></td>
<td>创建 HTML 锚。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">big()</a></td>
<td>用大号字体显示字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">blink()</a></td>
<td>显示闪动字符串。</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">bold()</a></td>
<td>使用粗体显示字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">charAt()</a></td>
<td>返回在指定位置的字符。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">charCodeAt()</a></td>
<td>返回在指定的位置的字符的 Unicode 编码。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">concat()</a></td>
<td>连接字符串。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">fixed()</a></td>
<td>以打字机文本显示字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">fontcolor()</a></td>
<td>使用指定的颜色来显示字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">fontsize()</a></td>
<td>使用指定的尺寸来显示字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">fromCharCode()</a></td>
<td>从字符编码创建一个字符串。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">indexOf()</a></td>
<td>检索字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">italics()</a></td>
<td>使用斜体显示字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">lastIndexOf()</a></td>
<td>从后向前搜索字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">link()</a></td>
<td>将字符串显示为链接。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">localeCompare()</a></td>
<td>用本地特定的顺序来比较两个字符串。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">match()</a></td>
<td>找到一个或多个正在表达式的匹配。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">replace()</a></td>
<td>替换与正则表达式匹配的子串。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">search()</a></td>
<td>检索与正则表达式相匹配的值。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">slice()</a></td>
<td>提取字符串的片断，并在新的字符串中返回被提取的部分。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">small()</a></td>
<td>使用小字号来显示字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">split()</a></td>
<td>把字符串分割为字符串数组。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">strike()</a></td>
<td>使用删除线来显示字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">sub()</a></td>
<td>把字符串显示为下标。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">substr()</a></td>
<td>从起始索引号提取字符串中指定数目的字符。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">substring()</a></td>
<td>提取字符串中两个指定的索引号之间的字符。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">sup()</a></td>
<td>把字符串显示为上标。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toLocaleLowerCase()</a></td>
<td>把字符串转换为小写。</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toLocaleUpperCase()</a></td>
<td>把字符串转换为大写。</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toLowerCase()</a></td>
<td>把字符串转换为小写。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toUpperCase()</a></td>
<td>把字符串转换为大写。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>toSource()</td>
<td>代表对象的源代码。</td>
<td>1</td>
<td>-</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toString()</a></td>
<td>返回字符串。</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">valueOf()</a></td>
<td>返回某个字符串对象的原始值。</td>
<td>1</td>
<td>4</td>
</tr>
</tbody>
</table>
</div>
<div>
<h2><span class="Apple-style-span">Date（日期）对象 实例</span></h2>
</div>
<div>
<h2><span class="Apple-style-span">Date 对象方法</span></h2>
FF: Firefox, IE: Internet Explorer
<table class=" xhe-border">
<tbody>
<tr>
<th>方法</th>
<th>描述</th>
<th>FF</th>
<th>IE</th>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Date()</a></td>
<td>返回当日的日期和时间。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getDate()</a></td>
<td>从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getDay()</a></td>
<td>从 Date 对象返回一周中的某一天 (0 ~ 6)。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getMonth()</a></td>
<td>从 Date 对象返回月份 (0 ~ 11)。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getFullYear()</a></td>
<td>从 Date 对象以四位数字返回年份。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getYear()</a></td>
<td>请使用 getFullYear() 方法代替。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getHours()</a></td>
<td>返回 Date 对象的小时 (0 ~ 23)。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getMinutes()</a></td>
<td>返回 Date 对象的分钟 (0 ~ 59)。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getSeconds()</a></td>
<td>返回 Date 对象的秒数 (0 ~ 59)。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getMilliseconds()</a></td>
<td>返回 Date 对象的毫秒(0 ~ 999)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getTime()</a></td>
<td>返回 1970 年 1 月 1 日至今的毫秒数。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getTimezoneOffset()</a></td>
<td>返回本地时间与格林威治标准时间 (GMT) 的分钟差。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getUTCDate()</a></td>
<td>根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getUTCDay()</a></td>
<td>根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getUTCMonth()</a></td>
<td>根据世界时从 Date 对象返回月份 (0 ~ 11)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getUTCFullYear()</a></td>
<td>根据世界时从 Date 对象返回四位数的年份。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getUTCHours()</a></td>
<td>根据世界时返回 Date 对象的小时 (0 ~ 23)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getUTCMinutes()</a></td>
<td>根据世界时返回 Date 对象的分钟 (0 ~ 59)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getUTCSeconds()</a></td>
<td>根据世界时返回 Date 对象的秒钟 (0 ~ 59)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">getUTCMilliseconds()</a></td>
<td>根据世界时返回 Date 对象的毫秒(0 ~ 999)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">parse()</a></td>
<td>返回1970年1月1日午夜到指定日期（字符串）的毫秒数。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setDate()</a></td>
<td>设置 Date 对象中月的某一天 (1 ~ 31)。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setMonth()</a></td>
<td>设置 Date 对象中月份 (0 ~ 11)。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setFullYear()</a></td>
<td>设置 Date 对象中的年份（四位数字）。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setYear()</a></td>
<td>请使用 setFullYear() 方法代替。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setHours()</a></td>
<td>设置 Date 对象中的小时 (0 ~ 23)。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setMinutes()</a></td>
<td>设置 Date 对象中的分钟 (0 ~ 59)。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setSeconds()</a></td>
<td>设置 Date 对象中的秒钟 (0 ~ 59)。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setMilliseconds()</a></td>
<td>设置 Date 对象中的毫秒 (0 ~ 999)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setTime()</a></td>
<td>以毫秒设置 Date 对象。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setUTCDate()</a></td>
<td>根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setUTCMonth()</a></td>
<td>根据世界时设置 Date 对象中的月份 (0 ~ 11)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setUTCFullYear()</a></td>
<td>根据世界时设置 Date 对象中的年份（四位数字）。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setUTCHours()</a></td>
<td>根据世界时设置 Date 对象中的小时 (0 ~ 23)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setUTCMinutes()</a></td>
<td>根据世界时设置 Date 对象中的分钟 (0 ~ 59)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setUTCSeconds()</a></td>
<td>根据世界时设置 Date 对象中的秒钟 (0 ~ 59)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">setUTCMilliseconds()</a></td>
<td>根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toSource()</a></td>
<td>返回该对象的源代码。</td>
<td>1</td>
<td>-</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toString()</a></td>
<td>把 Date 对象转换为字符串。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toTimeString()</a></td>
<td>把 Date 对象的时间部分转换为字符串。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toDateString()</a></td>
<td>把 Date 对象的日期部分转换为字符串。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toGMTString()</a></td>
<td>请使用 toUTCString() 方法代替。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toUTCString()</a></td>
<td>根据世界时，把 Date 对象转换为字符串。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toLocaleString()</a></td>
<td>根据本地时间格式，把 Date 对象转换为字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toLocaleTimeString()</a></td>
<td>根据本地时间格式，把 Date 对象的时间部分转换为字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toLocaleDateString()</a></td>
<td>根据本地时间格式，把 Date 对象的日期部分转换为字符串。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">UTC()</a></td>
<td>根据世界时返回 1997 年 1 月 1 日 到指定日期的毫秒数。</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">valueOf()</a></td>
<td>返回 Date 对象的原始值。</td>
<td>1</td>
<td>4</td>
</tr>
</tbody>
</table>
</div>
<div>
<h2><span class="Apple-style-span">定义日期</span></h2>
</div>
<div>
<pre>var myDate=<code>new</code> Date()</pre>
</div>
<div>注释：Date 对象自动使用当前的日期和时间作为其初始值</div>
<div></div>
<div>
<h2><span class="Apple-style-span">操作日期</span></h2>
</div>
<div>
<div>

日期对象设置了一个特定的日期 (2008 年 8 月 9 日)：

</div>
<pre>var myDate=new Date()
myDate.<code>setFullYear</code>(2008,7,9)</pre>
</div>
<div>
<div>

将日期对象设置为 5 天后的日期

</div>
<pre>var myDate=new Date()
myDate.<code>setDate</code>(myDate.getDate()+5)</pre>
</div>
<div>

数组对象的作用是：使用单独的变量名来存储一系列的值
定义数组
var mycars=new Array()
mycars[0]="Saab"
mycars[1]="Volvo"
mycars[2]="BMW"

var mycars=new Array("Saab","Volvo","BMW")
访问数组
document.write(mycars[0])
修改已有数组中的值
mycars[0]="Opel";

</div>
<div>
<table class=" xhe-border">
<tbody>
<tr>
<th>方法</th>
<th>描述</th>
<th>FF</th>
<th>IE</th>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">concat()</a></td>
<td>连接两个或更多的数组，并返回结果。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">join()</a></td>
<td>把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">pop()</a></td>
<td>删除并返回数组的最后一个元素</td>
<td>1</td>
<td>5.5</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">push()</a></td>
<td>向数组的末尾添加一个或更多元素，并返回新的长度。</td>
<td>1</td>
<td>5.5</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">reverse()</a></td>
<td>颠倒数组中元素的顺序。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">shift()</a></td>
<td>删除并返回数组的第一个元素</td>
<td>1</td>
<td>5.5</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">slice()</a></td>
<td>从某个已有的数组返回选定的元素</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">sort()</a></td>
<td>对数组的元素进行排序</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">splice()</a></td>
<td>删除元素，并向数组添加新元素。</td>
<td>1</td>
<td>5.5</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toSource()</a></td>
<td>返回该对象的源代码。</td>
<td>1</td>
<td>-</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toString()</a></td>
<td>把数组转换为字符串，并返回结果。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toLocaleString()</a></td>
<td>把数组转换为本地数组，并返回结果。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">unshift()</a></td>
<td>向数组的开头添加一个或更多元素，并返回新的长度。</td>
<td>1</td>
<td>6</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">valueOf()</a></td>
<td>返回数组对象的原始值</td>
<td>1</td>
<td>4</td>
</tr>
</tbody>
</table>
</div>
<div></div>
<div>
<h1><span class="Apple-style-span">Boolean（逻辑）对象</span></h1>
</div>
<div>
<h2><span class="Apple-style-span">Boolean 对象</span></h2>
</div>
<div> Boolean 对象理解为一个产生逻辑值的对象包装器,用于将非逻辑值转换为逻辑值（true 或者 false）。</div>
<div>
<pre>var myBoolean=new Boolean()
var myBoolean=new Boolean(0)
var myBoolean=new Boolean(null)
var myBoolean=new Boolean("")
var myBoolean=new Boolean(false)
var myBoolean=new Boolean(NaN)
</pre>
下面的所有的代码行均会创初始值为 true 的 Boolean 对象：
<pre>var myBoolean=new Boolean(true)
var myBoolean=new Boolean("true")
var myBoolean=new Boolean("false")
var myBoolean=new Boolean("Richard")
</pre>
<div>

下面的例子展示 <span class="Apple-style-span">toSource()</span> 方法的用法：
<pre>&lt;script type="text/javascript"&gt;

function employee(name,job,born)
{
     this.name=name;
     this.job=job;
     this.born=born;
}

var bill=new employee("Bill Gates","Engineer",1985);

document.write(<code>bill.toSource()</code>); &lt;/script&gt;</pre>
输出：
<pre>({name:"Bill Gates", job:"Engineer", born:1985}) 
</pre>
</div>
</div>
<div></div>
<div>
<table class=" xhe-border">
<tbody>
<tr>
<th>方法</th>
<th>描述</th>
<th></th>
<th></th>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toSource()</a></td>
<td>返回该对象的源代码。</td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">toString()</a></td>
<td>把逻辑值转换为字符串，并返回结果。</td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">valueOf()</a></td>
<td>返回 Boolean 对象的原始值。</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div></div>
<div></div>
<div>
<h2><span class="Apple-style-span">Math 对象</span></h2>
</div>
<div>
<dl>
 	<dt><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">round()</a></dt>
 	<dd>如何使用 round()。</dd>
 	<dt><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">random()</a></dt>
 	<dd>如何使用 random() 来返回 0 到 1 之间的随机数。</dd>
 	<dt><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">max()</a></dt>
 	<dd>如何使用 max() 来返回两个给定的数中的较大的数。</dd>
 	<dt><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">min()</a></dt>
 	<dd>如何使用 min() 来返回两个给定的数中的较小的数。</dd>
</dl>
</div>
<div>
<h1><span class="Apple-style-span">RegExp 对象</span></h1>
</div>
<div>RegExp 是正则表达式的缩写,<span class="Apple-style-span">用于规定在文本中检索的内容,</span>可用于解析、格式检查、替换等等</div>
<div></div>
<div>
<h2><span class="Apple-style-span">定义 RegExp</span></h2>
</div>
<div>RegExp 对象用于存储检索模式</div>
<div>
<pre>var patt1=new RegExp("e");
</pre>
<div>当您使用该 RegExp 对象在一个字符串中检索时，将寻找的是字符 "e"</div>
<div>
<h2><span class="Apple-style-span">RegExp 对象的方法</span></h2>
</div>
<div>
<h2><span class="Apple-style-span">test()</span></h2>
<div></div>
<div>test() 方法检索字符串中的指定值。返回值是 true 或 false</div>
</div>
<div>
<h3><span class="Apple-style-span">例子：</span></h3>
<pre>var patt1=new RegExp("e");

document.write(patt1.test("The best things in life are free")); 
</pre>
由于该字符串中存在字母 "e"，以上代码的输出将是：
<pre>true
</pre>
<div>
<h2><span class="Apple-style-span">exec()</span></h2>
<div></div>
<div>exec() 方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null</div>
</div>
<div>
<h3><span class="Apple-style-span">例子 1：</span></h3>
<pre>var patt1=new RegExp("e");

document.write(patt1.exec("The best things in life are free")); 
</pre>
由于该字符串中存在字母 "e"，以上代码的输出将是：
<pre>e
</pre>
<div>
<h2><span class="Apple-style-span">compile()</span></h2>
compile() 方法用于改变 RegExp。
<div>compile() 既可以改变检索模式，也可以添加或删除第二个参数</div>
</div>
<div>
<h3><span class="Apple-style-span">例子：</span></h3>
<pre>var patt1=new RegExp("e");

document.write(patt1.test("The best things in life are free"));

patt1.compile("d");

document.write(patt1.test("The best things in life are free"));
</pre>
由于字符串中存在 "e"，而没有 "d"，以上代码的输出是：
<pre>true false
</pre>
<pre></pre>
<div>
<h2><span class="Apple-style-span">RegExp 对象</span></h2>
RegExp 对象表示正则表达式，它是对字符串执行模式匹配的强大工具。
<h3><span class="Apple-style-span">直接量语法</span></h3>
<pre>/pattern/attributes
</pre>
<h3><span class="Apple-style-span">创建 RegExp 对象的语法：</span></h3>
<pre>new RegExp(<span class="Apple-style-span">pattern</span>, <span class="Apple-style-span">attributes</span>);
</pre>
<h3><span class="Apple-style-span">参数</span></h3>
参数 <span class="Apple-style-span">pattern</span> 是一个字符串，指定了正则表达式的模式或其他正则表达式。

参数 <span class="Apple-style-span">attributes</span> 是一个可选的字符串，包含属性 "g"、"i" 和 "m"，分别用于指定全局匹配、区分大小写的匹配和多行匹配。ECMAScript 标准化之前，不支持 m 属性。如果 <span class="Apple-style-span">pattern</span> 是正则表达式，而不是字符串，则必须省略该参数。
<h3><span class="Apple-style-span">返回值</span></h3>
一个新的 RegExp 对象，具有指定的模式和标志。如果参数 <span class="Apple-style-span">pattern</span> 是正则表达式而不是字符串，那么 RegExp() 构造函数将用与指定的 RegExp 相同的模式和标志创建一个新的 RegExp 对象。

如果不用 new 运算符，而将 RegExp() 作为函数调用，那么它的行为与用 new 运算符调用时一样，只是当 <span class="Apple-style-span">pattern</span> 是正则表达式时，它只返回 <span class="Apple-style-span">pattern</span>，而不再创建一个新的 RegExp 对象。
<h3><span class="Apple-style-span">抛出</span></h3>
SyntaxError - 如果 <span class="Apple-style-span">pattern</span> 不是合法的正则表达式，或 <span class="Apple-style-span">attributes</span> 含有 "g"、"i" 和 "m" 之外的字符，抛出该异常。

TypeError - 如果 <span class="Apple-style-span">pattern</span> 是 RegExp 对象，但没有省略 <span class="Apple-style-span">attributes</span> 参数，抛出该异常。

</div>
<div>
<h2><span class="Apple-style-span">修饰符</span></h2>
<table class=" xhe-border">
<tbody>
<tr>
<th>修饰符</th>
<th>描述</th>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">i</a></td>
<td>执行对大小写不敏感的匹配。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">g</a></td>
<td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td>
</tr>
<tr>
<td>m</td>
<td>执行多行匹配。</td>
</tr>
</tbody>
</table>
</div>
<div>
<h2><span class="Apple-style-span">方括号</span></h2>
方括号用于查找某个范围内的字符：
<table class=" xhe-border">
<tbody>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">[abc]</a></td>
<td>查找方括号之间的任何字符。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">[^abc]</a></td>
<td>查找任何不在方括号之间的字符。</td>
</tr>
<tr>
<td>[0-9]</td>
<td>查找任何从 0 至 9 的数字。</td>
</tr>
<tr>
<td>[a-z]</td>
<td>查找任何从小写 a 到小写 z 的字符。</td>
</tr>
<tr>
<td>[A-Z]</td>
<td>查找任何从大写 A 到大写 Z 的字符。</td>
</tr>
<tr>
<td>[a-Z]</td>
<td>查找任何从小写 a 到大写 Z 的字符。</td>
</tr>
<tr>
<td>[adgk]</td>
<td>查找给定集合内的任何字符。</td>
</tr>
<tr>
<td>[^adgk]</td>
<td>查找给定集合外的任何字符。</td>
</tr>
<tr>
<td>[red|blue|green]</td>
<td>查找任何指定的选项。</td>
</tr>
</tbody>
</table>
</div>
<div>
<h2><span class="Apple-style-span">元字符</span></h2>
元字符（Metacharacter）是拥有特殊含义的字符：
<table class=" xhe-border">
<tbody>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">.</a></td>
<td>查找单个字符，除了换行和行结束符。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">\w</a></td>
<td>查找单词字符。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">\W</a></td>
<td>查找非单词字符。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">\d</a></td>
<td>查找数字。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">\D</a></td>
<td>查找非数字字符。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">\s</a></td>
<td>查找空白字符。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">\S</a></td>
<td>查找非空白字符。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">\b</a></td>
<td>查找位于单词的开头或结尾的匹配。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">\B</a></td>
<td>查找不处在单词的开头或结尾的匹配。</td>
</tr>
<tr>
<td>\0</td>
<td>查找 NUL 字符。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">\n</a></td>
<td>查找换行符。</td>
</tr>
<tr>
<td>\f</td>
<td>查找换页符。</td>
</tr>
<tr>
<td>\r</td>
<td>查找回车符。</td>
</tr>
<tr>
<td>\t</td>
<td>查找制表符。</td>
</tr>
<tr>
<td>\v</td>
<td>查找垂直制表符。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">\xxx</a></td>
<td>查找以八进制数 xxx 规定的字符。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">\xdd</a></td>
<td>查找以十六进制数 dd 规定的字符。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">\uxxxx</a></td>
<td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td>
</tr>
</tbody>
</table>
</div>
<div>
<h2><span class="Apple-style-span">量词</span></h2>
<table class=" xhe-border">
<tbody>
<tr>
<th>量词</th>
<th>描述</th>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">n+</a></td>
<td>匹配任何包含至少一个 n 的字符串。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">n*</a></td>
<td>匹配任何包含零个或多个 n 的字符串。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">n?</a></td>
<td>匹配任何包含零个或一个 n 的字符串。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">n{X}</a></td>
<td>匹配包含 X 个 n 的序列的字符串。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">n{X,Y}</a></td>
<td>匹配包含 X 或 Y 个 n 的序列的字符串。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">n{X,}</a></td>
<td>匹配包含至少 X 个 n 的序列的字符串。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">n$</a></td>
<td>匹配任何结尾为 n 的字符串。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">^n</a></td>
<td>匹配任何开头为 n 的字符串。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">?=n</a></td>
<td>匹配任何其后紧接指定字符串 n 的字符串。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">?!n</a></td>
<td>匹配任何其后没有紧接指定字符串 n 的字符串。</td>
</tr>
</tbody>
</table>
</div>
<div>
<h2><span class="Apple-style-span">RegExp 对象属性</span></h2>
FF: Firefox, IE: Internet Explorer
<table class=" xhe-border">
<tbody>
<tr>
<th>属性</th>
<th>描述</th>
<th>FF</th>
<th>IE</th>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">global</a></td>
<td>RegExp 对象是否具有标志 g。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">ignoreCase</a></td>
<td>RegExp 对象是否具有标志 i。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">lastIndex</a></td>
<td>一个整数，标示开始下一次匹配的字符位置。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">multiline</a></td>
<td>RegExp 对象是否具有标志 m。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">source</a></td>
<td>正则表达式的源文本。</td>
<td>1</td>
<td>4</td>
</tr>
</tbody>
</table>
</div>
<div>
<h2><span class="Apple-style-span">RegExp 对象方法</span></h2>
FF: Firefox, IE: Internet Explorer
<table class=" xhe-border">
<tbody>
<tr>
<th>方法</th>
<th>描述</th>
<th>FF</th>
<th>IE</th>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">compile</a></td>
<td>编译正则表达式。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">exec</a></td>
<td>检索字符串中指定的值。返回找到的值，并确定其位置。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">test</a></td>
<td>检索字符串中指定的值。返回 true 或 false。</td>
<td>1</td>
<td>4</td>
</tr>
</tbody>
</table>
</div>
<div>
<h2><span class="Apple-style-span">支持正则表达式的 String 对象的方法</span></h2>
FF: Firefox, IE: Internet Explorer
<table class=" xhe-border">
<tbody>
<tr>
<th>方法</th>
<th>描述</th>
<th>FF</th>
<th>IE</th>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">search</a></td>
<td>检索与正则表达式相匹配的值。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">match</a></td>
<td>找到一个或多个正则表达式的匹配。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">replace</a></td>
<td>替换与正则表达式匹配的子串。</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">split</a></td>
<td>把字符串分割为字符串数组。</td>
<td></td>
<td>4</td>
</tr>
</tbody>
</table>
</div>
<div>
<h2><span class="Apple-style-span">HTML DOM</span></h2>
HTML DOM 是 W3C 标准（是 HTML 文档对象模型的英文缩写，Document Object Model for HTML）。
<div>HTML DOM 定义了用于 HTML 的一系列标准的对象，以及访问和处理 HTML 文档的标准方法</div>
</div>
<div>通过 DOM，可以访问所有的 HTML 元素，连同它们所包含的文本和属性。可以对其中的内容进行修改和删除，同时也可以创建新的元素</div>
<div>使用 JavaScript 来访问和处理 DOM 对象的知识：</div>
<div>
<table class=" xhe-border">
<tbody>
<tr>
<th>对象</th>
<th>描述</th>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Document</a></td>
<td>代表整个 HTML 文档，用来访问页面中的所有元素。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Anchor</a></td>
<td>代表 &lt;a&gt; 元素。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Area</a></td>
<td>代表图像地图中的 &lt;area&gt; 元素。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Base</a></td>
<td>代表 &lt;base&gt; 元素。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Body</a></td>
<td>代表图像地图中的 &lt;body&gt; 元素。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Button</a></td>
<td>代表 &lt;button&gt; 元素。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Event</a></td>
<td>代表事件的状态</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Form</a></td>
<td>代表 &lt;form&gt; 元素</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Frame</a></td>
<td>代表 &lt;frame&gt; 元素</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Frameset</a></td>
<td>代表 &lt;frameset&gt; 元素</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Iframe</a></td>
<td>代表 &lt;iframe&gt; 元素</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Image</a></td>
<td>代表 &lt;img&gt; 元素</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Input button</a></td>
<td>代表 HTML 表单中的按钮</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Input checkbox</a></td>
<td>代表 HTML 表单中的选择框</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Input file</a></td>
<td>代表 HTML 表单中的 fileupload 。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Input hidden</a></td>
<td>代表 HTML 表单中的隐藏域。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Input password</a></td>
<td>代表 HTML 表单中的密码域。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Input radio</a></td>
<td>代表 HTML 表单中的单选框。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Input reset</a></td>
<td>代表 HTML 表单中的重置按钮。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Input submit</a></td>
<td>代表 HTML 表单中的确认按钮。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Input text</a></td>
<td>代表 HTML 表单中的文本输入域。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Link</a></td>
<td>代表 &lt;link&gt; 元素</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Meta</a></td>
<td>代表 &lt;meta&gt; 元素</td>
</tr>
<tr>
<td><a title="HTML DOM Object 对象" href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Object</a></td>
<td>代表一个 &lt;Object&gt; 元素</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Option</a></td>
<td>代表 &lt;option&gt; 元素</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Select</a></td>
<td>代表 HTML 表单中的选择列表。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Style</a></td>
<td>代表某个单独的样式声明。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Table</a></td>
<td>代表 &lt;table&gt; 元素。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">TableData</a></td>
<td>代表 &lt;td&gt; 元素。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">TableRow</a></td>
<td>代表 &lt;tr&gt; 元素。</td>
</tr>
<tr>
<td><a href="http://write.blog.csdn.net/postedit/39207221" target="_blank" rel="noopener">Textarea</a></td>
<td>代表 &lt;textarea&gt; 元素。</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
<div></div>
<div>
<h2><span class="Apple-style-span"> 表单验证</span></h2>
</div>
<div><span class="Apple-style-span">在数据被送往服务器前对 HTML 表单中的这些输入数据进行验证</span></div>
<div><span class="Apple-style-span">检查用户是否已填写表单中的必填（或必选）项目。假如必填或必选项为空，那么警告框会弹出，并且函数的返回值为 false，否则函数的返回值则为 true</span></div>
<div align="left"><span class="Apple-style-span">&lt;</span><span class="Apple-style-span">html</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">&lt;</span><span class="Apple-style-span">head</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">&lt;</span><span class="Apple-style-span">script</span> <span class="Apple-style-span">type</span> <span class="Apple-style-span">=</span><span class="Apple-style-span">"text/javascript"</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">   </span> <span class="Apple-style-span">function</span> <span class="Apple-style-span">validate_required</span><span class="Apple-style-span">(field,alertxt){</span></div>
<div align="left"><span class="Apple-style-span">       </span> <span class="Apple-style-span">with</span> <span class="Apple-style-span">(field){</span></div>
<div align="left"><span class="Apple-style-span">           </span> <span class="Apple-style-span">if</span><span class="Apple-style-span">(value</span> <span class="Apple-style-span">==</span> <span class="Apple-style-span">null</span> <span class="Apple-style-span">||</span> <span class="Apple-style-span">value</span> <span class="Apple-style-span">==</span><span class="Apple-style-span">""</span><span class="Apple-style-span">){</span></div>
<div align="left"><span class="Apple-style-span">                alert(alertxt);</span></div>
<div align="left"><span class="Apple-style-span">               </span> <span class="Apple-style-span">return</span> <span class="Apple-style-span">false</span><span class="Apple-style-span">;</span></div>
<div align="left"><span class="Apple-style-span">            }</span> <span class="Apple-style-span">else</span><span class="Apple-style-span">{</span></div>
<div align="left"><span class="Apple-style-span">                alert(value);</span></div>
<div align="left"><span class="Apple-style-span">               </span> <span class="Apple-style-span">return</span> <span class="Apple-style-span">true</span><span class="Apple-style-span">;</span></div>
<div align="left"><span class="Apple-style-span">            }</span></div>
<div align="left"><span class="Apple-style-span">        }</span></div>
<div align="left"><span class="Apple-style-span"> </span></div>
<div align="left"><span class="Apple-style-span">    }</span></div>
<div align="left"><span class="Apple-style-span">   </span> <span class="Apple-style-span">function</span> <span class="Apple-style-span">validate_form</span><span class="Apple-style-span">(thisform) {</span></div>
<div align="left"><span class="Apple-style-span">       </span> <span class="Apple-style-span">with</span> <span class="Apple-style-span">(thisform) {</span></div>
<div align="left"><span class="Apple-style-span">           </span> <span class="Apple-style-span">if</span> <span class="Apple-style-span">(validate_required(email,</span> <span class="Apple-style-span">"Email must be filled out!"</span> <span class="Apple-style-span">)</span> <span class="Apple-style-span">==</span> <span class="Apple-style-span">false</span><span class="Apple-style-span">) {</span></div>
<div align="left"><span class="Apple-style-span">                email.focus();</span></div>
<div align="left"><span class="Apple-style-span">               </span> <span class="Apple-style-span">return</span> <span class="Apple-style-span">false</span></div>
<div align="left"><span class="Apple-style-span">           </span> <span class="Apple-style-span">}</span></div>
<div align="left"><span class="Apple-style-span">        }</span></div>
<div align="left"><span class="Apple-style-span">    }</span></div>
<div align="left"><span class="Apple-style-span">&lt;/</span><span class="Apple-style-span">script</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">&lt;/</span><span class="Apple-style-span">head</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">&lt;</span><span class="Apple-style-span">body</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">&lt;</span><span class="Apple-style-span">form</span> <span class="Apple-style-span">action</span> <span class="Apple-style-span">=</span><span class="Apple-style-span">"JS.php"</span> <span class="Apple-style-span">onsubmit</span> <span class="Apple-style-span">=</span><span class="Apple-style-span">"</span><span class="Apple-style-span">return</span> <span class="Apple-style-span">validate_form</span><span class="Apple-style-span">(this)</span><span class="Apple-style-span">"</span> <span class="Apple-style-span">method</span><span class="Apple-style-span">=</span><span class="Apple-style-span">"post"</span> <span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">    Email:&lt;</span> <span class="Apple-style-span">input</span> <span class="Apple-style-span">type</span><span class="Apple-style-span">=</span> <span class="Apple-style-span">"text"</span> <span class="Apple-style-span">name</span><span class="Apple-style-span">=</span> <span class="Apple-style-span">"email"</span> <span class="Apple-style-span">size</span><span class="Apple-style-span">=</span> <span class="Apple-style-span">"30"</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">    &lt;</span> <span class="Apple-style-span">input</span> <span class="Apple-style-span">type</span><span class="Apple-style-span">=</span> <span class="Apple-style-span">"submit"</span> <span class="Apple-style-span">value</span><span class="Apple-style-span">=</span> <span class="Apple-style-span">"submit"</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">&lt;/</span><span class="Apple-style-span">form</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">&lt;/</span><span class="Apple-style-span">body</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">&lt;/</span><span class="Apple-style-span">html</span><span class="Apple-style-span">&gt;</span></div>
<div><span class="Apple-style-span"> </span></div>
<div>
<h2><span class="Apple-style-span">E-mail 验证</span></h2>
</div>
<div>将上面的方法改为如下（<span class="Apple-style-span">输入的数据必须包含 @ 符号和点号(.)。同时，@ 不可以是邮件地址的首字符，并且 @ 之后需有至少一个点号</span>）：</div>
<div align="left">
<div align="left"><span class="Apple-style-span">  </span> <span class="Apple-style-span"> </span> <span class="Apple-style-span">function</span> <span class="Apple-style-span">validate_required</span> <span class="Apple-style-span">(field,alertxt){</span></div>
<div align="left"><span class="Apple-style-span">       </span> <span class="Apple-style-span">with</span> <span class="Apple-style-span">(field){</span></div>
<div align="left"><span class="Apple-style-span">           </span> <span class="Apple-style-span">var</span> <span class="Apple-style-span">apos</span> <span class="Apple-style-span">=</span> <span class="Apple-style-span">value.indexOf(</span><span class="Apple-style-span">"@"</span><span class="Apple-style-span">);</span></div>
<div align="left"><span class="Apple-style-span">           </span> <span class="Apple-style-span">var</span> <span class="Apple-style-span">dotpos</span> <span class="Apple-style-span">=</span> <span class="Apple-style-span">value.indexOf(</span><span class="Apple-style-span">"."</span><span class="Apple-style-span">);</span></div>
<div align="left"><span class="Apple-style-span">           </span> <span class="Apple-style-span">if</span><span class="Apple-style-span">(apos</span><span class="Apple-style-span">&lt;</span> <span class="Apple-style-span">1</span> <span class="Apple-style-span">||</span> <span class="Apple-style-span">dotpos</span> <span class="Apple-style-span">-</span><span class="Apple-style-span">apos</span><span class="Apple-style-span">&lt;</span> <span class="Apple-style-span">2</span><span class="Apple-style-span">){</span></div>
<div align="left"><span class="Apple-style-span">                alert(alertxt);</span></div>
<div align="left"><span class="Apple-style-span">               </span> <span class="Apple-style-span">return</span> <span class="Apple-style-span">false</span><span class="Apple-style-span">;</span></div>
<div align="left"><span class="Apple-style-span">            }</span> <span class="Apple-style-span">else</span><span class="Apple-style-span">{</span></div>
<div align="left"><span class="Apple-style-span">                alert(value);</span></div>
<div align="left"><span class="Apple-style-span">               </span> <span class="Apple-style-span">return</span> <span class="Apple-style-span">true</span><span class="Apple-style-span">;</span></div>
<div align="left"><span class="Apple-style-span">            }</span></div>
<div align="left"><span class="Apple-style-span">        }</span></div>
<div align="left"><span class="Apple-style-span">}</span></div>
<div align="left"><span class="Apple-style-span"> </span></div>
<div align="left">
<h2><span class="Apple-style-span">HTML DOM （文档对象模型）</span></h2>
<div><span class="Apple-style-span">当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）</span></div>
<div>
<h3><span class="Apple-style-span">HTML DOM 树</span></h3>
<img src="file:///C:/Users/YUANWA~1/AppData/Local/Temp/enhtmlclip/Image.gif" alt="DOM HTML 树" width="486" height="266" />

</div>
<div></div>
<div>
<h2><span class="Apple-style-span">查找 HTML 元素</span></h2>
</div>
<div>
<ul>
 	<li>通过 id 找到 HTML 元素</li>
 	<li>通过标签名找到 HTML 元素</li>
 	<li>通过类名找到 HTML 元素</li>
</ul>
</div>
<div></div>
<div>&lt;p id="intro"&gt;Hello World!&lt;/p&gt;</div>
<div>

本例查找 id="intro" 元素：
<pre>var x=document.getElementById("intro");
</pre>
</div>
<div></div>
<div>

如果找到该元素，则该方法将以对象的形式返回该元素。
<div>如果未找到该元素，则 x 将包含 null。</div>
</div>
<div>

本例查找 id="main" 的元素，然后查找 "main" 中的所有 &lt;p&gt; 元素：
<pre>var y= document.getElementsByTagName("p");
</pre>
</div>
<div></div>
<div>
<ul>
 	<li>如何改变 HTML 元素的内容 (innerHTML)</li>
 	<li>如何改变 HTML 元素的样式 (CSS)</li>
 	<li>如何对 HTML DOM 事件对做出反应</li>
 	<li>如何添加或删除 HTML 元素</li>
</ul>
</div>
<div></div>
<div><span class="Apple-style-span">HTML DOM 允许 JavaScript 改变 HTML 元素的内容</span></div>
<div><span class="Apple-style-span">document.write() 可用于直接向 HTML 输出流写内容</span></div>
<div>
<h2><span class="Apple-style-span">改变 HTML 内容</span></h2>
</div>
<div>

改变 HTML 元素的内容，请使用这个语法：
<pre>document.getElementById(id).innerHTML=new HTML</pre>
</div>
<div></div>
<div align="left"><span class="Apple-style-span">            &lt;</span> <span class="Apple-style-span">p</span> <span class="Apple-style-span">id</span><span class="Apple-style-span">=</span> <span class="Apple-style-span">"p1"</span><span class="Apple-style-span">&gt;</span><span class="Apple-style-span">Hello World!</span><span class="Apple-style-span">&lt;/</span> <span class="Apple-style-span">p</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">            &lt;</span> <span class="Apple-style-span">script</span><span class="Apple-style-span">&gt;</span> <span class="Apple-style-span">document</span><span class="Apple-style-span">.getElementById(</span><span class="Apple-style-span">"p1"</span> <span class="Apple-style-span">).innerHTML</span> <span class="Apple-style-span">=</span> <span class="Apple-style-span">"&lt;h2&gt;Hello ken&lt;/h2&gt;"</span><span class="Apple-style-span">;</span><span class="Apple-style-span">&lt;/</span><span class="Apple-style-span">script</span><span class="Apple-style-span">&gt;</span></div>
<div></div>
<div>
<h2><span class="Apple-style-span">改变 HTML 属性</span></h2>
如需改变 HTML 元素的属性，请使用这个语法：
<pre>document.getElementById(id).attribute=new value</pre>
</div>
<div><span class="Apple-style-span">改变了 &lt;img&gt; 元素的 src 属性</span></div>
<div align="left"><span class="Apple-style-span">&lt;</span><span class="Apple-style-span">img</span> <span class="Apple-style-span">id</span> <span class="Apple-style-span">=</span><span class="Apple-style-span">"image"</span> <span class="Apple-style-span">src</span> <span class="Apple-style-span">=</span><span class="Apple-style-span">"/i/eg_tulip.jpg"</span> <span class="Apple-style-span">/&gt;</span></div>
<div align="left"><span class="Apple-style-span">&lt;</span><span class="Apple-style-span">script</span><span class="Apple-style-span">&gt;</span> <span class="Apple-style-span">document</span><span class="Apple-style-span">.getElementById(</span><span class="Apple-style-span">"image"</span> <span class="Apple-style-span">).src</span><span class="Apple-style-span">=</span><span class="Apple-style-span">"/i/shanghai_lupu_bridge.jpg"</span> <span class="Apple-style-span">;</span><span class="Apple-style-span">&lt;/</span><span class="Apple-style-span">script</span> <span class="Apple-style-span">&gt;</span></div>
</div>
</div>
<div><span class="Apple-style-span">Document</span></div>
<div><span class="Apple-style-span"> </span></div>
<div align="left"><span class="Apple-style-span">&lt;</span><span class="Apple-style-span">script</span> <span class="Apple-style-span">type</span> <span class="Apple-style-span">=</span><span class="Apple-style-span">"text/javascript"</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">function</span> <span class="Apple-style-span">createNewDoc</span><span class="Apple-style-span">()</span></div>
<div align="left"><span class="Apple-style-span">  {</span></div>
<div align="left"><span class="Apple-style-span"> </span> <span class="Apple-style-span">var</span> <span class="Apple-style-span">newDoc</span> <span class="Apple-style-span">=</span><span class="Apple-style-span">document</span><span class="Apple-style-span">.open(</span> <span class="Apple-style-span">"text/html"</span><span class="Apple-style-span">);</span></div>
<div align="left"><span class="Apple-style-span"> </span> <span class="Apple-style-span">var</span> <span class="Apple-style-span">txt</span> <span class="Apple-style-span">=</span><span class="Apple-style-span">"&lt;html&gt;&lt;body&gt;Learning about the DOM is FUN!&lt;/body&gt;&lt;/html&gt;"</span> <span class="Apple-style-span">;</span></div>
<div align="left"><span class="Apple-style-span">  newDoc.write(txt);</span></div>
<div align="left"><span class="Apple-style-span">  newDoc.close();</span></div>
<div align="left"><span class="Apple-style-span">  }</span></div>
<div align="left"><span class="Apple-style-span"> </span></div>
<div align="left"><span class="Apple-style-span">&lt;/</span><span class="Apple-style-span">script</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span"> HTML DOM - 改变 CSS</span></div>
<div></div>
<div>
<h2><span class="Apple-style-span">改变 HTML 样式</span></h2>
</div>
<div>

改变 &lt;p&gt; 元素的样式：
<pre>&lt;p id="p2"&gt;Hello World!&lt;/p&gt;

&lt;script&gt;
document.getElementById("p2").style.color="blue";
&lt;/script&gt;
</pre>
</div>
<div></div>
<div><span class="Apple-style-span">对 HTML 事件做出反应</span></div>
<div>

HTML 事件的例子：
<ul>
 	<li>当用户点击鼠标时</li>
 	<li>当网页已加载时</li>
 	<li>当图像已加载时</li>
 	<li>当鼠标移动到元素上时</li>
 	<li>当输入字段被改变时</li>
 	<li>当提交 HTML 表单时</li>
 	<li>当用户触发按键时</li>
</ul>
</div>
<div>
<h3><span class="Apple-style-span">例子 1</span></h3>
</div>
<div>
<pre>&lt;h1 <code>onclick="this.innerHTML='谢谢!'"</code>&gt;请点击该文本&lt;/h1&gt;</pre>
</div>
<div>
<h3><span class="Apple-style-span">例子 2</span></h3>
</div>
<div></div>
<div>
<pre>&lt;script&gt;
function changetext(id)
{
id.innerHTML="谢谢!";
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1 <code>onclick="changetext(this)"</code>&gt;请点击该文本&lt;/h1&gt; &lt;/body&gt;</pre>
</div>
<div></div>
<div>
<h2><span class="Apple-style-span">HTML 事件属性</span></h2>
</div>
<div><span class="Apple-style-span">如需向 HTML 元素分配 事件，您可以使用事件属性</span></div>
<div>

向 button 元素分配 onclick 事件：
<pre>&lt;button onclick="displayDate()"&gt;点击这里&lt;/button&gt;
</pre>
</div>
<div></div>
<div>
<h2><span class="Apple-style-span">使用 HTML DOM 来分配事件</span></h2>
</div>
<div><span class="Apple-style-span">通过使用 JavaScript 来向 HTML 元素分配事件：</span></div>
<div>
<pre>&lt;script&gt;
document.getElementById("myBtn").onclick=function(){displayDate()};
&lt;/script&gt;
</pre>
</div>
<div></div>
<div>
<h2><span class="Apple-style-span">onload 和 onunload 事件</span></h2>
</div>
<div>

1.onload 和 onunload 事件会在用户<span class="Apple-style-span">进入或离开页面时被触发</span>。

2.onload 事件可用于检测访问者的<span class="Apple-style-span">浏览器类型和浏览器版</span>本，并基于这些信息来加载网页的正确版本。

3.onload 和 onunload 事件可用于<span class="Apple-style-span">处理 cookie</span>。

</div>
<div></div>
<div>
<h2><span class="Apple-style-span">onchange 事件</span></h2>
</div>
<div><span class="Apple-style-span">常结合对输入字段的验证来使用</span></div>
<div><span class="Apple-style-span">下面是一个如何使用 onchange 的例子。当用户改变输入字段的内容时，会调用 upperCase() 函数。</span></div>
<div>
<pre>&lt;input type="text" id="fname" onchange="upperCase()"&gt;
</pre>
</div>
<div></div>
<div>
<h2><span class="Apple-style-span">onmouseover 和 onmouseout 事件</span></h2>
</div>
<div><span class="Apple-style-span">onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数</span></div>
<div align="left"><span class="Apple-style-span">&lt;</span><span class="Apple-style-span">div</span> <span class="Apple-style-span">onmouseover</span> <span class="Apple-style-span">=</span><span class="Apple-style-span">"</span><span class="Apple-style-span">mOver</span> <span class="Apple-style-span">(this)</span><span class="Apple-style-span">"</span> <span class="Apple-style-span">onmouseout</span> <span class="Apple-style-span">=</span><span class="Apple-style-span">"</span><span class="Apple-style-span">mOut</span> <span class="Apple-style-span">(this)</span><span class="Apple-style-span">"</span><span class="Apple-style-span">&gt;把鼠标移到上面&lt;/</span> <span class="Apple-style-span">div</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">&lt;</span> <span class="Apple-style-span">script</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">    </span><span class="Apple-style-span">function</span> <span class="Apple-style-span">mOver</span><span class="Apple-style-span">(obj) {</span><span class="Apple-style-span">}</span></div>
<div align="left"><span class="Apple-style-span">    </span><span class="Apple-style-span">function</span> <span class="Apple-style-span">mOut</span><span class="Apple-style-span">(obj) {</span><span class="Apple-style-span">}</span></div>
<div align="left"> <span class="Apple-style-span">&lt;/</span><span class="Apple-style-span">script</span><span class="Apple-style-span">&gt;</span></div>
<div></div>
<div>
<h2><span class="Apple-style-span">onmousedown、onmouseup 以及 onclick 事件</span></h2>
onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件

</div>
<div>
<h1><span class="Apple-style-span">DOM 元素</span></h1>
</div>
<div>
<h2><span class="Apple-style-span">创建新的 HTML 元素</span></h2>
</div>
<div><span class="Apple-style-span">向 HTML DOM 添加新元素，您必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素</span></div>
<div align="left"><span class="Apple-style-span">&lt;</span><span class="Apple-style-span">body</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">&lt;</span><span class="Apple-style-span">div</span> <span class="Apple-style-span">id</span> <span class="Apple-style-span">=</span><span class="Apple-style-span">"div_name"</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">    &lt;</span> <span class="Apple-style-span">p</span> <span class="Apple-style-span">id</span><span class="Apple-style-span">=</span> <span class="Apple-style-span">"p1"</span><span class="Apple-style-span">&gt;one text&lt;/</span><span class="Apple-style-span">p</span> <span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span"> </span></div>
<div align="left"><span class="Apple-style-span">&lt;/</span><span class="Apple-style-span">div</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">   &lt;</span> <span class="Apple-style-span">script</span> <span class="Apple-style-span">type</span><span class="Apple-style-span">=</span> <span class="Apple-style-span">"text/javascript"</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">    </span> <span class="Apple-style-span"> </span> <span class="Apple-style-span">var</span> <span class="Apple-style-span">para</span> <span class="Apple-style-span">= </span> <span class="Apple-style-span">document</span><span class="Apple-style-span">.createElement(</span> <span class="Apple-style-span">"p"</span><span class="Apple-style-span">);  创建元素</span></div>
<div align="left"><span class="Apple-style-span">     </span> <span class="Apple-style-span">var</span> <span class="Apple-style-span">node</span> <span class="Apple-style-span">= </span> <span class="Apple-style-span">document</span><span class="Apple-style-span">.createTextNode(</span><span class="Apple-style-span">"add subText Node"</span> <span class="Apple-style-span">); 创建节点</span></div>
<div align="left"><span class="Apple-style-span">      para.appendChild(</span> <span class="Apple-style-span">node</span><span class="Apple-style-span">); 添加节点-&gt;元素</span></div>
<div align="left"><span class="Apple-style-span">     </span></div>
<div align="left"><span class="Apple-style-span">     </span> <span class="Apple-style-span">var</span> <span class="Apple-style-span">ele</span> <span class="Apple-style-span">=</span> <span class="Apple-style-span">document</span><span class="Apple-style-span">.getElementById(</span><span class="Apple-style-span">"div_name"</span> <span class="Apple-style-span">);  取得元素</span></div>
<div align="left"><span class="Apple-style-span">      ele.appendChild(para);  添加元素</span></div>
<div align="left"><span class="Apple-style-span">   </span> <span class="Apple-style-span">&lt;/</span><span class="Apple-style-span">script</span><span class="Apple-style-span">&gt;</span></div>
<div align="left"><span class="Apple-style-span">&lt;/</span><span class="Apple-style-span">body</span><span class="Apple-style-span">&gt;</span></div>
<div></div>
<div>
<h2><span class="Apple-style-span">删除已有的 HTML 元素</span></h2>
</div>
<div><span class="Apple-style-span">删除 HTML 元素，您必须首先获得该元素的父元素</span></div>
<div>
<pre>var child=document.getElementById("p1");
child.parentNode.removeChild(child);
</pre>
</div>
<div></div>
<div>
<h2><span class="Apple-style-span">Window 对象</span></h2>
</div>
<div><span class="Apple-style-span">它表示浏览器窗口</span></div>
<div>

所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。

全局变量是 window 对象的属性。
<div>全局函数是 window 对象的方法。</div>
</div>
<div><span class="Apple-style-span">document 也是 window 对象的属性之一：</span></div>
<div>
<pre>window.document.getElementById("header");
</pre>
与此相同：
<pre>document.getElementById("header");
</pre>
</div>
<div></div>
<div>
<h2><span class="Apple-style-span">Window 尺寸</span></h2>
</div>
<div>
<pre>var w=window.innerWidth
|| document.documentElement.clientWidth
|| document.body.clientWidth;

var h=window.innerHeight
|| document.documentElement.clientHeight
|| document.body.clientHeight;
</pre>
</div>
<div>

一些其他方法：
<ul>
 	<li>window.open() - 打开新窗口</li>
 	<li>window.close() - 关闭当前窗口</li>
 	<li>window.moveTo() - 移动当前窗口</li>
 	<li>window.resizeTo() - 调整当前窗口的尺寸</li>
</ul>
</div>
<div></div>
<div>
<h2><span class="Apple-style-span">Window Screen</span></h2>
window.screen 对象在编写时可以不使用 window 这个前缀。

一些属性：
<ul>
 	<li>screen.availWidth - 可用的屏幕宽度</li>
 	<li>screen.availHeight - 可用的屏幕高度</li>
</ul>
<div><span class="Apple-style-span"> </span></div>
</div>
<div>
<h2><span class="Apple-style-span">Window Location</span></h2>
window.location 对象在编写时可不使用 window 这个前缀。

一些例子：
<ul>
 	<li>location.hostname 返回 web 主机的域名</li>
 	<li>location.pathname 返回当前页面的路径和文件名</li>
 	<li>location.port 返回 web 主机的端口 （80 或 443）</li>
 	<li>location.protocol 返回所使用的 web 协议（http:// 或 https://）</li>
</ul>
</div>
<div></div>
<div><span class="Apple-style-span">location.href 属性返回当前页面的 URL</span></div>
<div>
<pre>document.write(<code>location.href</code>);</pre>
</div>
<div><span class="Apple-style-span">location.pathname 属性返回 URL 的路径名</span></div>
<div>
<pre>document.write(<code>location.pathname</code>);</pre>
</div>
<div></div>
<div><span class="Apple-style-span">location.assign() 方法加载新的文档</span></div>
<div>
<pre><code>window.location.assign("http://www.w3school.com.cn")</code></pre>
</div>
<div></div>
<div></div>
<div>
<h2><span class="Apple-style-span">Window History</span></h2>
</div>
<div>
<ul>
 	<li>history.back() - 与在浏览器点击后退按钮相同, 加载历史列表中的前一个 URL</li>
 	<li>history.forward() - 与在浏览器中点击按钮向前相同, 加载 历史列表中的下一个 URL</li>
</ul>
</div>
<div></div>
<div>
<h2><span class="Apple-style-span">Window Navigator</span></h2>
</div>
<div><span class="Apple-style-span">包含有关访问者浏览器的信息</span></div>
<pre>&lt;div id="example"&gt;&lt;/div&gt;

&lt;script&gt;

txt = "&lt;p&gt;Browser CodeName: " + navigator.appCodeName + "&lt;/p&gt;";
txt+= "&lt;p&gt;Browser Name: " + navigator.appName + "&lt;/p&gt;";
txt+= "&lt;p&gt;Browser Version: " + navigator.appVersion + "&lt;/p&gt;";
txt+= "&lt;p&gt;Cookies Enabled: " + navigator.cookieEnabled + "&lt;/p&gt;";
txt+= "&lt;p&gt;Platform: " + navigator.platform + "&lt;/p&gt;";
txt+= "&lt;p&gt;User-agent header: " + navigator.userAgent + "&lt;/p&gt;";
txt+= "&lt;p&gt;User-agent language: " + navigator.systemLanguage + "&lt;/p&gt;";

document.getElementById("example").innerHTML=txt;

&lt;/script&gt;
</pre>
<h2><span class="Apple-style-span">浏览器检测</span></h2>
<div><span class="Apple-style-span">由于不同的浏览器支持不同的对象，您可以使用对象来检测浏览器。例如，由于只有 Opera 支持属性 "window.opera"，您可以据此识别出 Opera。</span></div>
<pre><span class="Apple-style-span">三种消息框：警告框、确认框、提示框</span></pre>
<h2><span class="Apple-style-span">警告框</span></h2>
<pre>警告框经常用于确保用户可以得到某些信息。
</pre>
<h3><span class="Apple-style-span">语法：</span></h3>
<pre><span class="Apple-style-span">alert("文本")</span></pre>
<h2><span class="Apple-style-span"> </span></h2>
<h2><span class="Apple-style-span">确认框</span></h2>
<div>

<span class="Apple-style-span">确认框用于使用户可以验证或者接受某些信息。</span>

<span class="Apple-style-span">当确认框出现后，用户需要点击确定或者取消按钮才能继续进行操作。</span>

<span class="Apple-style-span">如果用户点击确认，那么返回值为 true。如果用户点击取消，那么返回值为 false。</span>
<h3><span class="Apple-style-span">语法：</span></h3>
<pre><span class="Apple-style-span">confirm("文本")</span></pre>
</div>
<h2><span class="Apple-style-span"> </span></h2>
<h2><span class="Apple-style-span">提示框</span></h2>
<div><span class="Apple-style-span">用于提示用户在进入页面前输入某个值</span></div>
<div>

<span class="Apple-style-span">当提示框出现后，用户需要输入某个值，然后点击确认或取消按钮才能继续操纵。</span>
<div><span class="Apple-style-span">如果用户点击确认，那么返回值为输入的值。如果用户点击取消，那么返回值为 null</span></div>
</div>
<div>
<h3><span class="Apple-style-span">语法：</span></h3>
<pre><span class="Apple-style-span">prompt("文本","默认值")</span></pre>
</div>
<pre><span class="Apple-style-span">计时事件</span></pre>
<pre><span class="Apple-style-span">在一个设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。我们称之为计时事件。</span></pre>
<pre><span class="Apple-style-span">两个关键方法是: setTimeout() //</span><span class="Apple-style-span">未来的某时执行代码</span></pre>
<dl>
 	<dt><span class="Apple-style-span">clearTimeout()      </span><span class="Apple-style-span">//取消setTimeout()</span></dt>
</dl>
<h3><span class="Apple-style-span">语法</span></h3>
<pre><span class="Apple-style-span">var t=setTimeout("javascript语句",毫秒)</span></pre>
<pre><span class="Apple-style-span">setTimeout() 方法会返回某个值。在上面的语句中，值被储存在名为 t 的变量中。假如你希望取消这个 setTimeout()，你可以使用这个变量名来指定它。 setTimeout() 的第一个参数是含有 JavaScript 语句的字符串。这个语句可能诸如 "alert('5 seconds!')"，或者对函数的调用，诸如 alertMsg()"。</span></pre>
<div><span class="Apple-style-span">第二个参数指示从当前起多少毫秒后执行第一个参数</span></div>
<div><span class="Apple-style-span">实例</span></div>
<div><span class="Apple-style-span">当下面这个例子中的按钮被点击时，一个提示框会在5秒中后弹出</span></div>
<div>
<pre><span class="Apple-style-span"><code>var t=setTimeout("alert('5 seconds!')",5000)</code></span></pre>
</div>
<h3><span class="Apple-style-span">实例 - 无穷循环</span></h3>
<div><span class="Apple-style-span">创建一个运行于无穷循环中的计时器，我们需要编写一个函数来调用其自身,达到递归调用的作用</span></div>
<div>
<pre><span class="Apple-style-span">&lt;script type="text/javascript"&gt; var c=0 var t function timedCount() { document.getElementById('txt').value=c c=c+1 <code>t=setTimeout("timedCount()",1000)</code> } &lt;/script&gt;</span></pre>
</div>
<h2><span class="Apple-style-span">clearTimeout()</span></h2>
<h3><span class="Apple-style-span">语法</span></h3>
<pre><span class="Apple-style-span">clearTimeout(setTimeout_variable)</span></pre>
<h3><span class="Apple-style-span">实例</span></h3>
<pre>和上面的无穷循环的例子相似。唯一的不同是，现在我们添加了一个 "Stop Count!" 按钮来停止这个计数器
</pre>
<pre><span class="Apple-style-span">&lt;script type="text/javascript"&gt; var c=0 var t function timedCount() { document.getElementById('txt').value=c c=c+1 <code>t=setTimeout("timedCount()",1000)</code> } function stopCount() { <code>clearTimeout(t)</code> } &lt;/script&gt;</span></pre>
<pre><span class="Apple-style-span">cookie 用来识别用户</span></pre>
<pre><span class="Apple-style-span">cookie 是存储于访问者的计算机中的变量。每当同一台计算机通过浏览器请求某个页面时，就会发送这个 cookie。你可以使用 JS 来创建和取回 cookie 的值。</span></pre>
<h2><span class="Apple-style-span">创建和存储 cookie</span></h2>
<div></div>
<div><span class="Apple-style-span">在这个例子中我们要创建一个存储访问者名字的 cookie。当访问者首次访问网站时，他们会被要求填写姓名。名字会存储于 cookie 中。当访问者再次访问网站时，他们就会收到欢迎词。</span></div>
<div><span class="Apple-style-span">&lt;html&gt;
&lt;head&gt;
&lt;script type="text/javascript"&gt;
//建一个可在 cookie 变量中存储访问者姓名的函数
function setCookie(c_name, value, expiredays) {
var exdate = new Date()
exdate.setDate(exdate.getDate() + expiredays)
document.cookie = c_name + "=" + escape(value) +
((expiredays == null) ? "" : ";expires=" + exdate.toString())
}</span></div>
<div><span class="Apple-style-span">
//先会检查 document.cookie 对象中是否存有 cookie,继续检查我们指定的 cookie 是否已储存。如果找到了我们要的 cookie，就返回值，否则返回空字符串
function getCookie(c_name) {
if (document.cookie.length &gt; 0) {
document.write(document.cookie);
var c_start = document.cookie.indexOf(c_name + "=")
if (c_start != -1) {
c_start = c_start + c_name.length + 1
var c_end = document.cookie.indexOf(";", c_start)
if (c_end == -1) c_end = document.cookie.length
return unescape(document.cookie.substring(c_start, c_end))
}
}
return "";
}
//如果 cookie 已设置，则显示欢迎词，否则显示提示框来要求用户输入名字
function checkCookie() {
var username = getCookie('username')
if (username != null &amp;&amp; username != "") {
alert('Welcome again ' + username + '!')
}
else {
username = prompt('Please enter your name:', "")
if (username != null &amp;&amp; username != "") {
setCookie('username', username, 365)
}
}
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onLoad="checkCookie()"&gt;
&lt;/body&gt;
&lt;/html&gt;</span></div>
<div>
<h2><span class="Apple-style-span"> </span></h2>
<h2><span class="Apple-style-span">框架（库）</span></h2>
</div>
<div>

广受欢迎的 JavaScript 框架：
<ul>
 	<li>jQuery</li>
 	<li>Prototype</li>
 	<li>MooTools</li>
</ul>
</div>
<pre><span class="Apple-style-span">所有这些框架都提供针对常见 JavaScript 任务的函数，包括动画、DOM 操作以及 Ajax 处理</span></pre>
<h2><span class="Apple-style-span">jQuery</span></h2>
<div><span class="Apple-style-span">使用 CSS 选择器来访问和操作网页上的 HTML 元素（DOM 对象）</span></div>
<div><span class="Apple-style-span">jQuery 同时提供 companion UI（用户界面）和插件</span></div>
<div>
<h2><span class="Apple-style-span">Prototype</span></h2>
<div></div>
<div>Prototype 是一种库，提供用于执行常见 web 任务的简单 API</div>
</div>
<div><span class="Apple-style-span">Prototype 通过提供类和继承，实现了对 JavaScript 的增强</span></div>
<div>
<h2><span class="Apple-style-span">MooTools</span></h2>
提供了可使常见的 JavaScript 编程更为简单的 API。

也含有一些轻量级的效果和动画函数

</div>
<h3><span class="Apple-style-span">引用 jQuery</span></h3>
<pre>&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"&gt;
&lt;/script&gt;
</pre>
<pre><span class="Apple-style-span">测试 JavaScript 框架库 - jQuery</span></pre>
<h2><span class="Apple-style-span">jQuery 描述</span></h2>
<pre>主要的 jQuery 函数是 $() 函数（jQuery 函数）,如果您向该函数传递 DOM 对象，它会返回 jQuery 对象，带有向其添加的 jQuery 功能。
</pre>
<pre><span class="Apple-style-span">jQuery 允许您通过 CSS 选择器来选取元素。</span></pre>
<h3><span class="Apple-style-span">JavaScript 方式：</span></h3>
<pre>function myFunction()
{
     var obj=document.getElementById("h01");
     obj.innerHTML="Hello jQuery";
}
onload=myFunction;
</pre>
<pre>等价的 jQuery 是：
</pre>
<h3><span class="Apple-style-span">jQuery 方式：</span></h3>
<pre>function myFunction()
{
     $("#h01").html("Hello jQuery");
}
$(document).ready(myFunction);
</pre>
<pre><span class="Apple-style-span">在 JavaScript 中函数就是变量，因此可以把 myFunction 作为变量传递给 jQuery 的 ready 方法</span></pre>
<pre><span class="Apple-style-span">提示：</span><span class="Apple-style-span">jQuery 返回 jQuery 对象，与已传递的 DOM 对象不同</span></pre>
<pre><span class="Apple-style-span">jQuery 对象拥有的属性和方法，与 DOM 对象的不同</span></pre>
<pre><span class="Apple-style-span">不能在 jQuery 对象上使用 HTML DOM 的属性和方法</span></pre>
<h2><span class="Apple-style-span">测试 jQuery</span></h2>
<div><span class="Apple-style-span"><span class="Apple-style-span">&lt;html&gt;
&lt;head&gt;
&lt;script src="http://www.w3school.com.cn/jquery/jquery-1.11.1.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
function myFunction() {
$("#h01").attr("style", "color:red").html("Hello jQuery");
$("#h01").append("hello 2jquery");
}</span></span>$(document).ready(myFunction);
&lt;/script&gt;
&lt;/head&gt;</div>
<div><span class="Apple-style-span">
&lt;body&gt;
&lt;h1 id="h01"&gt;&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;</span></div>
<h2><span class="Apple-style-span">Prototype 描述</span></h2>
<pre>Prototype 提供的函数可使 HTML DOM 编程更容易。
 也有自己的 $() 函数。$() 函数接受 HTML DOM 元素的 id 值（或 DOM 元素），并会向 DOM 对象添加新的功能。
与 jQuery 不同，Prototype 没有用以取代 window.onload() 的 ready() 方法。相反，Prototype 会向浏览器及 HTML DOM 添加扩展。
</pre>
<pre>分配一个函数以处理窗口加载事件：
</pre>
<h3><span class="Apple-style-span">JavaScript 方式：</span></h3>
<pre>function myFunction()
{
var obj=document.getElementById("h01");
obj.innerHTML="Hello Prototype";
}
onload=myFunction;
</pre>
<pre>等价的 Prototype 是不同的：
</pre>
<h3><span class="Apple-style-span">Prototype 方式：</span></h3>
<pre>function myFunction()
{
$("h01").insert("Hello Prototype!");
}
Event.observe(window,"load",myFunction);
</pre>
<pre>Event.observe() 接受三个参数：
</pre>
<ul>
 	<li>您希望处理的 HTML DOM 或 BOM（浏览器对象模型）对象</li>
 	<li>您希望处理的事件</li>
 	<li>您希望调用的函数</li>
</ul>
<h1><span class="Apple-style-span"> </span></h1>
<h1><span class="Apple-style-span">总结</span></h1>
<h3><span class="Apple-style-span">jQuery</span></h3>
<pre>jQuery 是一个 JavaScript 库
jQuery 极大地简化了 JavaScript 编程
</pre>
<div>
<h3><span class="Apple-style-span">HTML DOM</span></h3>
HTML DOM 定义了访问和操作 HTML 文档的标准方法。
<div>HTML DOM 独立于平台和语言，可被任何编程语言使用，比如 Java、JavaScript 和 VBscript</div>
</div>
<div>
<h3><span class="Apple-style-span">AJAX</span></h3>
AJAX = 异步 JavaScript 和 XML。

AJAX 不是一种新的编程语言，而是一种使用现有标准的新方法。

通过与服务器进行数据交换，AJAX 可以在不重新加载整个网页的情况下，对网页的某部分进行更新

</div>
<h3><span class="Apple-style-span">JSON</span></h3>
<pre>JSON：JavaScript 对象表示法（JavaScript Object Notation）。
JSON 是存储和交换文本信息的语法。类似 XML。
</pre>
<div>JSON 比 XML 更小、更快，更易解析</div>
<div>
<h3><span class="Apple-style-span">PHP</span></h3>
</div>
<div><span class="Apple-style-span">脚本在服务器上运行</span></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 16:06:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 08:06:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1523824337;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:68;}i:1;a:1:{s:2:"id";i:70;}i:2;a:1:{s:2:"id";i:64;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>拥有你的微信公众号</title>
		<link>https://www.idatavisual.com/?p=132</link>
		<pubDate>Tue, 09 Jan 2018 07:26:01 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=132</guid>
		<description></description>
		<content:encoded><![CDATA[进入网站
<blockquote>https://mp.weixin.qq.com/cgi-bin/registermidpage?action=index&amp;lang=zh_CN</blockquote>
选择类型
<blockquote>订阅号 <img class="alignnone size-medium wp-image-137" src="https://www.idatavisual.com/wp-content/uploads/2018/01/选择类型-300x186.png" alt="" width="300" height="186" /></blockquote>
注册激活公众号
<blockquote>信息登记</blockquote>
公众号信息
<blockquote>填写公众号信息</blockquote>
<!--more-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2018-01-09 15:26:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-09 07:26:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[132]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web%e6%9c%8d%e5%8a%a1"><![CDATA[web服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_28b92623b5214cc6ff97cbb3af01509d]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1519300546;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:35;}i:1;a:1:{s:2:"id";i:68;}i:2;a:1:{s:2:"id";i:64;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>消息队列</title>
		<link>https://www.idatavisual.com/?p=141</link>
		<pubDate>Wed, 10 Jan 2018 08:42:25 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=141</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>1.概要</h2>

在计算机科学中，消息队列是用于进程间通信(IPC)的软件工程组件，或者用于同一进程内的线程间通信。它们使用队列进行消息传递——控制或内容的传递。
消息队列范式是发布/订阅模式的模式，通常是更大的面向消息中间件系统的一部分。大多数消息传递系统都在其API中支持发布/订阅者和消息队列模型，例如<code>javascript
Java message Service(JMS)</code>。
消息队列提供了异步通信协议，这意味着消息的发送方和接收方不需要同时与消息队列进行交互。放置在队列上的消息被存储，直到接收方检索它们。消息队列对可能在单个消息中传输的数据的大小有隐式或显式的限制，以及可能在队列中保持剩余的消息的数量。
<!--more-->

消息队列的许多实现都是内部的:在一个操作系统内或在一个应用程序内。这样的队列存在的目的仅是为了该系统
其他实现允许在不同的计算机系统之间传递消息，可能连接多个应用程序和多个操作系统。这些消息队列系统通常提供增强的弹性功能，以确保在系统故障时消息不会“丢失”。这种消息队列软件(也称为面向消息的中间件)的商业实现的示例包括IBM WebSphere MQ和Oracle高级队列(AQ)，JMS（Java Message Service）。

消息队列有很长的历史，包括从消息队列开始的产品，如IBM WebSphere MQ，以及与特定操作系统绑定的产品，如Microsoft消息队列。
还有基于云的消息队列服务选项，如Amazon Simple Queue service(SQS)、风暴mq和IronMQ。

消息中间件系统有许多开放源码的选择，包括Apache ActiveMQ、Apache卡夫卡、Apache Qpid、Beanstalkd、HTTPSQS,JBoss消息、JORAM、RabbitMQ、Sun开放消息队列和Tarantool。

大多数实时操作系统(RTOSes)，例如VxWorks和QNX，都鼓励使用消息排队作为主要的进程间或线程间通信机制。消息传递和CPU调度之间的紧密集成被认为是实时应用程序可用性的主要原因。早期的商业RTOSes的例子，鼓励消息队列根据线程间通信，也包括VRTX和pSOS+，这两者都可以追溯到上世纪80年代早期。Erlang编程语言使用进程来提供并发性;这些进程使用消息队列进行异步通信。

在典型的消息队列实现中，系统管理员安装和配置消息队列软件(队列管理器或代理)，并定义一个命名消息队列。应用程序注册一个软件例程，该例程“监听”放置在队列上的消息。随后的应用程序可能连接到队列并将消息传输到它上。

<h2>2.使用影响因子</h2>

持久性——消息可以保存在内存中，写到磁盘上，甚至可以提交给DBMS，如果可靠性需要表明一个更资源化的解决方案。
1. 安全策略——哪些应用程序应该能够访问这些消息?
1. 消息清除策略——队列或消息可能有“生存时间”
1. 消息过滤——一些系统支持过滤数据，以便订阅者可能只看到符合预先指定的兴趣标准的消息
1. 交付策略——我们是否需要保证消息至少传递一次，或者不超过一次?
1. 路由策略——在一个有许多队列服务器的系统中，哪些服务器应该接收消息或队列的消息?
1. 批处理策略——应该立即发送消息吗?或者，系统是否应该等待一段时间，并尝试同时传递多个消息?
排队条件——什么时候应该将消息视为“排队”?当一个队列有它的时候?或者当它被转发到至少一个远程队列时?还是所有队列?
接收通知-发布者可能需要知道什么时候或所有的订阅者收到消息。
这些都是对事务语义、系统可靠性和系统效率有实质性影响的考虑因素。

<h2>3.标准和协议</h2>

在开放源码消息队列实现中使用了三个标准:

<ol>
<li>高级消息队列协议(AMQP)——功能丰富的消息队列协议</li>
<li>面向文本的消息传递协议(STOMP)——简单的、面向文本的消息协议</li>
<li>MQTT(以前是MQ遥测传输)——轻量级消息队列协议，特别是用于嵌入式设备</li>
</ol>

前两种基于http协议，MQTT基于TCP/IP协议层级

<h2>4.同步 vs 异步</h2>

同步协议场景：许多更广为人知的通信协议都是同步运行的。HTTP协议——在万维网和Web服务中使用——提供了一个明显的例子，用户向Web页面发送请求，然后等待应答。
同步不适合场景：例如，AJAX(异步JavaScript和XML)可以用于异步发送文本、JSON或XML消息，以更新具有更相关信息的web页面的一部分。
Google搜索中使用这种方法，它将用户的部分类型的查询发送到Google的服务器，并返回用户可能正在输入的完整查询列表。这个列表是作为用户类型异步更新的。

应用程序不需要完全同步或异步。交互式应用程序可能需要立即响应一个请求(比如告诉客户销售请求已被接受,并处理库存信息）,消息的某些部分一段时间以后处理队列其他部分(如完成计算计费,转发数据到中央计费系统,并调用各种其他服务)。

在所有这些情况下，拥有一个消息队列(或者一个广播消息传递系统)的子系统可以帮助改进整个系统的行为。

<h2>5.在UNIX中的实现</h2>

在UNIX中有两个常见的消息队列实现。一个是SYS V API的一部分，另一个是POSIX的一部分。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date><![CDATA[2018-01-10 16:42:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-10 08:42:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web%e6%9c%8d%e5%8a%a1"><![CDATA[web服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1523032900;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:45;}i:1;a:1:{s:2:"id";i:31;}i:2;a:1:{s:2:"id";i:51;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>读书笔记:一碗鸡汤</title>
		<link>https://www.idatavisual.com/?p=160</link>
		<pubDate>Sat, 13 Jan 2018 13:08:19 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>处世之道</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">1、别怕结梁子，别磨叽，你讨好不了所有人的。所以说好人做人也要厉害一点，就是这个道理
2、读书永远是你最好的出路，知识永远是你最强大的财富
3.不管学校，职场或社会，都不要违背心意地一味讨好别人，有些圈子终究不属于自己，
努力做好自己，讨好自己可能会更容易有丰厚回报
4、能在一定位置上的人，一定有他的过人之处，不管你多么讨厌他。
5、好多人走远了，不是因为联系少了，而是因为你穷了
6、不要轻易戳破谎言，不要随便打碎幻想，可能那是对方最后的自尊和全部的坚持。
7、不要交浅言深
8、不管什么行业，要有自己核心竞争力，职场更多人际交往：价值互换
9、不喜欢麻烦别人的人，当然也不喜欢别人老麻烦自己
10、上场的机会来之不易，需要珍惜。
11、在学校里，成绩好的就是比成绩差的牛逼，在学校外，成绩好的还是比成绩差的牛逼。
</code></pre>

<!--more-->

<h2>方法论</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">1. wldm:  write less ,do more
2. less is more
3. 把你的工作变成文档
4. 如果时间允许，一个好的习惯是，每4个小时的编程，需要一个小时的休息，
然后又是4个小时的编码

5. 天才的程序员、哇，这个是怎么做到的！我再研究一下，活跃于GitHub、各大问答社区和你的身边，舍得将宝贵时间用于帮助新手
6. 专注眼下
7. 理想的程序员认为处理bug、崩溃、调优、入侵等突发事件比编程本身更能体现平庸程序员与理想程序员的差距
    如何定位复杂条件下的核心问题、
    如何抽丝剥茧地分析问题的潜在原因、
    如何排除干扰还原一个最小的可验证场景、
    如何抓住关键数据验证自己的猜测与实验，都是体现程序员思考力的最好场景
    平庸的程序员90%认定技术没有出路，做产品、营销和管理的是更高大上的手艺
8. 人与人差距就在那一点点
9. 大脑不是一个用于填充的容器，而是一束需要点燃的火焰。
10. 无论处于哪一个级别你都需要做两件事：
    一份正确的学习计划
    一套正确的书籍


11.人月神话《一本书的结构》但是越是在快节奏下，我们越需要增加更多的慢阅读，
细品慢嚼，多读经典，多做好知识的整理和串联，只有这样才容易将你的技能转变
为更加体系化的经验和方法论。

12.人月神话《谈项目管理》正是由于对技术域和业务域的足够熟悉，他们才能够随时的识别和关键风险并加以解决；正是由于项目经理对项目团队和成员的熟悉程度，使得他们能够在正确的时间安排最恰当的人来执行最重要的任务。

13.团队本身就是一种金字塔结构，有20%左右的牛人足够，
更多的重点还是如何能够通过工作的分工高效的协同起来
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2018-01-13 21:08:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-13 13:08:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%af%bb%e4%b9%a6%e7%ac%94%e8%ae%b0%e4%b8%80%e7%a2%97%e9%b8%a1%e6%b1%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%94%9f%e6%b4%bb%e6%84%9f%e6%82%9f"><![CDATA[生活感悟]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_ad00ca66c8f45646c728f2fafbbd7c93]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521888614;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:171;}i:1;a:1:{s:2:"id";i:55;}i:2;a:1:{s:2:"id";i:21;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>读书笔记：一碗鸡汤2</title>
		<link>https://www.idatavisual.com/?p=171</link>
		<pubDate>Sat, 13 Jan 2018 13:27:01 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=171</guid>
		<description></description>
		<content:encoded><![CDATA[<div align=center>
<img src="http://s2.pixpo.net/uploads/d7/1/433743/15124765273877.jpg" width="400" height="400"/>
</div>

<blockquote>
  <ul>
  <li><p>语录一：
  英皇杨受成说：“人必贪财好色、贪生怕死、追求名利，这十分正常，问题是追求的方式。这是竞争的时代，不进则退，每一天都必须奋进。”</p></li>
  <li><p>语录二：
  项羽的血气方刚、英勇善战，又兼备刘邦的老谋深算、知人善用
  优秀员工的标准是什么？业绩！这是以结果论英雄的时代，这是以结果作为标准来检验一切的时代。</p></li>
  </ul>
</blockquote>

<!--more-->

<blockquote>
  <ul>
  <li><p>语录三：
  鸡蛋，从外打破是食物，从内打破是生命。人生亦是，从外打破是压力，从内打破是成长。
  真正的强者，不是没有眼泪的人，而是含着眼泪依然奔跑的人。</p></li>
  <li><p>语录四：
  管理界有一个约定俗成的黄金比例1：6。据说一个人直接管理六个人是效率最高的管理结构</p></li>
  <li><p>语录五：
  一个人要想成功，只有两个最基本的动力源：兴趣或生存。要么你为了自己喜欢的事情去奋斗，要么你被生活所迫去努力，本质上没有其他可能。</p></li>
  <li><p>语录六：
  1. a example beats a thousand words
  The way my mind works is, that if I see an example of using something, I can generalize from that 
  2.财富是资本主义衡量成功的最终标准。那些拥有大量财富的人是重要的，值得献殷勤。他们值得别人尊敬，也要求别人顺从。他们是赢家。</p></li>
  <li><p>语录六：</p></li>
  </ul>
  
  <ol>
  <li>挑战，比别人更努力，不要舒服，家人，圈子，诚实不欺，失败中学习</li>
  <li>世上很多事情都经不起仔细地推敲</li>
  <li>工作谋生 完善自己，创造价值
  　读过国外一个案例：一位经理人，就叫他约翰吧。约翰工作能力出众，对工作也很满意，除了跟顶头上司实在合不来。他已经烦恼到想要辞职走人了。这时，约翰偶然去听了一个创造力的课程。他开始考虑，跳出习惯性思维来解决问题。他原本想找猎头公司为自己推荐工作，这时转而悄悄把上司的履历交给了猎头公司。上司的资历、背景、能力比他更好，猎头公司很快发现了适合上司的职位。而上司在这里待得久了，也有些厌倦，忽然看到不错的机会送上门来，欣然接受了。上司离职后，公司综合评估了一下，选任约翰接替了上司的位子。
  总有你想不到的地方,创造力</li>
  </ol>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>171</wp:post_id>
		<wp:post_date><![CDATA[2018-01-13 21:27:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-13 13:27:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[171]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%94%9f%e6%b4%bb%e6%84%9f%e6%82%9f"><![CDATA[生活感悟]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1522007817;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:141;}i:1;a:1:{s:2:"id";i:198;}i:2;a:1:{s:2:"id";i:29;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何读书</title>
		<link>https://www.idatavisual.com/?p=188</link>
		<pubDate>Sat, 13 Jan 2018 14:26:40 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=188</guid>
		<description></description>
		<content:encoded><![CDATA[1.并不是所有书都需要你逐字逐句地读完，正确的阅读方式是有所取舍，大胆快进，
并且不忘整理和内省。有的人的习惯读完之后用自己的理解为这本书写一小段书评。
当然，在阅读中我觉得亮眼的字句，是一定会记录下来的。发现他书中的精华点，并取来完善自己的价值构筑。

2.敢于批判，敢于质疑
3.如何拆书？（宣扬快的时代）
 所谓“拆书”是一种读书的方法论，根据艾德勒在《如何阅读一本书》中的观点，
 对于非虚构图书，可以通过“主题阅读＋批判性思考＋实践”来真正理解。
 这与“拆书”所强调的RIA不谋而合，我们不妨先来了解一下什么是RIA：
　　R=Read，阅读原文片段
　　I=Interpretation，引导促进
　　A=Appropriation，拆为己用
4.慢下来的思考
5.算法+系统设计
6.思考的技术
    金字塔结构法
    非线性思考
    逻辑思考]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date><![CDATA[2018-01-13 22:26:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-13 14:26:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a6%82%e4%bd%95%e8%af%bb%e4%b9%a6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%94%9f%e6%b4%bb%e6%84%9f%e6%82%9f"><![CDATA[生活感悟]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1522163081;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:216;}i:1;a:1:{s:2:"id";i:160;}i:2;a:1:{s:2:"id";i:55;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux-系统目录架构</title>
		<link>https://www.idatavisual.com/?p=191</link>
		<pubDate>Sun, 14 Jan 2018 09:00:22 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=191</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>/ 根目录</h2>

<pre class="prism-highlight line-numbers" data-start="1"><code class="language-null">├boot/  启动文件。
Linux的内核及引导系统程序所需要的文件目录，
</code></pre>

    │grub/      Grub引导器相关的文件
    ├dev/   设备文件。
    ├opt/   表示的是可选择的意思，有些软件包也会被安装在这里，也就是自定义软件包，有些我们自己编译的软件包，就可以安装在这个目录中；
    ├proc/  是一个假的文件系统。它不存在在磁盘某个磁盘上。而是由核心在内存中产生。用于提供关于系统的信息
    │   ├1/         关于进程1的信息目录。每个进程在/proc 下有一个名为其进程号的目录

<!--more-->

    │   ├cpuinfo    处理器信息，如类型、制造商、型号和性能。
    │   ├devices    当前运行的核心配置的设备驱动的列表。
    │   ├dma        显示当前使用的DMA通道。
    │   ├filesystems核心配置的文件系统。
    │   ├interrupts 显示使用的中断，and how many of each there have been.
    │   ├ioports    当前使用的I/O端口。
    │   ├kcore      系统物理内存映象。与物理内存大小完全一样，但不实际占用这么多内存
    │   ├kmsg       核心输出的消息。也被送到syslog 。
    │   ├ksyms      核心符号表。
    │   ├loadavg    系统"平均负载"；3个没有意义的指示器指出系统当前的工作量。
    │   ├meminfo    存储器使用信息，包括物理内存和swap。
    │   ├modules    当前加载了哪些核心模块。
    │   ├net        网络协议状态信息。
    │   ├self       到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，是不同的连接。这主要便于程序得到它自己的进程目录。
    │   ├stat       系统的不同状态，such as the number of page faults since the system was booted.
    │   ├uptime     系统启动的时间长度。
    │   └version    核心版本
    ├mnt/   临时挂载
    │   └cdrom      光驱。
    ├media/ 挂载媒体设备
    ├root/  root用户的$HOME目录
    ├home/  普通用户的$HOME目录
    │   ├user/      用户
    │   └.../
    ├bin/   系统程序。系统所需要的那些命令位于此目录，比如ls、cp、mkdir等命令
    ├sbin/  管理员系统程序。大多是涉及系统管理的命令的存放，是超级权限用户root的可执行命令存放地，普通用户无权限执行这个目录下的命令，这个目录和/usr/sbin
    ├lib/   程序所需的共享库。
    │   └modules    核心可加载模块，特别是那些恢复损坏系统时引导所需的(例如网络和文件系统驱动)。
    ├etc/   系统程序和大部分应用程序的全局配置文件
    │   ├init.d/    SystemV风格的启动脚本
    │   ├rcX.d/     启动脚本的链接，定义运行级别
    │   ├network/   网络配置文件
    │   ├X11/       图形界面配置文件
    │   ├rc or rc.d or rc?.d    启动、或改变运行级时运行的scripts或scripts的目录。
    │   ├passwd     用户数据库，其中的域给出了用户名、真实姓名、家目录、加密的口令和用户的其他信息。格式见passwd 的man页。
    │   ├fdprm      软盘参数表。说明不同的软盘格式。用setfdprm 设置。更多的信息见setfdprm 的man页。
    │   ├fstab      启动时mount -a命令(在/etc/rc 或等效的启动文件中)自动mount的文件系统列表。 Linux下，也包括用swapon -a启用的swap区的信息。见4.8.5节和mount 的man页。
    │   ├group      类似/etc/passwd ，但说明的不是用户而是组。见group 的man页。
    │   ├inittab    init 的配置文件。
    │   ├issuegetty 在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。内容由系统管理员确定。
    │   ├magicfile  的配置文件。包含不同文件格式的说明，file 基于它猜测文件类型。见magic 和file 的man页。
    │   ├motd       Message Of The Day，成功登录后自动输出。内容由系统管理员确定。经常用于通告信息，如计划关机时间的警告。
    │   ├mtab       当前安装的文件系统列表。由scripts初始化，并由mount 命令自动更新。需要一个当前安装的文件系统的列表时使用，例如df 命令。
    │   ├shadow     在安装了影子口令软件的系统上的影子口令文件。影子口令文件将/etc/passwd 文件中的加密口令移动到/etc/shadow 中，而后者只对root可读。这使破译口令更困难。
    │   ├login      defslogin 命令的配置文件。
    │   ├printcap   类似/etc/termcap ，但针对打印机。语法不同。
    │   ├profile,csh.login,csh.cshrc    登录或启动时Bourne或C shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。各shell见man页。
    │   ├securetty  确认安全终端，即哪个终端允许root登录。一般只列出虚拟控制台，这样就不可能(至少很困难)通过modem或网络闯入系统并得到超级用户特权。
    │   ├shells     列出可信任的shell。chsh 命令允许用户在本文件指定范围内改变登录shell。提供一台机器FTP服务的服务进程ftpd 检查用户shell是否列在 /etc/shells 文件中，如果不是将不允许该用户登录。
    │   └termcap    终端性能数据库。说明不同的终端用什么"转义序列"控制。写程序时不直接输出转义序列(这样只能工作于特定品牌的终端)，而是从 /etc/termcap 中查找要做的工作的正确序列。这样，多数的程序可以在多数终端上运行。见termcap 、 curs_termcap 和terminfo 的man页。
    ├usr/   这个是系统存放程序的目录，比如命令、帮助文件等。这个目录下有很多的文件和目录。当我们安装一个Linux发行版官方提供的软件包时，大多安装在这里。如果有涉及服务器配置文件的，会把配置文件安装在/etc目录中。
    │   ├bin/       几乎所有用户命令。有些命令在/bin 或/usr/local/bin 中。
    │   ├sbin/      根文件系统不必要的系统管理命令，例如多数服务程序
    │   ├lib/       应用程序库文件，程序或子系统的不变的数据文件
    │   ├share/     应用程序资源文件
    │   │   ├fonts      字体目录
    │   │   └man 或 doc  帮助目录
    │   ├src/       应用程序源代码
    │   ├local/     本地安装的软件和其他文件放在这里。
    │   │   ├soft/      用户程
    │   │   └.../           通常使用单独文件夹
    │   ├X11R6/     图形界面系统 
    │   └include/   C编程语言的头文件。为了一致性这实际上应该在/usr/lib 下，但传统上支持这个名字。
    ├var/   动态数据。这个目录的内容是经常变动的；
    │   ├www/       目录是定义Apache服务器站点存放目录；
    │   ├catman/    当要求格式化时的man页的cache。man页的源文件一般存在/usr/man/man* 中；有些man页可能有预格式化的版本，存在/usr/man/cat* 中。而其他的man页在第一次看时需要格式化，格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。 (/var/catman 经常被清除，就象清除临时目录一样。)
    │   ├lib/       系统正常运行时要改变的一些库文件，比如MySQL的，以及MySQL数据库的的存放地 
    │   ├local/     安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要，即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。
    │   ├lock/      锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以支持他们正在使用某个特定的设备或文件。其他程序注意到这个锁定文件，将不试图使用这个设备或文件。
    │   ├log/       各种程序的Log文件，特别是login (/var/log/wtmp log所有到系统的登录和注销) 和syslog (/var/log/messages 里存储所有核心和系统程序信息。 /var/log 里的文件经常不确定地增长，应该定期清除。
    │   ├run/       保存到下次引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登录的用户的信息。
    │   ├spool/     mail, news, 打印队列和其他队列工作的目录。每个不同的spool在/var/spool 下有自己的子目录，例如，用户的邮箱在/var/spool/mail 中。
    │   └tmp/       比/tmp 允许的大或需要存在较长时间的临时文件。 (虽然系统管理员可能不允许/var/tmp 有很旧的文件。)
    ├temp/          临时文件目录，有时用户运行程序的时候，会产生临时文件。/tmp就用来存放临时文件的。/var/tmp目录和这个目录相似。
    └lost+found/    在ext2或ext3文件系统中，当系统意外崩溃或机器意外关机，而产生一些文件碎片放在这里。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>191</wp:post_id>
		<wp:post_date><![CDATA[2018-01-14 17:00:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-14 09:00:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux-%e7%b3%bb%e7%bb%9f%e7%9b%ae%e5%bd%95%e6%9e%b6%e6%9e%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%8d%e5%8a%a1%e5%99%a8"><![CDATA[服务器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521882952;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:35;}i:1;a:1:{s:2:"id";i:45;}i:2;a:1:{s:2:"id";i:57;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>网站常用指标解析</title>
		<link>https://www.idatavisual.com/?p=198</link>
		<pubDate>Sun, 14 Jan 2018 09:15:56 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>术语说明：</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">PV=page view
TPS=transactions per second
QPS=queries per second
RPS=requests per second

RPS=并发数/平均响应时间
QPS = req/sec = 请求数/秒
</code></pre>

<!--more-->

<h2>【QPS计算PV和机器的方式】</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">QPS统计方式 [一般使用 http_load 进行统计]
QPS = 总请求数 / ( 进程总数 * 请求时间 )
QPS: 单个进程每秒请求服务器的成功次数
</code></pre>

<blockquote>
  <ul>
  <li>单台服务器每天PV计算</li>
  </ul>
</blockquote>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">公式1：每天总PV = QPS * 3600 * 6
公式2：每天总PV = QPS * 3600 * 8
</code></pre>

<blockquote>
  <ul>
  <li>服务器计算</li>
  </ul>
</blockquote>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">服务器数量 = ceil( 每天总PV / 单台服务器每天总PV )
</code></pre>

<h2>【峰值QPS和机器计算公式】</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">原理：每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间
公式：( 总PV数 * 80% ) / ( 每天秒数 * 20% ) = 峰值时间每秒请求数(QPS)
机器：峰值时间每秒QPS / 单台机器的QPS = 需要的机器

问：每天300w PV 的在单台机器上，这台机器需要多少QPS？
答：(3000000* 0.8 ) / (86400 * 0.2 ) = 139 (QPS)
问：如果一台机器的QPS是58，需要几台机器来支持？
答：139 / 58 = 3
</code></pre>

<h2>PV等指标含义</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">指标含义：
pv（page view，浏览量）
  ● 页面的浏览次数，衡量网站用户访问的网页数量；
  ● 用户每打开一个页面就记录1次，多次打开同一页面则浏览量累计。
uv（unique visitor，独立访客）
  ● 1天内访问某站点的人数（以cookie为依据）；
  ● 1天内同一访客的多次访问只计为1个访客。
ip（独立ip）
  ● 指1天内使用不同ip地址的用户访问网站的数量；
  ● 同一IP不管访问了几个页面，独立IP数均为1。
当ip:uv=1:1时，一个ip对应一个访客，这说明访问者可能都是在一些个人电脑上访问或者是adsl用户。
当ip:pv=uv:pv=1:1，这说明每个访客只浏览一次页面，这可能是访问者误打误撞进了这个页面，然后就离开了，这时候就该对页面的质量进行分析。统计工具还提供页面停留时间，这也可以反映页面的质量问题，停留时间越长，说明你的网站有值得去浏览的地方，这时候，访客极有可能成为你的潜在用户。

综上所述，
ip:uv能看出访问者是个人pc还是网吧机房之类的情况，帮助站长分析网站的用户群；（确定用户群）
uv:pv能看出一个网站的质量，比例越小越好；在网站初期，流量不大的情况下 ，这些数据的意义可能不是很大，但当网站推广到一定程度后，它们就具有非常有效的指导意义（网站内容质量）
=&gt;  ip:uv分析网站推广应该向哪个方向努力，由uv:pv分析网站质量应该作那些改善， 即用户体验。

一些情况：
 一、什么情况ip会大于uv  ( ip&gt;uv ：同一个用户通过动态ip访问网站，造成产生多个ip，实际是同一个uv) 
一般家庭电脑都是用adsl拨号上网，也就是动态的ip地址，每次拨号一次ip数量就会加1，可是真实的用户还是一个人，甚至有人一天拨号10几次也有可能，这样算来，一个用户就会产生10个ip，对数据分析员来说就造成巨大误差。
二、什么情况uv大于ip  （uv&gt;ip : 多个uv用户来自同一个ip，比如网吧）
多个用户，一个ip这样情况会造成uv大于ip，不错，就是网吧，一般中型网吧100-200太电脑，现如今的网吧比前几年要发达的多，并非共享动态ip了，都是公用一个专线ip(专线ip是静态ip，ip地址是不变的)，打个比方：如果一个网站几百人都登陆你的网站，那么ip数是1，实际上却有100人访问你的网站，而且网吧的顾客都是流动的也就是说，无论多少人在这个网吧访问你的网站，ip数都会被记成1。但是uv确实100。

存在问题：
虽然UV相对ip来说比较精准，但是还有很多地方是技术人员无法完善的。
1. 也是一个用户多台电脑影响到uv
一个用户多台电脑。如今，人们上网的方式越来越的多样化，网吧，个人电脑，办公室，如果这人在三个不同环境浏览你的网站会产生3个不同的cookies，uv=3，实际上也是一人浏览而已，而现在所有的网络分析解决方案会将此记录成3个不同的访客。这也是现如今无法解决的一个问题。
2. 购买时长影响到uv
一般来说一个访客变成一个顾客，如果这段时间比较短的话，统计工具完全有能力统计到对方的页面浏览和行为分析，从而进行准确的数据分析。
但是一般比较贵重的物品，访客可能要经过很长时间甚至半年时间的考虑，才能从访客变成我们的顾客，在这段时间里，访客随时有可能系统崩溃，删除cookies或者购买新电脑等操作，而这个用户在最后购买时候  会被当  成新的访客对待，进而导致被当成新的访客对我们的数据分析造成很大的误差。
</code></pre>

<h2>CTR指标</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">CTR（Click-Through-Rate）即点击通过率，指网络广告（图片广告/文字广告/关键词广告/排名广告/视频广告等）的点击到达率，即该广告的实际点击次数（严格的来说，可以是到达目标页面的数量）除以广告的展现量（Show content）。

app的激活量是指:下载app以后有过启动行为的用户量
活跃度一般分三个时间维度计算：
日活跃用户：当天启动过app的用户数
周活跃用户数：一周内启动过APP的用户数
月活跃用户数：当月启动过APP的用户数

活跃率：XX时间段内启动过App的用户数/总用户数

目标转化出价（oCPC出价） (optimization cost per click)功能
采用更科学的转化率预估机制，帮助广告主在获取更多优质流量的同时提升广告转化效果
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date><![CDATA[2018-01-14 17:15:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-14 09:15:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pv%e3%80%81tps%e3%80%81qps%e6%98%af%e6%80%8e%e4%b9%88%e8%ae%a1%e7%ae%97%e5%87%ba%e6%9d%a5%e7%9a%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web%e6%9c%8d%e5%8a%a1"><![CDATA[web服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1520106866;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:51;}i:1;a:1:{s:2:"id";i:141;}i:2;a:1:{s:2:"id";i:27;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>python</title>
		<link>https://www.idatavisual.com/?p=201</link>
		<pubDate>Sun, 14 Jan 2018 09:20:23 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=201</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>matplotlib</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">2D绘图套件，多样式输出格式
</code></pre>

<h2>requests组件</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">import requests

# req = requests.request('GET', 'http://httpbin.org/get')
# print req

payload = {'who': 'shiliang', 'op': 'search',
           'image': '/test/test.png',
           'diff': 'diff'}

files = {
    'image': open('./test.png', 'rb')}

print files['image'].name

r = requests.post("http://opsduer.bceapp.com", data=payload, files=files)

print r.text
</code></pre>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">参考：
http://www.yangyanxing.com/article/1079.html
http://docs.python-requests.org/zh_CN/latest/api.html
https://liam0205.me/2016/02/27/The-requests-library-in-Python/
</code></pre>

<h2>查看python 安装的组件</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">在交互式解释器中输入&gt;&gt;&gt; help("modules")即可，效果跟在命令行下输入$ pydoc modules是一样的

安装redis：
wget https://pypi.python.org/packages/source/r/redis/redis-2.9.1.tar.gz
tar xvzf redis-2.9.1.tar.gz
cd redis-2.9.1
python setup.py install

参考：http://debugo.com/python-redis/


安装six：
https://pypi.python.org/pypi/six#downloads
安装同上

</code></pre>

<h2>python调试技巧</h2>

<blockquote>
  <ul>
  <li>样例</li>
  </ul>
</blockquote>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">import pdb 
 def combine(s1,s2):      # define subroutine combine, which... 
    s3 = s1 + s2 + s1    # sandwiches s2 between copies of s1, ... 
    s3 = '"' + s3 +'"'   # encloses it in double quotes,... 
    return s3            # and returns it. 
 a = "aaa"
 pdb.set_trace() 
 b = "bbb"
 c = "ccc"
 final = combine(a,b) 
 print final
</code></pre>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">1.运行脚本，会停留在 pdb.set_trace() 处
2.单步执行：选择 n+enter 可以执行当前的 statement
3.退出：quit/q
4.打印变量： p 变量名
5.显示代码：l
5.进入函数内部调试：s
</code></pre>

。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date><![CDATA[2018-01-14 17:20:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-14 09:20:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_209340485073181e738fbb834773331c]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_bdbcb3540fd9e95083175ac9f41d5eba]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_a4ae6a113dc40ba7fbc470edd22e2fd5]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_a290b31c79c3b9f7994b93f1b3c118c8]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1523834700;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:59;}i:1;a:1:{s:2:"id";i:43;}i:2;a:1:{s:2:"id";i:64;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_b16f5dbd2bbaf83cc7533fe818911871]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_b56c43b84331a6167caf17573f663258]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_a82a7762f02c7083f0cd1de0e2cf7431]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_02e9fe7a1840eb7f554ece45563667bc]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>shell</title>
		<link>https://www.idatavisual.com/?p=203</link>
		<pubDate>Sun, 14 Jan 2018 09:22:47 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=203</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>内核</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">uname -a
lsb_release -a
</code></pre>

<!--more-->

<h2>查看目录/文件大小</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">查看目录大小：
du -x -sh /*
当前目录文件 按G
du -h --max-depth=1 | grep G | sort -n

当前目录文件 按M
du -h --max-depth=1 | grep M | sort -n

参考home硬盘大小：
df -h | tail -n 1 | awk '{print $4}'

</code></pre>

<h2>log.rate</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">#!/bin/bash
path="/home/work/task/logs"
file_match="2015*/*/access.log"
cd $path
ls -l $file_match | while read line
do
    file=`echo $line|awk '{print $9}'`
    month=`echo $line|awk '{print $6}'`
    day=`echo $line|awk '{print $7}'`
    cp ${path}"/"${file} "/tmp/logtmp/"${month}${day}"acccess.log"
done
</code></pre>

<h2>倒序du -h</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">for i in $(ls -l |grep '^d' |du -s * |sort -nr|awk '{print $2}');do du -sh $i;done
</code></pre>

<h2>nohup &amp; supervise</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">nohup和supervise的区别
supervise是daemontools工具集的一部分，负责监控服务的运行状态并重启意外结束的服务,nohup不能重启。

/bin/supervise-64 -f /home/yujinglei/odp/php/bin/php script/query_task.php -p /home/yujinglei/odp/log/supervise/status/query0/
nohup supervise test/  &gt; /dev/null 2&gt;&amp;1 &amp;

</code></pre>

<blockquote>
  <ul>
  <li>参考</li>
  </ul>
</blockquote>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">http://www.voidcn.com/article/p-fmtwrfpz-ew.html
http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html
https://www.ibm.com/developerworks/cn/aix/library/es-unix-sysadmin1.html
https://www.ibm.com/developerworks/cn/linux/l-cn-nohup/index.html
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date><![CDATA[2018-01-14 17:22:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-14 09:22:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shell]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_7eb23462d36394330445997846679ab5]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c249ed05ac9b85a037b363645680b1ad]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_16eed19357832e124b61be0070c68564]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1520109897;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:35;}i:1;a:1:{s:2:"id";i:64;}i:2;a:1:{s:2:"id";i:210;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_68e876741bd711e3b6318a55c133144c]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_1012cd7b16bc29f220b550b8e6707be6]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_4dfc7fc36744c69bf975ef4975038ddf]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hadoop</title>
		<link>https://www.idatavisual.com/?p=206</link>
		<pubDate>Sun, 14 Jan 2018 09:25:05 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=206</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>集群搭建</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">通常，集群里的一台机器被指定为 NameNode，另一台不同的机器被指定为JobTracker。这些机器是masters。余下的机器即作为DataNode也作为TaskTracker。这些机器是slaves

Namenode是所有HDFS元数据的仲裁者和管理者
一个典型的部署场景是一台机器上只运行一个Namenode实例，而集群中的其它机器分别运行一个Datanode实例

</code></pre>

<h2>环境安装</h2>

<blockquote>
  <ul>
  <li>1.前提环境check</li>
  </ul>
</blockquote>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">java设置
java -version
ssh设置 
which ssh
ssh localhost
</code></pre>

<blockquote>
  <ul>
  <li>2.hadoop下载</li>
  </ul>
</blockquote>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-1.2.1/
</code></pre>

<blockquote>
  <ul>
  <li>3.hadoop环境设置</li>
  </ul>
</blockquote>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">hadoop-env.sh 设置JAVA_HOME

hdfs-site.xml指定了HDFS的默认参数副本数，因为仅运行在一个节点上，所以这里的副本数为1：
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;

&lt;!-- Put site-specific property overrides in this file. --&gt;

&lt;configuration&gt;
  &lt;property&gt;
    &lt;name&gt;fs.default.name&lt;/name&gt;
    &lt;value&gt;localhost:9000&lt;/value&gt;
  &lt;/property&gt;
  &lt;property&gt;
    &lt;name&gt;mapred.job.tracker&lt;/name&gt;
    &lt;value&gt;localhost:9001&lt;/value&gt;
  &lt;/property&gt;
  &lt;property&gt;
    &lt;name&gt;dfs.replication&lt;/name&gt;
    &lt;value&gt;1&lt;/value&gt;
  &lt;/property&gt;
&lt;/configuration&gt;



</code></pre>

<blockquote>
  <ul>
  <li>4.伪分布式模式的操作方法</li>
  </ul>
</blockquote>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null"><br />./bin/hadoop namenode -format  格式化一个新的分布式文件系统-&gt;hadoop安装成功
./bin/start-all.sh  执行start-all.sh启动,启动Hadoop守护进程

将输入文件拷贝到分布式文件系统：
$ bin/hadoop fs -put conf input

运行发行版提供的示例程序：
$ bin/hadoop jar hadoop-examples-1.2.1.jar grep input output 'dfs[a-z.]+'

查看输出文件：
将输出文件从分布式文件系统拷贝到本地文件系统查看：
$ bin/hadoop fs -get output output 
$ cat output/*
或者
在分布式文件系统上查看输出文件：
$ bin/hadoop fs -cat output/*

完成全部操作后，停止守护进程：
$ bin/stop-all.sh

浏览NameNode和JobTracker的网络接口，它们的地址默认为：

NameNode - http://localhost:50070/
JobTracker - http://localhost:50030/

jps查看进程状态：
$ jps
67217 DataNode
66455 NameNode
74987 Jps
68810 TaskTracker
68045 JobTracker
67980 SecondaryNameNode



</code></pre>

<blockquote>
  <ul>
  <li>参考</li>
  </ul>
</blockquote>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">https://segmentfault.com/a/1190000009103629
1.学习资料
https://hadoop.apache.org/docs/r1.0.4/cn/quickstart.html#FullyDistributed
2.mac安装说明
https://segmentfault.com/a/1190000009103629
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date><![CDATA[2018-01-14 17:25:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-14 09:25:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hadoop]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%8d%e5%8a%a1%e5%99%a8"><![CDATA[服务器]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_90e9da0eaaf2ae3aef0b55828ae588cd]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_7e9c429d0ae0426ceabd706605e834e6]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1515998628;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:64;}i:1;a:1:{s:2:"id";i:210;}i:2;a:1:{s:2:"id";i:76;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_2cf129fda9fd05b3d35d9c7a2ccc8dcc]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_c4d2cfd3161c3b1b6b02fd83885f93cc]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>java系列</title>
		<link>https://www.idatavisual.com/?p=208</link>
		<pubDate>Sun, 14 Jan 2018 09:27:19 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>环境搭建</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">idea配置tomcat
http://www.cnblogs.com/sweetie/archive/2011/05/17/2049078.html
</code></pre>

<h2>常见配置文件</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">1.web.xml,structs.xml,spring.xml
</code></pre>

<h2>Struts2基于注解的Action配置</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">package com.tjcyjd.web.action;    

import org.apache.struts2.convention.annotation.Action;    
import org.apache.struts2.convention.annotation.ExceptionMapping;    
import org.apache.struts2.convention.annotation.ExceptionMappings;    
import org.apache.struts2.convention.annotation.Namespace;    
import org.apache.struts2.convention.annotation.ParentPackage;    
import org.apache.struts2.convention.annotation.Result;    
import org.apache.struts2.convention.annotation.Results;    

import com.opensymphony.xwork2.ActionSupport;    

/**  
 * Struts2基于注解的Action配置 
 *   
 */    
@ParentPackage("struts-default")    
@Namespace("/annotation_test")  
@Results( { @Result(name = "success", location = "/main.jsp"),  
        @Result(name = "error", location = "/error.jsp") })  
@ExceptionMappings( { @ExceptionMapping(exception = "java.lange.RuntimeException", result = "error") })  
public class LoginAction extends ActionSupport {  
    private static final long serialVersionUID = 2730268055700929183L;   
    private String loginName;    
    private String password;    

    @Action("login") //或者写成  @Action(value = "login")   
    public String login() throws Exception {    

        if ("yjd".equals(loginName) &amp;&amp; "yjd".equals(password)) {    
            return SUCCESS;    
        } else {    
            return ERROR;    
        }    
    }    
    @Action(value = "add", results = { @Result(name = "success", location = "/index.jsp") })    
    public String add() throws Exception {    
        return SUCCESS;    
    }    
    public String getLoginName() {    
        return loginName;    
    }    
    public void setLoginName(String loginName) {    
        this.loginName = loginName;    
    }    
    public String getPassword() {    
        return password;    
    }    
    public void setPassword(String password) {    
        this.password= password;    
    }    
}  
</code></pre>

<blockquote>
  <ul>
  <li>总结常用的注解</li>
  </ul>
</blockquote>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">Namespace：指定命名空间。
ParentPackage：指定父包。
Result：提供了Action结果的映射。（一个结果的映射）
Results：“Result”注解列表
ResultPath：指定结果页面的基路径。
Action：指定Action的访问URL。
Actions：“Action”注解列表。
ExceptionMapping：指定异常映射。（映射一个声明异常）
ExceptionMappings：一级声明异常的数组。
InterceptorRef：拦截器引用。
InterceptorRefs：拦截器引用组。
@Autowired 可以对类成员变量，方法，构造函数进行标注，完成自动注入，自动装配的工作，按type注入
@Resource 相当于autowired，但按name自动注入

@Resource      //自动注入类型为car的bean
private Car car;

@Resource(name="office") //自动注入名称为office的bean
private Office office;
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2018-01-14 17:27:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-14 09:27:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[java%e7%b3%bb%e5%88%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_710ba3f9a92bc68ea3bf3c2242df56ce]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1517388119;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:64;}i:1;a:1:{s:2:"id";i:41;}i:2;a:1:{s:2:"id";i:210;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_798a85822dba5499bb957410b57b424d]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>web service 配置</title>
		<link>https://www.idatavisual.com/?p=210</link>
		<pubDate>Sun, 14 Jan 2018 09:34:27 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=210</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Nginx </h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">优点是稳定性和低系统资源消耗，高并发连接处理能力(单台物理服务器可支持30000～50000个并发连接)
HTTP 和反向代理服务器
IMAP/POP3/SMTP 代理服
nginx -t 对配置文件进行检查
Nginx服务器的主配置文件nginx.conf中，包括全局配置、I/O事件配置、HTTP配置这三大块内容，配置语句的格式为”关键字值；”(末尾以分号表示结束)，以”#”开始的部分表示注释。
1、全局配置：由各种配置语句组成，不使用特定的界定标记。全局配置部分包括运行用户、工作进程数、错误日志、PID存放位置等基本设置。
2、I/O事件配置：使用”events {}”界定标记，用来指定Nginx进程的I/O响应模型，每个进程的连接数等设置
3、HTTP配置：使用”http{}”界定标记，包括访问日志、HTTP端口、网页目录、默认字符集、连接保持、以及虚拟主机、PHP解析等一系列设置。其中大部分配置语句包含在子界定记”servier {}”内
</code></pre>

<!--more-->

<h2>nginx.conf</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">#user  nobody;
worker_processes  8; #开启8个进程
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000; #开启8个CPU内核，01对应第一个cpu内核，10对应第二个，类推
worker_rlimit_nofile 204800;  #worker进程的最大打开文件数限制，文件不够时，nginx报错：“too many open files”

#error_log  logs/error_log  debug;
error_log  ../log/error_log  notice;
pid        ../var/nginx.pid;

events {
    use epoll;
    worker_connections  204800;
}


http {
    include       mime.types;
    include       upstream.conf;
    include ../../bin/monitor/rt_base_monitor/nginx_rt_mon.conf;
    default_type  application/octet-stream;

    ignore_invalid_headers  off;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 4k;
    large_client_header_buffers 4 32k;
    client_max_body_size 8m;

    client_body_buffer_size 8k;
    client_body_timeout 15;
    client_header_timeout 10;
    send_timeout 240;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on; 

    fastcgi_connect_timeout 600;
    fastcgi_send_timeout 600;
    fastcgi_read_timeout 600;
    fastcgi_buffer_size 512k;
    fastcgi_buffers 16 512k;
    fastcgi_busy_buffers_size 512k;
    fastcgi_temp_file_write_size 512k;
    fastcgi_intercept_errors on;

    keepalive_timeout  0;
    #keepalive_timeout  65;
    set_real_ip_from 10.0.0.0/8;
    real_ip_header X-Real-IP;

    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml;
    gzip_vary on;

    #problem_tracing off;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" "$http_cookie" "$http_user_agent" '
            '$request_time $http_x_bd_logid $http_x_bd_routerip $server_addr $upstream_addr $host '
            '"$http_x_forwarded_for" $product $subsys $tracecode';
    access_log  ../log/access_log  main;

    server {
        listen      {{PORT_0_0}}  default backlog=1024;
        server_name  orp.test.com
        more_set_headers 'Server: Apache';
        error_page 400 403 404 500 501 502 503 504 505 http://www.test.com/search/error.html?tc=$tracecode; 

        set $product orp;
        set $subsys orp;
        if ($http_x_bd_product) {
            set $product $http_x_bd_product;
        }
        if ($http_x_bd_subsys) {
            set $subsys $http_x_bd_subsys;
        }

        access_log  ../log/access_log  main;

        location / {
            root           {{ORP_PATH}}/webroot/;
            fastcgi_pass   unix:{{ORP_PATH}}/php/var/php-cgi.sock;
            fastcgi_index  index.php;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    include vhost/test.conf;
}

</code></pre>

<h3>vhost/test.conf</h3>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">server {
    listen {{PORT_0_0}};
    server_name ~^test\.wiseops\.\w+-orp\.int\.com
                test.com;
    port_in_redirect  off;

    location ~* \.(jpg|gif|png|js|css|jpeg|swf)$ {

    }
    location / {
        rewrite ^/(.*)$ /index.php last;
    }
    location ~ \.php$ {
        root  {{ORP_PATH}}/webroot/test;
        set $phpvm zend;
        fastcgi_index  index.php;
        include  fastcgi_params;
        fastcgi_pass  unix:{{ORP_PATH}}/php/var/php-cgi.sock;
    }
}
</code></pre>

<h2>Apache服务器</h2>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">pache对客户端的响应是支持并发的，运行httpd这个daemon进程之后，它会同时产生多个子进程/线程，每个子进程/线程分别对客户端的请求进行响应；
 
Apache两种工作模式:是prefork模式与worker模式
prefork每个子进程只有一个线程，效率高但消耗内存大，是lunix下默认的模式；worker模式每个子进程有多个线程，内存消耗低，但一个线程崩溃会牵连其它同子进程的线程
 
缺点:
需要对每个用户请求创建一个子进程/线程进行响应；
如果并发的请求非常多(这在大型门户网站是很常见的)就会需要非常多的线程，从而占用极多的系统资源CPU和内存
 
解决方案：
异步服务器是事件驱动程序模式的event-driven，除了用户的并发请求通常只需要一个单一的或者几个线程。因此占用系统资源就非常少。这几种又被称为lightweight web server。举例，对于10,000的并发连接请求，nginx可能仅仅使用几M的内存；而Apache可能需要使用几百M的内存资源。
</code></pre>

 

<h2>nginx.conf实例：</h2>

 

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">#定义Nginx运行的用户和用户组
user www www;
 
#nginx进程数，建议设置为等于CPU总核心数。
worker_processes 8;
 
#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
error_log /var/log/nginx/error.log info;
 
#进程文件
pid /var/run/nginx.pid;
 
#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。
worker_rlimit_nofile 65535;
 
#工作模式与连接数上限
events
{
    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];
    #epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。
    use epoll;
    #单个进程最大连接数（最大连接数=连接数*进程数）
    worker_connections 65535;
}
 
#设定http服务器
http
{
    include mime.types; #文件扩展名与文件类型映射表
    default_type application/octet-stream; #默认文件类型
    #charset utf-8; #默认编码
    server_names_hash_bucket_size 128; #服务器名字的hash表大小
    client_header_buffer_size 32k; #上传文件大小限制
    large_client_header_buffers 4 64k; #设定请求缓
    client_max_body_size 8m; #设定请求缓
    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。
    tcp_nopush on; #防止网络阻塞
    tcp_nodelay on; #防止网络阻塞
    keepalive_timeout 120; #长连接超时时间，单位是秒
     
    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
     
    #gzip模块设置
    gzip on; #开启gzip压缩输出
    gzip_min_length 1k; #最小压缩文件大小
    gzip_buffers 4 16k; #压缩缓冲区
    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_comp_level 2; #压缩等级
    gzip_types text/plain application/x-javascript text/css application/xml;
    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_vary on;
    #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用
     
    upstream blog.ha97.com {
    #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。
    server 192.168.80.121:80 weight=3;
    server 192.168.80.122:80 weight=2;
    server 192.168.80.123:80 weight=3;
}
 
#虚拟主机的配置
server
{
    #监听端口
    listen 80;
    #域名可以有多个，用空格隔开
    server_name www.ha97.com ha97.com;
    index index.html index.htm index.php;
    root /data/www/ha97;
    location ~ .*.(php|php5)?$
    {
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        include fastcgi.conf;
    }
    #图片缓存时间设置
    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$
    {
        expires 10d;
    }
    #JS和CSS缓存时间设置
    location ~ .*.(js|css)?$
    {
        expires 1h;
    }
    #日志格式设定
    log_format access '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" $http_x_forwarded_for';
    #定义本虚拟主机的访问日志
    access_log /var/log/nginx/ha97access.log access;
     
    #对 "/" 启用反向代理
    location / {
        proxy_pass http://127.0.0.1:88;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #以下是一些反向代理的配置，可选。
        proxy_set_header Host $host;
        client_max_body_size 10m; #允许客户端请求的最大单文件字节数
        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，
        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)
        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)
        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)
        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置
        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）
        proxy_temp_file_write_size 64k;
        #设定缓存文件夹大小，大于这个值，将从upstream服务器传
    }
     
    #设定查看Nginx状态的地址
    location /NginxStatus {
        stub_status on;
        access_log on;
        auth_basic "NginxStatus";
        auth_basic_user_file conf/htpasswd;
        #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。
    }
     
    #本地动静分离反向代理配置
    #所有jsp的页面均交由tomcat或resin处理
        location ~ .(jsp|jspx|do)?$ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://127.0.0.1:8080;
    }
    #所有静态文件由nginx直接读取不经过tomcat或resin
    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$
    { expires 15d; }
    location ~ .*.(js|css)?$
    { expires 1h; }
}
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date><![CDATA[2018-01-14 17:34:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-14 09:34:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[210]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web%e6%9c%8d%e5%8a%a1"><![CDATA[web服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1523629707;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:64;}i:1;a:1:{s:2:"id";i:57;}i:2;a:1:{s:2:"id";i:289;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>设计观点</title>
		<link>https://www.idatavisual.com/?p=216</link>
		<pubDate>Sun, 14 Jan 2018 09:41:57 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=216</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
  <ul>
  <li>1.Yii框架设计思路：</li>
  </ul>
</blockquote>

<code>模块  为组件编程，事件驱动编程提供基础（事件，行为类）
组件系统中相对独立的程序单元，完成相对独立的软件功能（模块属性，组件，子模块）
组件通过绑定行为类到自己身上，从而调用行为类的方法</code>

<blockquote>
  <ul>
  <li>2.memcache组件设计思路：</li>
  </ul>
</blockquote>

<code>通过main.php中component初始化cache组件, 添加memcache配置host，port，class --&gt;初始化组件完成
组件调用Yii::app-&gt;cache-&gt;setMetchName()</code>

<blockquote>
  <ul>
  <li>敏捷开发：</li>
  </ul>
</blockquote>

<code>敏捷的最大优势不是对不断的变化做出反应，也不是实现更快、成本更低的交付，而是更早地知道是不是要继续下去，有没有继续下去的必要，还是应该停下来去做别的事</code>

<blockquote>
  <ul>
  <li>数据分析观点：</li>
  </ul>
</blockquote>

<code>建议使用小数据的方法安排和搭建分析模型外，还建议有一个完整的大数据集。“这类似于一个图书馆，你不需要读完所有的书籍，但在你需要的时候，你能找到要找的书</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date><![CDATA[2018-01-14 17:41:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-14 09:41:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php-yii%e6%a1%86%e6%9e%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521300246;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:45;}i:1;a:1:{s:2:"id";i:270;}i:2;a:1:{s:2:"id";i:191;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>书法临摹实例</title>
		<link>https://www.idatavisual.com/?p=223</link>
		<pubDate>Sun, 14 Jan 2018 13:10:25 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=223</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>实例一：</h3>

<img src = "http://www.ps123.net/photoshop/UploadSoftPic/201203/2012030817323961.jpg" width=400 height= 400/>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date><![CDATA[2018-01-14 21:10:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-14 13:10:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b9%a6%e6%b3%95%e4%b8%b4%e6%91%b9%e5%ae%9e%e4%be%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%94%9f%e6%b4%bb%e6%84%9f%e6%82%9f"><![CDATA[生活感悟]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1522685396;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:64;}i:1;a:1:{s:2:"id";i:72;}i:2;a:1:{s:2:"id";i:285;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>数据模型</title>
		<link>https://www.idatavisual.com/?p=228</link>
		<pubDate>Tue, 16 Jan 2018 13:12:30 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=228</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>概念模型</h3>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">概念数据模型（Conceptual Data Model）：简称概念模型，主要用来描述世界的概念化结构，
概念数据模型的内容包括重要的实体及实体之间的关系。在概念数据模型中不包括实体的属性，也不用定义实体的主键。
</code></pre>

<img src="https://www.idatavisual.com/wp-content/uploads/2018/01/conceptual-data-model.jpg" width=300 height= 300 align='center'/>

<h3>逻辑模型</h3>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">逻辑数据模型（Logical Data Model）:简称数据模型，这是用户从数据库所看到的模型，是具体的DBMS所支持的数据模型
逻辑数据模型的内容包括所有的实体和关系，确定每个实体的属性，定义每个实体的主键，指定实体的外键，需要进行范式化处理。
</code></pre>

<img src="https://www.idatavisual.com/wp-content/uploads/2018/01/logical-data-model.jpg" width=300 height= 300 align='center'/>

<h3>物理模型</h3>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-null">物理数据模型（Physical Data Model）:简称物理模型，是面向计算机物理表示的模型，描述了数据在储存介质上的组织结构，它不但与具体的DBMS有关，而且还与操作系统和硬件有关。
</code></pre>

<img src="https://www.idatavisual.com/wp-content/uploads/2018/01/physical-data-model.jpg" width=300 height= 300 align='center'/>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2018-01-16 21:12:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-16 13:12:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%b8%8e%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1521296001;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:45;}i:1;a:1:{s:2:"id";i:31;}i:2;a:1:{s:2:"id";i:29;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>非对称加密算法</title>
		<link>https://www.idatavisual.com/?p=243</link>
		<pubDate>Mon, 05 Feb 2018 08:16:12 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=243</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://www.idatavisual.com/wp-content/uploads/2018/02/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%953.jpg"><img src="https://www.idatavisual.com/wp-content/uploads/2018/02/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%953-1024x416.jpg" alt="" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date><![CDATA[2018-02-05 16:16:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-05 08:16:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%9d%9e%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e7%ae%97%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="final"><![CDATA[Final]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1523561444;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:289;}i:1;a:1:{s:2:"id";i:17;}i:2;a:1:{s:2:"id";i:201;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>软件设计之OOD</title>
		<link>https://www.idatavisual.com/?p=270</link>
		<pubDate>Sat, 03 Mar 2018 12:52:16 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=270</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>一、OOA 面向对象分析:</h3>

<h4>what（是什么）:</h4>

<blockquote>
  面向对象的分析和设计(OOAD)是一种流行的技术方法:
  通过应用面向对象的编程来分析和设计应用程序、系统或业务，以及在整个开发生命周期中使用可视化建模来提高更好的沟通效率和产品质量。
  
  在现代软件工程中，OOAD最好是以迭代式和增量式的方式进行:
  持续迭代，OOAD分析活动产出，OOA的分析模型和OOD的设计模型，在由风险和商业价值等关键因素驱动下产品将会被不断的改进和发展。
</blockquote>

<h4>how(怎么做)：</h4>

<blockquote>
  在OOA过程中需要完成的基本任务:
  1.         Find the objects 找到对象
  2.         Organize the objects 组织对象
  3.         Describe how the objects interact 描述对象交互
  4.         Define the behavior of the objects  定义对象行为
  5.         Define the internals of the objects  定义对象内部组件
  
  在OOA中使用的通用模型是用例(use cases)和对象模型(object models)：
  用例描述系统必须完成的标准域功能的场景。对象模型描述名称、类关系(例如，Circle是shape的子类)、操作和主要对象的属性。还可以创建用户界面模型或原型来帮助理解。
  
  在面向对象设计(OOD)中，开发人员根据面向对象分析中产生的概念模型设计具体技术实现约束：
  这样的约束可能包括硬件和软件平台、性能需求、持久性存储和事务、系统的可用性以及预算和时间所带来的限制。OOA分析产出的概念模型是独立于技术的，它们被映射到实现类和接口，从而生成解决方案域的模型，即详细描述了基于具体的技术之上系统如何建设。
  
  面向对象的建模(OOM)是在整个开发生命周期中使用面向对象范式去建模应用程序、系统和业务领域的常用方法。OOM是现代软件工程中大量使用的主要技术。
  
  面向对象建模通常分为两个方面:动态行为建模，如业务流程和用例，以及类和组件等静态结构的建模。在OOM中，OOA和OOD是两个不同的抽象级别(即分析级别和设计级别)。统一建模语言(UML)和SysML是用于面向对象建模的两种流行的国际标准语言。
</blockquote>

<hr />

<h3>二、OOD 面向对象设计:</h3>

<h4>定义：</h4>

<blockquote>
  指设计一套通过对象，以及对象交互逻辑的系统的过程，目的是为了解决软件问题；是一种软件设计方法
</blockquote>

<h4>主题：</h4>

<blockquote>
  <ul>
  <li><p>1.设计输入：
  概念模型 Conceptual model
  用例 Use case
  系统时序图 system sequence diagram
  用户界面  user interface
  关系数据模型 relational data model</p></li>
  <li><p>2.概念：
  对象/类  object/class
  信息隐藏  Information hiding
  继承   Inheritance
  接口   interface
  多态   Polymorphism</p></li>
  <li><p>3.设计或开发概念
  定义对象，从概念图创建类图:通常将实体映射到类
  识别属性
  使用设计模式(如适用)
  定义应用程序框架(如果适用)
  确定持久对象/数据
  识别和定义远程对象(如果适用)</p></li>
  <li><p>4.设计的输出
  时序图  Sequence diagram
  类图    class diagram</p></li>
  </ul>
</blockquote>

<h4>一些设计原则和策略</h4>

<blockquote>
  <ul>
  <li><p>依赖注入 Dependency injection:
  基本思想是，如果一个对象依赖于另一个对象的实例，那么需要的对象被“注入”到依赖对象中;例如，将数据库连接作为参数传递给构造函数而不是在内部创建一个。</p></li>
  <li><p>非循环依赖关系原则 Acyclic dependencies principle:
  包或组件的依赖关系图应该没有循环。也被称为有向无环图。例如，包C依赖于包B，它依赖于包A。如果包A也依赖于包C，那么就会有一个循环。</p></li>
  <li><p>复合重用原则 Composite reuse principle:
  支持对象的多态组合而不是继承。</p></li>
  </ul>
</blockquote>

<hr />

<h3>三、OOP 面向对象开发:</h3>

<h4>特征:</h4>

<blockquote>
  <ul>
  <li><p>1.分享非面向对象程序前身语言 :变量,程序</p></li>
  <li><p>2.类与对象
  类（Class）：定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。
  对象：是类的实例。</p></li>
  <li><p>3.动态分发/消息传递
  指一个方法的调用也叫消息的传递，一个消息(方法的名称和它的输入参数)被传递给对象以进行分派。</p></li>
  <li><p>4.封装性
  面向对象程序设计隐藏了某一方法的具体执行步骤，取而代之的是通过消息传递机制传送消息给它，也就是调用对应方法</p></li>
  <li><p>5.继承
  子类比原本的类（称为父类）要更加具体化,子类会继承父类的属性和行为，并且也可包含它们自己的</p></li>
  <li><p>6.多态
  指由继承而产生的相关的不同的类，其对象对同一消息会做出不同的响应,即是两个子类各自实现所继承了父类某个方法，再各自调用这个方法时产出不同的处理结果便是多态</p></li>
  <li><p>7.抽象性
  简化复杂的现实问题的途径，它可以为具体问题找到最恰当的类定义</p></li>
  </ul>
</blockquote>

<h4>参考：</h4>

<ol>
<li>https://en.wikipedia.org/wiki/Object-oriented_design#Object-oriented_concepts</li>
<li>https://en.wikipedia.org/wiki/Object-oriented_programming</li>
<li>https://en.wikipedia.org/wiki/Object-oriented_analysis_and_design</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date><![CDATA[2018-03-03 20:52:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-03 12:52:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bd%af%e4%bb%b6%e8%ae%be%e8%ae%a1%e4%b8%ad%e7%9a%84%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1%e8%ae%be%e8%ae%a1%e6%80%9d%e6%83%b3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e8%ae%be%e8%ae%a1"><![CDATA[设计]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1522886970;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:45;}i:1;a:1:{s:2:"id";i:228;}i:2;a:1:{s:2:"id";i:191;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>phpDoc生成</title>
		<link>https://www.idatavisual.com/?p=285</link>
		<pubDate>Mon, 05 Mar 2018 08:14:12 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=285</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>what?</h3>

<code>phpDocumentor
是一个文档自动生成工具，可以帮助我们编写规范的注释，生成易于理解，结构清晰的文档，对代码升级，维护,移交等都有非常大的帮助。</code>

<hr />

<h3>how？</h3>

<pre class="line-numbers prism-highlight" data-start="1"><code class="language-shell">#下载phpar:
http://www.phpdoc.org/phpDocumentor.phar
#cmd实例执行（将project_name项目代码doc生成到docs/project_name/api）：
$ php phpDocumentor.phar -d ./project_name/. -t docs/project_name/api

</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>285</wp:post_id>
		<wp:post_date><![CDATA[2018-03-05 16:14:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-05 08:14:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[phpdoc%e7%94%9f%e6%88%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_41a756a8fbcf9280c9d7b4f87763f194]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1522886861;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:76;}i:1;a:1:{s:2:"id";i:57;}i:2;a:1:{s:2:"id";i:64;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_8f5a5fe906ce25e0cbfe31469c755bd2]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP runtime 组件</title>
		<link>https://www.idatavisual.com/?p=289</link>
		<pubDate>Wed, 04 Apr 2018 12:15:06 +0000</pubDate>
		<dc:creator><![CDATA[ken]]></dc:creator>
		<guid isPermaLink="false">https://www.idatavisual.com/?p=289</guid>
		<description></description>
		<content:encoded><![CDATA[<pre class="prism-highlight line-numbers" data-start="1"><code class="language-null">ampq  Advanced Message Queuing Protocol 高级消息队列协议，异步消息传递，例如：RabbitMQ
AMQP publishers send to exchanges, which route messages to queues. Subscribers consume from the queues.
参考：
https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php-amqp/worker.php
http://www.cnblogs.com/lchb/articles/2889923.html


apache
Apache HTTP Server  网页服务器,是最流行的Web服务器软件之一

参考：
https://wiki.archlinux.org/index.php
/Apache_HTTP_Server_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)
http://www.jianshu.com/p/2fb9a3bb12f6


apc
指APC把PHP文件源码的编译结果缓存起来，然后在每次调用时先对比时间标记。 
如果未过期，则使用缓存的中间代码运行。 默认缓存3600s(一小时)。 
但是这样仍会浪费大量CPU时间。

解决：因为php特性，每次执行完页面后，所有运行对象都会释放，
apc可以用于脚本，进程间共享，缓存数据

apc 是单机Cache，使用共享内存保存数据
memcache 实现多机共享，比如用于解决session共享问题

apcu
apc的去掉opcode caching版本

bcmath
二级制计算器

bz2
bzip2 压缩解压组件

calendar
日历组件

Core
couchbase
面向文档的数据库，是基于 Membase 与 CouchDB 开发
Couchbase Server is an open source, distributed, NoSQL document-oriented engagement database
https://developer.couchbase.com/documentation/server/5.0/
introduction/intro.html

csprng
密码学安全伪随机数生成器，常被作为密码学原件，用以搭建更复杂的密码学应用

ctype
数据类型检测，比如字符，数字等

cubrid
数据库组件

curl
能够连接通讯各种服务器、使用各种协议，目前支持的协议有 http、https、ftp、gopher、telnet、dict、file等等

date
日期组件

dba
数据库抽象层，如pdo，odbc等

dom（Document Object Model）
xml操作，libxml等

enchant
国际化与字符编码支持

Ev
pecl新增扩展，进程控制,提供libev接口，其接口和libevent基本类似，libev是libevent之后的一个事件驱动的编程框架
事件循环，IO复用，处理高并发网络连接问题
创建所需的网络监听套接字 -&gt; 注册在执行期间要调用的事件 -&gt; 启动主事件循环- &gt; 让 libev 处理过程的其余部分
http://www.jianshu.com/p/3299e19d9bf4
http://blog.csdn.net/yusiguyuan/article/details/18274313
https://www.ibm.com/developerworks/cn/aix/library/au-libev/index.html


exif
 图像处理
ffmpeg
 图像处理

fileinfo
文件系统相关扩展

filter
变量与类型相关扩展，变量检查，过滤

ftp
文件服务

gd
图像生成和处理
gearman
Gearman提供了一个通用的应用框架，将工作外包给其他更适合做这项工作的机器或过程。
它允许您并行地工作，负载平衡处理，并调用语言之间的函数。
它可以用于各种应用程序，从高可用性web站点到数据库复制事件的传输。
换句话说，它是分布式处理通信的神经系统。

geoip
 Geo IP 定位

gettext
国际化与字符编码支持
gmagick
图像生成和处理

gmp
数学扩展

gnupg
非文本内容的 MIME 输出

hash
加密扩展
http
http协议

ibm_db2
数据库扩展

iconv
国际化与字符编码支持

imagick
图像处理

imap
邮件相关扩展



inotify
文件系统相关扩展

interbase
ibase数据库

intl
国际化与字符编码支持
json
其它基本扩展
ldap
LDAP server  轻量目录访问协议，LDAP目录以树状的层次结构来存储数据


libevent
进程控制扩展，Libevent是一个库，它提供了一种机制，当某个特定事件发生或超时时，它将执行回调函数。


libsodium
进程控制扩展

libxml
XML 操作

mbstring
国际化与字符编码支持 

mcrypt 加密扩展
memcache
memcached
其它服务

meta
mime_magic

ming
    非文本内容的 MIME 输出

mongo
mongodb
        针对各数据库系统对应的扩展

mssql  MS SQL server connection
mysql  MySQL Server 已经废弃

mysqli

ncurses
针对命令行的扩展，实验性，未来被修改风险高
newrelic
服务器性能监控工具
https://ruby-china.org/topics/22379


oauth
web服务，提供 OAuth 消费方和提供方之间的绑定。OAuth 是一种建立在 HTTP 之上的授权协议，用于允许应用程序安全访问数据而无需存储用户名和密码


oci8
oracle数据库访问，支持sql，pl/sql
odbc
通用数据库访问组件，支持 Adabas D,IBM DB2,iODBC,Solid,Sybase SQL

opcache
OPcache 通过将 PHP 脚本预编译的字节码存储到共享内存中来提升 PHP 的性能， 存储预编译字节码的好处就是 省去了每次加载和解析 PHP 脚本的开销


openssl
加密扩展，用OpenSSL 库来对称/非对称加解密，以及 PBKDF2、 PKCS7、 PKCS12、 X509 和其他加密操作
password
加密，密码散列算法，

pcntl
进程控制，PHP的进程控制支持实现了Unix方式的进程创建, 程序执行, 信号处理以及进程的中断。 
进程控制不能被应用在Web服务器环境，当其被用于Web服务环境时可能会带来意外的结果


pcre
PDO
数据库访问组件，为PHP访问数据库定义了一个轻量级的一致接口，不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据
pdo_ibm
pdo_mysql
pdo_pgsql
pdo_sqlite

pgsql
PostgreSQL 数据库扩展

Phar
    压缩与归档扩展

posix
POSIX，Portable Operating System Interface
是UNIX系统的一个设计标准，遵循这个标准的好处是软件可以跨平台
提供访问定义在POSIX.1中的函数的接口


pspell
国际化与字符编码支持 

pthreads
进程控制扩展
在 PHP 中使用多线程技术的面向对象的 API,提供全套工具。 
通过使用 Thread， Worker，Threaded 对象，PHP 应用可以创建、读取、写入以及执行多线程应用，
并可以在多个线程之间进行同步控制

readline
    针对命令行的扩展

recode
国际化与字符编码支持

redis

Reflection
变量与类型相关扩展,对类、接口、函数、方法和扩展进行反向工程的能力

regex
文本处理 , 正则表达式匹配
rrd
pecl/rrd扩展提供了对RRDtool C库的绑定。
RRDtool是开放源码行业标准、高性能数据日志记录和时间序列数据绘图系统。

session
一个访问者访问你的 web 网站将被分配一个唯一的 id, 就是所谓的会话 id. 
这个 id 可以存储在用户端的一个 cookie 中，也可以通过 URL 进行传递.

shmop
提供一系列方法，php用于读写，建，删 unix的共享内存模块

SimpleXML
提供了一个非常简单和易于使用的工具集，能将 XML 转换成一个带有一般属性选择器和数组迭代器的对象

snmp
Simple Network Management Protocol
提供了一个非常简单和易于使用的工具集，能将通过简单网络管理协议来管理远程设备

soap
SOAP扩展可以用来编写SOAP服务器和客户端

sockets
Socket扩展实现了和socket通讯功能的底层接口，它可以和客户端一样当做一个socket服务器。
比如：构建简单的TCP/IP 客户端/服务器端


SPL
用于解决典型问题(standard problems)的一组接口与类的集合。
数据结构,迭代器(foreach等处理),接口,异常,SPL 函数,文件处理,各种类及接口

SplType
帮助人们使PHP成为一种更强的类型语言，并且可以成为标量类型提示的一个很好的替代品。它提供了不同的类型处理类，如整数、浮点数、bool、enum和字符串

SQLite
 数据库扩展，应用场景：需要数据库的小工具软件，一般用于对并发数量要求不高的本地查询，比如 个人博客（WordPress支持SQLite3）、本地工具软件、嵌入式系统用数据库（Android） 

sqlite3
实现与 SQLite 3 数据库对接的类。


sqlsrv
Microsoft SQL Server Driver for PHP ,allows you to access Microsoft SQL Server 
and SQL Azure databases when running PHP on Windows. 


ssh2
Secure Shell2,绑定到libssh2库，该库使用安全的加密传输，
提供对在远程机器上资源的访问(shell、远程exec、隧道、文件传输)。


standard
基本扩展 

suhosin
superglobals
对于全部脚本而言，PHP 提供了大量的预定义变量。
这些变量表示包含：从外部变量到内建环境变量，从最后一个错误消息到最后一个检索的头的所有内容。
比如：$_SESSION,$_SERVER,$_GET,$_POST,$GLOBALS

svn
该扩展实现了对Subversion(SVN)的PHP绑定，这是一个版本控制系统，
允许PHP脚本与SVN存储库通信

sybase
sybase数据库相关

sysvmsg
进程扩展，Semaphore, Shared Memory and IPC，
这个模块为System V IPC系列提供了包装器。它包括信号量、共享内存和进程间消息传递(IPC)。

sysvsem  进程扩展
sysvshm  进程扩展
tidy  HTML文档相关

tokenizer
提供访问在Zend引擎中嵌入的PHP标记器的接口,php源码解析

wddx   XML 操作 

wincache
Windows Cache for PHP
PHP的Windows缓存扩展是一个PHP加速器，用于提高在Windows和Windows服务器上运行的PHP应用程序的速度

xcache XCache是一个开源的 opcode 缓存器/优化器。

xdebug  

xhprof XHProf是一个轻量级的分层结构和基于仪表的分析器。
xml  XML 解析器 
xmlreader
xmlrpc   用来编写xml-rpc服务器和客户端。
xmlwriter
xsl   XSL扩展实现了XSL标准
yaml
扩展实现了(YAML) 数据序列化标准。 通过LibYAML 来解析和编码
zend   http://php.net/manual/en/internals2.ze1.zendapi.php
ZendCache
ZendDebugger
ZendUtils
zip  读写ZIP压缩文档以及它们里面的文件。
zlib 能够透明地读取和写入gzip(.gz)压缩文件
zmq   是一个能让你快速设计、开发基于消息应用的函数库
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date><![CDATA[2018-04-04 20:15:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-04 12:15:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[php-runtime-%e7%bb%84%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80"><![CDATA[编程语言]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_76f843d90e2c8aaa32ddf4261e2184c4]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_954dcad8747bea21a040902466d09787]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_f73b3f660a277a7f1ca917f30d090b6a]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_bd6534d988b2b78c870e0021a9fbee1d]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_d7068c30a71768053944c7c3195d7202]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_a05c536fa7f56a4db01edea285b3ee78]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_d0cf3494393adc3aca5d09d599242497]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_be214f8baee3efa6fb427fde924e418f]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_e749e234b6e5614e647782b5baabfc04]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1523043767;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:57;}i:1;a:1:{s:2:"id";i:210;}i:2;a:1:{s:2:"id";i:70;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_8a9da191f20007d4c4f636c5235bb8c5]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0ebff16602ec16cebd8dddfd7ba87c9b]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_7e0538f1aea66f291d45b3e307cdc6e0]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_235f527bae56b02dfeadd37b30ce0710]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_27c685a9e42d79d05de96d20e29a8061]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_de6650718756f700c4af49aefa4fedfd]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_05dac5c0fa38bb7aee68b5907587d52a]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_db6a0ee99a912a8bfb669a54aac3be04]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_072a328601f07677572fe54f69534783]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_2500a88bb86fef55f0fdf6e6da5ef8d3]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_ae05de6d9117e187f076da81448e6a36]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
